!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=64)}([function(e,t,n){"use strict";e.exports=n(33)},function(e,t,n){e.exports=n(37)()},function(e,t,n){"use strict";var r=n(18),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function l(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return l(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){var r=n(31);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t,n){var r=n(32),o=n(4);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},,function(e,t,n){e.exports=n(39)},function(e,t,n){var r=n(40),o=n(41),a=n(42),i=n(43);e.exports=function(e){return r(e)||o(e)||a(e)||i()}},function(e,t,n){"use strict";(function(e){var r=n(0),o=n.n(r),a=n(3),i=n(1),l=n.n(i),u="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var s=o.a.createContext||function(e,t){var n,o,i,s="__create-react-context-"+((u[i="__global_unique_id__"]=(u[i]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=c(t.props.value),t}Object(a.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((a=r)===(i=o)?0!==a||1/a==1/i:a!=a&&i!=i)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var a,i},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[s]=l.a.object.isRequired,n);var d=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(a.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return d.contextTypes=((o={})[s]=l.a.object,o),{Provider:f,Consumer:d}};t.a=s}).call(this,n(61))},function(e,t,n){var r=n(62);e.exports=p,e.exports.parse=a,e.exports.compile=function(e,t){return l(a(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,l="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(i,p),i=p+f.length,d)l+=d[1];else{var h=e[i],m=n[2],v=n[3],y=n[4],g=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var x=null!=m&&null!=h&&h!==m,E="+"===b||"*"===b,k="?"===b||"*"===b,T=n[2]||s,S=y||g;r.push({name:v||a++,prefix:m||"",delimiter:T,optional:k,repeat:E,partial:x,asterisk:!!w,pattern:S?c(S):w?".*":"[^"+u(T)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var a="",l=t||{},u=(o||{}).pretty?i:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=l[s.name];if(null==d){if(s.optional){s.partial&&(a+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');a+=s.prefix+f}}else a+=s}return a}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",l=0;l<e.length;l++){var c=e[l];if("string"==typeof c)i+=u(c);else{var d=u(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),i+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=u(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",s(new RegExp("^"+i,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=i(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(u[s]=n[s]);if(r){l=r(n);for(var f=0;f<l.length;f++)a.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(2);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(2),o=n(50),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(l=n(22)),l),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(a)})),e.exports=u}).call(this,n(49))},function(e,t,n){"use strict";var r=n(2),o=n(51),a=n(19),i=n(53),l=n(56),u=n(57),c=n(23);e.exports=function(e){return new Promise((function(t,s){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password||"";d.Authorization="Basic "+btoa(h+":"+m)}var v=i(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),a(v,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?l(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p};o(t,s,r),p=null}},p.onabort=function(){p&&(s(c("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){s(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),s(c(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var y=n(58),g=(e.withCredentials||u(v))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;g&&(d[e.xsrfHeaderName]=g)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),s(e),p=null)})),void 0===f&&(f=null),p.send(f)}))}},function(e,t,n){"use strict";var r=n(52);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},function(e,t,n){"use strict";var r=n(2);e.exports=function(e,t){t=t||{};var n={},o=["url","method","params","data"],a=["headers","auth","proxy"],i=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(o,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(a,(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(i,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var l=o.concat(a).concat(i),u=Object.keys(t).filter((function(e){return-1===l.indexOf(e)}));return r.forEach(u,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";e.exports=n(63)},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(34)},function(e,t){function n(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}e.exports=function(e){return function(){var t=this,r=arguments;return new Promise((function(o,a){var i=e.apply(t,r);function l(e){n(i,o,a,l,u,"next",e)}function u(e){n(i,o,a,l,u,"throw",e)}l(void 0)}))}}},function(e,t,n){e.exports=n(44)},function(e,t,n){"use strict";var r=n(26),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<i.length;++v){var y=i[v];if(!(a[y]||r&&r[y]||m&&m[y]||l&&l[y])){var g=d(n,y);try{c(t,y,g)}catch(e){}}}}return t}},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t){function n(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=n=function(e){return typeof e}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(t)}e.exports=n},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(16),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function x(){}function E(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var k=E.prototype=new x;k.constructor=E,r(k,w.prototype),k.isPureReactComponent=!0;var T={current:null},S=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:T.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var N=/\/+/g,O=[];function R(e,t,n,r){if(O.length){var o=O.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function L(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>O.length&&O.push(e)}function A(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case a:case i:u=!0}}if(u)return r(o,t,""===n?"."+M(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+M(l=t[c],c);u+=e(l,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=v&&t[v]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(l=t.next()).done;)u+=e(l=l.value,s=n+M(l,c++),r,o);else if("object"===l)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function z(e,t){e.func.call(e.context,t,e.count++)}function F(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?I(e,r,n,(function(e){return e})):null!=e&&(_(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(N,"$&/")+"/")+n)),r.push(e))}function I(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(N,"$&/")+"/"),A(e,F,t=R(t,a,r,o)),L(t)}var j={current:null};function D(){var e=j.current;if(null===e)throw Error(y(321));return e}var U={ReactCurrentDispatcher:j,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:T,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return I(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;A(e,z,t=R(null,null,t,n)),L(t)},count:function(e){return A(e,(function(){return null}),null)},toArray:function(e){var t=[];return I(e,t,null,(function(e){return e})),t},only:function(e){if(!_(e))throw Error(y(143));return e}},t.Component=w,t.Fragment=l,t.Profiler=c,t.PureComponent=E,t.StrictMode=u,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=U,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var o=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=T.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)S.call(t,s)&&!C.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=P,t.createFactory=function(e){var t=P.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return D().useCallback(e,t)},t.useContext=function(e,t){return D().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return D().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return D().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return D().useLayoutEffect(e,t)},t.useMemo=function(e,t){return D().useMemo(e,t)},t.useReducer=function(e,t,n){return D().useReducer(e,t,n)},t.useRef=function(e){return D().useRef(e)},t.useState=function(e){return D().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(16),a=n(35);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));function l(e,t,n,r,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var u=!1,c=null,s=!1,f=null,d={onError:function(e){u=!0,c=e}};function p(e,t,n,r,o,a,i,s,f){u=!1,c=null,l.apply(d,arguments)}var h=null,m=null,v=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,o,a,l,d,h){if(p.apply(this,arguments),u){if(!u)throw Error(i(198));var m=c;u=!1,c=null,s||(s=!0,f=m)}}(r,t,void 0,e),e.currentTarget=null}var g=null,b={};function w(){if(g)for(var e in b){var t=b[e],n=g.indexOf(e);if(!(-1<n))throw Error(i(96,e));if(!E[n]){if(!t.extractEvents)throw Error(i(97,e));for(var r in E[n]=t,n=t.eventTypes){var o=void 0,a=n[r],l=t,u=r;if(k.hasOwnProperty(u))throw Error(i(99,u));k[u]=a;var c=a.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&x(c[o],l,u);o=!0}else a.registrationName?(x(a.registrationName,l,u),o=!0):o=!1;if(!o)throw Error(i(98,r,e))}}}}function x(e,t,n){if(T[e])throw Error(i(100,e));T[e]=t,S[e]=t.eventTypes[n].dependencies}var E=[],k={},T={},S={};function C(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(i(102,t));b[t]=r,n=!0}}n&&w()}var P=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),_=null,N=null,O=null;function R(e){if(e=m(e)){if("function"!=typeof _)throw Error(i(280));var t=e.stateNode;t&&(t=h(t),_(e.stateNode,e.type,t))}}function L(e){N?O?O.push(e):O=[e]:N=e}function A(){if(N){var e=N,t=O;if(O=N=null,R(e),t)for(e=0;e<t.length;e++)R(t[e])}}function M(e,t){return e(t)}function z(e,t,n,r,o){return e(t,n,r,o)}function F(){}var I=M,j=!1,D=!1;function U(){null===N&&null===O||(F(),A())}function $(e,t,n){if(D)return e(t,n);D=!0;try{return I(e,t,n)}finally{D=!1,U()}}var B=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,V=Object.prototype.hasOwnProperty,H={},W={};function K(e,t,n,r,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a}var Q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){Q[e]=new K(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];Q[t]=new K(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){Q[e]=new K(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){Q[e]=new K(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){Q[e]=new K(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){Q[e]=new K(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){Q[e]=new K(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){Q[e]=new K(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){Q[e]=new K(e,5,!1,e.toLowerCase(),null,!1)}));var q=/[\-:]([a-z])/g;function Y(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(q,Y);Q[t]=new K(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(q,Y);Q[t]=new K(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(q,Y);Q[t]=new K(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){Q[e]=new K(e,1,!1,e.toLowerCase(),null,!1)})),Q.xlinkHref=new K("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){Q[e]=new K(e,1,!1,e.toLowerCase(),null,!0)}));var G=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,n,r){var o=Q.hasOwnProperty(t)?Q[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!V.call(W,e)||!V.call(H,e)&&(B.test(e)?W[e]=!0:(H[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}G.hasOwnProperty("ReactCurrentDispatcher")||(G.ReactCurrentDispatcher={current:null}),G.hasOwnProperty("ReactCurrentBatchConfig")||(G.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,oe=Z?Symbol.for("react.profiler"):60114,ae=Z?Symbol.for("react.provider"):60109,ie=Z?Symbol.for("react.context"):60110,le=Z?Symbol.for("react.concurrent_mode"):60111,ue=Z?Symbol.for("react.forward_ref"):60112,ce=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,de=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ie:return"Context.Consumer";case ae:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ve(e.type);case pe:return ve(e.render);case de:if(e=1===e._status?e._result:null)return ve(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,a=ve(e.type);n=null,r&&(n=ve(r.type)),r=a,a="",o?a=" (at "+o.fileName.replace(J,"")+":"+o.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function xe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Ee(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ke(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Te(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function Se(e,t){Te(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Pe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Pe(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ce(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Pe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function _e(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Oe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Re(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function Le(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Me="http://www.w3.org/1999/xhtml",ze="http://www.w3.org/2000/svg";function Fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ie(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var je,De=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==ze||"innerHTML"in e)e.innerHTML=t;else{for((je=je||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=je.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ue(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function $e(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Be={animationend:$e("Animation","AnimationEnd"),animationiteration:$e("Animation","AnimationIteration"),animationstart:$e("Animation","AnimationStart"),transitionend:$e("Transition","TransitionEnd")},Ve={},He={};function We(e){if(Ve[e])return Ve[e];if(!Be[e])return e;var t,n=Be[e];for(t in n)if(n.hasOwnProperty(t)&&t in He)return Ve[e]=n[t];return e}P&&(He=document.createElement("div").style,"AnimationEvent"in window||(delete Be.animationend.animation,delete Be.animationiteration.animation,delete Be.animationstart.animation),"TransitionEvent"in window||delete Be.transitionend.transition);var Ke=We("animationend"),Qe=We("animationiteration"),qe=We("animationstart"),Ye=We("transitionend"),Ge="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Xe=new("function"==typeof WeakMap?WeakMap:Map);function Je(e){var t=Xe.get(e);return void 0===t&&(t=new Map,Xe.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(i(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return tt(o),e;if(a===r)return tt(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var at=null;function it(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(at=rt(at,e)),e=at,at=null,e){if(ot(e,it),at)throw Error(i(95));if(s)throw e=f,s=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ct(e){if(!P)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function dt(e,t,n,r){if(st.length){var o=st.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Pn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ut(e.nativeEvent);r=e.topLevelType;var a=e.nativeEvent,i=e.eventSystemFlags;0===n&&(i|=64);for(var l=null,u=0;u<E.length;u++){var c=E[u];c&&(c=c.extractEvents(r,t,a,o,i))&&(l=rt(l,c))}lt(l)}}function ht(e,t,n){if(!n.has(e)){switch(e){case"scroll":qt(t,"scroll",!0);break;case"focus":case"blur":qt(t,"focus",!0),qt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ct(e)&&qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ge.indexOf(e)&&Qt(e,t)}n.set(e,null)}}var mt,vt,yt,gt=!1,bt=[],wt=null,xt=null,Et=null,kt=new Map,Tt=new Map,St=[],Ct="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Pt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function _t(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function Nt(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":xt=null;break;case"mouseover":case"mouseout":Et=null;break;case"pointerover":case"pointerout":kt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Tt.delete(t.pointerId)}}function Ot(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=_t(t,n,r,o,a),null!==t&&(null!==(t=_n(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function Rt(e){var t=Pn(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Lt(e){if(null!==e.blockedOn)return!1;var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=_n(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function At(e,t,n){Lt(e)&&n.delete(t)}function Mt(){for(gt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=_n(e.blockedOn))&&mt(e);break}var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==wt&&Lt(wt)&&(wt=null),null!==xt&&Lt(xt)&&(xt=null),null!==Et&&Lt(Et)&&(Et=null),kt.forEach(At),Tt.forEach(At)}function zt(e,t){e.blockedOn===t&&(e.blockedOn=null,gt||(gt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Mt)))}function Ft(e){function t(t){return zt(t,e)}if(0<bt.length){zt(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&zt(wt,e),null!==xt&&zt(xt,e),null!==Et&&zt(Et,e),kt.forEach(t),Tt.forEach(t),n=0;n<St.length;n++)(r=St[n]).blockedOn===e&&(r.blockedOn=null);for(;0<St.length&&null===(n=St[0]).blockedOn;)Rt(n),null===n.blockedOn&&St.shift()}var It={},jt=new Map,Dt=new Map,Ut=["abort","abort",Ke,"animationEnd",Qe,"animationIteration",qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ye,"transitionEnd","waiting","waiting"];function $t(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],a="on"+(o[0].toUpperCase()+o.slice(1));a={phasedRegistrationNames:{bubbled:a,captured:a+"Capture"},dependencies:[r],eventPriority:t},Dt.set(r,t),jt.set(r,a),It[o]=a}}$t("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),$t("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),$t(Ut,2);for(var Bt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Vt=0;Vt<Bt.length;Vt++)Dt.set(Bt[Vt],0);var Ht=a.unstable_UserBlockingPriority,Wt=a.unstable_runWithPriority,Kt=!0;function Qt(e,t){qt(t,e,!1)}function qt(e,t,n){var r=Dt.get(t);switch(void 0===r?2:r){case 0:r=Yt.bind(null,t,1,e);break;case 1:r=Gt.bind(null,t,1,e);break;default:r=Xt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Yt(e,t,n,r){j||F();var o=Xt,a=j;j=!0;try{z(o,e,t,n,r)}finally{(j=a)||U()}}function Gt(e,t,n,r){Wt(Ht,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){if(Kt)if(0<bt.length&&-1<Ct.indexOf(e))e=_t(null,e,t,n,r),bt.push(e);else{var o=Jt(e,t,n,r);if(null===o)Nt(e,r);else if(-1<Ct.indexOf(e))e=_t(o,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return wt=Ot(wt,e,t,n,r,o),!0;case"dragenter":return xt=Ot(xt,e,t,n,r,o),!0;case"mouseover":return Et=Ot(Et,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return kt.set(a,Ot(kt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Tt.set(a,Ot(Tt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){Nt(e,r),e=dt(e,r,null,t);try{$(pt,e)}finally{ft(e)}}}}function Jt(e,t,n,r){if(null!==(n=Pn(n=ut(r)))){var o=Ze(n);if(null===o)n=null;else{var a=o.tag;if(13===a){if(null!==(n=et(o)))return n;n=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=dt(e,r,n,t);try{$(pt,e)}finally{ft(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Me;function un(e,t){var n=Je(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=S[t];for(var r=0;r<t.length;r++)ht(t[r],e,n)}function cn(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn=null,vn=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function xn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function En(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var kn=Math.random().toString(36).slice(2),Tn="__reactInternalInstance$"+kn,Sn="__reactEventHandlers$"+kn,Cn="__reactContainere$"+kn;function Pn(e){var t=e[Tn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Cn]||n[Tn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=En(e);null!==e;){if(n=e[Tn])return n;e=En(e)}return t}n=(e=n).parentNode}return null}function _n(e){return!(e=e[Tn]||e[Cn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Nn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function On(e){return e[Sn]||null}function Rn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Ln(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}function An(e,t,n){(t=Ln(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Mn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Rn(t);for(t=n.length;0<t--;)An(n[t],"captured",e);for(t=0;t<n.length;t++)An(n[t],"bubbled",e)}}function zn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Ln(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Fn(e){e&&e.dispatchConfig.registrationName&&zn(e._targetInst,null,e)}function In(e){ot(e,Mn)}var jn=null,Dn=null,Un=null;function $n(){if(Un)return Un;var e,t,n=Dn,r=n.length,o="value"in jn?jn.value:jn.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Un=o.slice(e,1<t?1-t:void 0)}function Bn(){return!0}function Vn(){return!1}function Hn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Bn:Vn,this.isPropagationStopped=Vn,this}function Wn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Kn(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Qn(e){e.eventPool=[],e.getPooled=Wn,e.release=Kn}o(Hn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Bn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Bn)},persist:function(){this.isPersistent=Bn},isPersistent:Vn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Vn,this._dispatchInstances=this._dispatchListeners=null}}),Hn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Hn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Qn(n),n},Qn(Hn);var qn=Hn.extend({data:null}),Yn=Hn.extend({data:null}),Gn=[9,13,27,32],Xn=P&&"CompositionEvent"in window,Jn=null;P&&"documentMode"in document&&(Jn=document.documentMode);var Zn=P&&"TextEvent"in window&&!Jn,er=P&&(!Xn||Jn&&8<Jn&&11>=Jn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Gn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ar(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ir=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Xn)e:{switch(e){case"compositionstart":var a=nr.compositionStart;break e;case"compositionend":a=nr.compositionEnd;break e;case"compositionupdate":a=nr.compositionUpdate;break e}a=void 0}else ir?or(e,n)&&(a=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=nr.compositionStart);return a?(er&&"ko"!==n.locale&&(ir||a!==nr.compositionStart?a===nr.compositionEnd&&ir&&(o=$n()):(Dn="value"in(jn=r)?jn.value:jn.textContent,ir=!0)),a=qn.getPooled(a,t,n,r),o?a.data=o:null!==(o=ar(n))&&(a.data=o),In(a),o=a):o=null,(e=Zn?function(e,t){switch(e){case"compositionend":return ar(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ir)return"compositionend"===e||!Xn&&or(e,t)?(e=$n(),Un=Dn=jn=null,ir=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Yn.getPooled(nr.beforeInput,t,n,r)).data=e,In(t)):t=null,null===o?t:null===t?o:[o,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function cr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Hn.getPooled(sr.change,e,t,n)).type="change",L(n),In(e),e}var dr=null,pr=null;function hr(e){lt(e)}function mr(e){if(xe(Nn(e)))return e}function vr(e,t){if("change"===e)return t}var yr=!1;function gr(){dr&&(dr.detachEvent("onpropertychange",br),pr=dr=null)}function br(e){if("value"===e.propertyName&&mr(pr))if(e=fr(pr,e,ut(e)),j)lt(e);else{j=!0;try{M(hr,e)}finally{j=!1,U()}}}function wr(e,t,n){"focus"===e?(gr(),pr=n,(dr=t).attachEvent("onpropertychange",br)):"blur"===e&&gr()}function xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return mr(pr)}function Er(e,t){if("click"===e)return mr(t)}function kr(e,t){if("input"===e||"change"===e)return mr(t)}P&&(yr=ct("input")&&(!document.documentMode||9<document.documentMode));var Tr={eventTypes:sr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var o=t?Nn(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=vr;else if(cr(o))if(yr)i=kr;else{i=xr;var l=wr}else(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Er);if(i&&(i=i(e,t)))return fr(i,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Pe(o,"number",o.value)}},Sr=Hn.extend({view:null,detail:null}),Cr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cr[e])&&!!t[e]}function _r(){return Pr}var Nr=0,Or=0,Rr=!1,Lr=!1,Ar=Sr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:_r,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Nr;return Nr=e.screenX,Rr?"mousemove"===e.type?e.screenX-t:0:(Rr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Or;return Or=e.screenY,Lr?"mousemove"===e.type?e.screenY-t:0:(Lr=!0,0)}}),Mr=Ar.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),zr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Fr={eventTypes:zr,extractEvents:function(e,t,n,r,o){var a="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(a&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!i&&!a)return null;(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,i)?(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?Pn(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):i=null;if(i===t)return null;if("mouseout"===e||"mouseover"===e)var l=Ar,u=zr.mouseLeave,c=zr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Mr,u=zr.pointerLeave,c=zr.pointerEnter,s="pointer");if(e=null==i?a:Nn(i),a=null==t?a:Nn(t),(u=l.getPooled(u,i,n,r)).type=s+"leave",u.target=e,u.relatedTarget=a,(n=l.getPooled(c,t,n,r)).type=s+"enter",n.target=a,n.relatedTarget=e,s=t,(r=i)&&s)e:{for(c=s,i=0,e=l=r;e;e=Rn(e))i++;for(e=0,t=c;t;t=Rn(t))e++;for(;0<i-e;)l=Rn(l),i--;for(;0<e-i;)c=Rn(c),e--;for(;i--;){if(l===c||l===c.alternate)break e;l=Rn(l),c=Rn(c)}l=null}else l=null;for(c=l,l=[];r&&r!==c&&(null===(i=r.alternate)||i!==c);)l.push(r),r=Rn(r);for(r=[];s&&s!==c&&(null===(i=s.alternate)||i!==c);)r.push(s),s=Rn(s);for(s=0;s<l.length;s++)zn(l[s],"bubbled",u);for(s=r.length;0<s--;)zn(r[s],"captured",n);return 0==(64&o)?[u]:[u,n]}};var Ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},jr=Object.prototype.hasOwnProperty;function Dr(e,t){if(Ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!jr.call(t,n[r])||!Ir(e[n[r]],t[n[r]]))return!1;return!0}var Ur=P&&"documentMode"in document&&11>=document.documentMode,$r={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Br=null,Vr=null,Hr=null,Wr=!1;function Kr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Wr||null==Br||Br!==sn(n)?null:("selectionStart"in(n=Br)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Hr&&Dr(Hr,n)?null:(Hr=n,(e=Hn.getPooled($r.select,Vr,e,t)).type="select",e.target=Br,In(e),e))}var Qr={eventTypes:$r,extractEvents:function(e,t,n,r,o,a){if(!(a=!(o=a||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Je(o),a=S.onSelect;for(var i=0;i<a.length;i++)if(!o.has(a[i])){o=!1;break e}o=!0}a=!o}if(a)return null;switch(o=t?Nn(t):window,e){case"focus":(cr(o)||"true"===o.contentEditable)&&(Br=o,Vr=t,Hr=null);break;case"blur":Hr=Vr=Br=null;break;case"mousedown":Wr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Wr=!1,Kr(n,r);case"selectionchange":if(Ur)break;case"keydown":case"keyup":return Kr(n,r)}return null}},qr=Hn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Yr=Hn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Gr=Sr.extend({relatedTarget:null});function Xr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Jr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Sr.extend({key:function(e){if(e.key){var t=Jr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Xr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:_r,charCode:function(e){return"keypress"===e.type?Xr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Xr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=Ar.extend({dataTransfer:null}),no=Sr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:_r}),ro=Hn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=Ar.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ao={eventTypes:It,extractEvents:function(e,t,n,r){var o=jt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Xr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Gr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Ar;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case Ke:case Qe:case qe:e=qr;break;case Ye:e=ro;break;case"scroll":e=Sr;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Yr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Mr;break;default:e=Hn}return In(t=e.getPooled(o,t,n,r)),t}};if(g)throw Error(i(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),h=On,m=_n,v=Nn,C({SimpleEventPlugin:ao,EnterLeaveEventPlugin:Fr,ChangeEventPlugin:Tr,SelectEventPlugin:Qr,BeforeInputEventPlugin:lr});var io=[],lo=-1;function uo(e){0>lo||(e.current=io[lo],io[lo]=null,lo--)}function co(e,t){lo++,io[lo]=e.current,e.current=t}var so={},fo={current:so},po={current:!1},ho=so;function mo(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function vo(e){return null!=(e=e.childContextTypes)}function yo(){uo(po),uo(fo)}function go(e,t,n){if(fo.current!==so)throw Error(i(168));co(fo,t),co(po,n)}function bo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,ve(t)||"Unknown",a));return o({},n,{},r)}function wo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,ho=fo.current,co(fo,e),co(po,po.current),!0}function xo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=bo(e,t,ho),r.__reactInternalMemoizedMergedChildContext=e,uo(po),uo(fo),co(fo,e)):uo(po),co(po,n)}var Eo=a.unstable_runWithPriority,ko=a.unstable_scheduleCallback,To=a.unstable_cancelCallback,So=a.unstable_requestPaint,Co=a.unstable_now,Po=a.unstable_getCurrentPriorityLevel,_o=a.unstable_ImmediatePriority,No=a.unstable_UserBlockingPriority,Oo=a.unstable_NormalPriority,Ro=a.unstable_LowPriority,Lo=a.unstable_IdlePriority,Ao={},Mo=a.unstable_shouldYield,zo=void 0!==So?So:function(){},Fo=null,Io=null,jo=!1,Do=Co(),Uo=1e4>Do?Co:function(){return Co()-Do};function $o(){switch(Po()){case _o:return 99;case No:return 98;case Oo:return 97;case Ro:return 96;case Lo:return 95;default:throw Error(i(332))}}function Bo(e){switch(e){case 99:return _o;case 98:return No;case 97:return Oo;case 96:return Ro;case 95:return Lo;default:throw Error(i(332))}}function Vo(e,t){return e=Bo(e),Eo(e,t)}function Ho(e,t,n){return e=Bo(e),ko(e,t,n)}function Wo(e){return null===Fo?(Fo=[e],Io=ko(_o,Qo)):Fo.push(e),Ao}function Ko(){if(null!==Io){var e=Io;Io=null,To(e)}Qo()}function Qo(){if(!jo&&null!==Fo){jo=!0;var e=0;try{var t=Fo;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Fo=null}catch(t){throw null!==Fo&&(Fo=Fo.slice(e+1)),ko(_o,Ko),t}finally{jo=!1}}}function qo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Yo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Go={current:null},Xo=null,Jo=null,Zo=null;function ea(){Zo=Jo=Xo=null}function ta(e){var t=Go.current;uo(Go),e.type._context._currentValue=t}function na(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ra(e,t){Xo=e,Zo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Oi=!0),e.firstContext=null)}function oa(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Xo)throw Error(i(308));Jo=t,Xo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var aa=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ua(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function ca(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function sa(e,t){var n=e.alternate;null!==n&&la(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function fa(e,t,n,r){var a=e.updateQueue;aa=!1;var i=a.baseQueue,l=a.shared.pending;if(null!==l){if(null!==i){var u=i.next;i.next=l.next,l.next=u}i=l,a.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=l))}if(null!==i){u=i.next;var c=a.baseState,s=0,f=null,d=null,p=null;if(null!==u)for(var h=u;;){if((l=h.expirationTime)<r){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===p?(d=p=m,f=c):p=p.next=m,l>s&&(s=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),au(l,h.suspenseConfig);e:{var v=e,y=h;switch(l=t,m=n,y.tag){case 1:if("function"==typeof(v=y.payload)){c=v.call(m,c,l);break e}c=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null==(l="function"==typeof(v=y.payload)?v.call(m,c,l):v))break e;c=o({},c,l);break e;case 2:aa=!0}}null!==h.callback&&(e.effectTag|=32,null===(l=a.effects)?a.effects=[h]:l.push(h))}if(null===(h=h.next)||h===u){if(null===(l=a.shared.pending))break;h=i.next=l.next,l.next=u,a.baseQueue=i=l,a.shared.pending=null}}null===p?f=c:p.next=d,a.baseState=f,a.baseQueue=p,iu(s),e.expirationTime=s,e.memoizedState=c}}function da(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(i(191,r));r.call(o)}}}var pa=G.ReactCurrentBatchConfig,ha=(new r.Component).refs;function ma(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var va={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Kl(),o=pa.suspense;(o=ua(r=Ql(r,e,o),o)).payload=t,null!=n&&(o.callback=n),ca(e,o),ql(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Kl(),o=pa.suspense;(o=ua(r=Ql(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),ca(e,o),ql(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Kl(),r=pa.suspense;(r=ua(n=Ql(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ca(e,r),ql(e,n)}};function ya(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!Dr(n,r)||!Dr(o,a))}function ga(e,t,n){var r=!1,o=so,a=t.contextType;return"object"==typeof a&&null!==a?a=oa(a):(o=vo(t)?ho:fo.current,a=(r=null!=(r=t.contextTypes))?mo(e,o):so),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=va,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ba(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&va.enqueueReplaceState(t,t.state,null)}function wa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ha,ia(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=oa(a):(a=vo(t)?ho:fo.current,o.context=mo(e,a)),fa(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ma(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&va.enqueueReplaceState(o,o.state,null),fa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var xa=Array.isArray;function Ea(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===ha&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function ka(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ta(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Cu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Nu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Ea(e,t,n),r.return=e,r):((r=Pu(n.type,n.key,n.props,null,e.mode,r)).ref=Ea(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ou(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=_u(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Nu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Pu(t.type,t.key,t.props,null,e.mode,n)).ref=Ea(e,null,t),n.return=e,n;case te:return(t=Ou(t,e.mode,n)).return=e,t}if(xa(t)||me(t))return(t=_u(t,e.mode,n,null)).return=e,t;ka(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case te:return n.key===o?s(e,t,n,r):null}if(xa(n)||me(n))return null!==o?null:f(e,t,n,r,null);ka(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(xa(r)||me(r))return f(t,e=e.get(n)||null,r,o,null);ka(t,r)}return null}function m(o,i,l,u){for(var c=null,s=null,f=i,m=i=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,l[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,m),null===s?c=y:s.sibling=y,s=y,f=v}if(m===l.length)return n(o,f),c;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(i=a(f,i,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),c}function v(o,l,u,c){var s=me(u);if("function"!=typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var f=s=null,m=l,v=l=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,c);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,v),null===f?s=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=d(o,g.value,c))&&(l=a(g,l,v),null===f?s=g:f.sibling=g,f=g);return s}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),l=a(g,l,v),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),s}return function(e,r,a,u){var c="object"==typeof a&&null!==a&&a.type===ne&&null===a.key;c&&(a=a.props.children);var s="object"==typeof a&&null!==a;if(s)switch(a.$$typeof){case ee:e:{for(s=a.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(a.type===ne){n(e,c.sibling),(r=o(c,a.props.children)).return=e,e=r;break e}break;default:if(c.elementType===a.type){n(e,c.sibling),(r=o(c,a.props)).ref=Ea(e,c,a),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}a.type===ne?((r=_u(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Pu(a.type,a.key,a.props,null,e.mode,u)).ref=Ea(e,r,a),u.return=e,e=u)}return l(e);case te:e:{for(c=a.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ou(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Nu(a,e.mode,u)).return=e,e=r),l(e);if(xa(a))return m(e,r,a,u);if(me(a))return v(e,r,a,u);if(s&&ka(e,a),void 0===a&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Sa=Ta(!0),Ca=Ta(!1),Pa={},_a={current:Pa},Na={current:Pa},Oa={current:Pa};function Ra(e){if(e===Pa)throw Error(i(174));return e}function La(e,t){switch(co(Oa,t),co(Na,e),co(_a,Pa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ie(null,"");break;default:t=Ie(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(_a),co(_a,t)}function Aa(){uo(_a),uo(Na),uo(Oa)}function Ma(e){Ra(Oa.current);var t=Ra(_a.current),n=Ie(t,e.type);t!==n&&(co(Na,e),co(_a,n))}function za(e){Na.current===e&&(uo(_a),uo(Na))}var Fa={current:0};function Ia(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function ja(e,t){return{responder:e,props:t}}var Da=G.ReactCurrentDispatcher,Ua=G.ReactCurrentBatchConfig,$a=0,Ba=null,Va=null,Ha=null,Wa=!1;function Ka(){throw Error(i(321))}function Qa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Ir(e[n],t[n]))return!1;return!0}function qa(e,t,n,r,o,a){if($a=a,Ba=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Da.current=null===e||null===e.memoizedState?yi:gi,e=n(r,o),t.expirationTime===$a){a=0;do{if(t.expirationTime=0,!(25>a))throw Error(i(301));a+=1,Ha=Va=null,t.updateQueue=null,Da.current=bi,e=n(r,o)}while(t.expirationTime===$a)}if(Da.current=vi,t=null!==Va&&null!==Va.next,$a=0,Ha=Va=Ba=null,Wa=!1,t)throw Error(i(300));return e}function Ya(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ha?Ba.memoizedState=Ha=e:Ha=Ha.next=e,Ha}function Ga(){if(null===Va){var e=Ba.alternate;e=null!==e?e.memoizedState:null}else e=Va.next;var t=null===Ha?Ba.memoizedState:Ha.next;if(null!==t)Ha=t,Va=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Va=e).memoizedState,baseState:Va.baseState,baseQueue:Va.baseQueue,queue:Va.queue,next:null},null===Ha?Ba.memoizedState=Ha=e:Ha=Ha.next=e}return Ha}function Xa(e,t){return"function"==typeof t?t(e):t}function Ja(e){var t=Ga(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Va,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=a=null,c=o;do{var s=c.expirationTime;if(s<$a){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,a=r):u=u.next=f,s>Ba.expirationTime&&(Ba.expirationTime=s,iu(s))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),au(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==o);null===u?a=r:u.next=l,Ir(r,t.memoizedState)||(Oi=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Za(e){var t=Ga(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);Ir(a,t.memoizedState)||(Oi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function ei(e){var t=Ya();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Xa,lastRenderedState:e}).dispatch=mi.bind(null,Ba,e),[t.memoizedState,e]}function ti(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ba.updateQueue)?(t={lastEffect:null},Ba.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ni(){return Ga().memoizedState}function ri(e,t,n,r){var o=Ya();Ba.effectTag|=e,o.memoizedState=ti(1|t,n,void 0,void 0===r?null:r)}function oi(e,t,n,r){var o=Ga();r=void 0===r?null:r;var a=void 0;if(null!==Va){var i=Va.memoizedState;if(a=i.destroy,null!==r&&Qa(r,i.deps))return void ti(t,n,a,r)}Ba.effectTag|=e,o.memoizedState=ti(1|t,n,a,r)}function ai(e,t){return ri(516,4,e,t)}function ii(e,t){return oi(516,4,e,t)}function li(e,t){return oi(4,2,e,t)}function ui(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ci(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,2,ui.bind(null,t,e),n)}function si(){}function fi(e,t){return Ya().memoizedState=[e,void 0===t?null:t],e}function di(e,t){var n=Ga();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pi(e,t){var n=Ga();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function hi(e,t,n){var r=$o();Vo(98>r?98:r,(function(){e(!0)})),Vo(97<r?97:r,(function(){var r=Ua.suspense;Ua.suspense=void 0===t?null:t;try{e(!1),n()}finally{Ua.suspense=r}}))}function mi(e,t,n){var r=Kl(),o=pa.suspense;o={expirationTime:r=Ql(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===Ba||null!==a&&a===Ba)Wa=!0,o.expirationTime=$a,Ba.expirationTime=$a;else{if(0===e.expirationTime&&(null===a||0===a.expirationTime)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.eagerReducer=a,o.eagerState=l,Ir(l,i))return}catch(e){}ql(e,r)}}var vi={readContext:oa,useCallback:Ka,useContext:Ka,useEffect:Ka,useImperativeHandle:Ka,useLayoutEffect:Ka,useMemo:Ka,useReducer:Ka,useRef:Ka,useState:Ka,useDebugValue:Ka,useResponder:Ka,useDeferredValue:Ka,useTransition:Ka},yi={readContext:oa,useCallback:fi,useContext:oa,useEffect:ai,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ri(4,2,ui.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ri(4,2,e,t)},useMemo:function(e,t){var n=Ya();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ya();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=mi.bind(null,Ba,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ya().memoizedState=e},useState:ei,useDebugValue:si,useResponder:ja,useDeferredValue:function(e,t){var n=ei(e),r=n[0],o=n[1];return ai((function(){var n=Ua.suspense;Ua.suspense=void 0===t?null:t;try{o(e)}finally{Ua.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ei(!1),n=t[0];return t=t[1],[fi(hi.bind(null,t,e),[t,e]),n]}},gi={readContext:oa,useCallback:di,useContext:oa,useEffect:ii,useImperativeHandle:ci,useLayoutEffect:li,useMemo:pi,useReducer:Ja,useRef:ni,useState:function(){return Ja(Xa)},useDebugValue:si,useResponder:ja,useDeferredValue:function(e,t){var n=Ja(Xa),r=n[0],o=n[1];return ii((function(){var n=Ua.suspense;Ua.suspense=void 0===t?null:t;try{o(e)}finally{Ua.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ja(Xa),n=t[0];return t=t[1],[di(hi.bind(null,t,e),[t,e]),n]}},bi={readContext:oa,useCallback:di,useContext:oa,useEffect:ii,useImperativeHandle:ci,useLayoutEffect:li,useMemo:pi,useReducer:Za,useRef:ni,useState:function(){return Za(Xa)},useDebugValue:si,useResponder:ja,useDeferredValue:function(e,t){var n=Za(Xa),r=n[0],o=n[1];return ii((function(){var n=Ua.suspense;Ua.suspense=void 0===t?null:t;try{o(e)}finally{Ua.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Za(Xa),n=t[0];return t=t[1],[di(hi.bind(null,t,e),[t,e]),n]}},wi=null,xi=null,Ei=!1;function ki(e,t){var n=Tu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ti(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Si(e){if(Ei){var t=xi;if(t){var n=t;if(!Ti(e,t)){if(!(t=xn(n.nextSibling))||!Ti(e,t))return e.effectTag=-1025&e.effectTag|2,Ei=!1,void(wi=e);ki(wi,n)}wi=e,xi=xn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ei=!1,wi=e}}function Ci(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wi=e}function Pi(e){if(e!==wi)return!1;if(!Ei)return Ci(e),Ei=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gn(t,e.memoizedProps))for(t=xi;t;)ki(e,t),t=xn(t.nextSibling);if(Ci(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){xi=xn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}xi=null}}else xi=wi?xn(e.stateNode.nextSibling):null;return!0}function _i(){xi=wi=null,Ei=!1}var Ni=G.ReactCurrentOwner,Oi=!1;function Ri(e,t,n,r){t.child=null===e?Ca(t,null,n,r):Sa(t,e.child,n,r)}function Li(e,t,n,r,o){n=n.render;var a=t.ref;return ra(t,o),r=qa(e,t,n,r,a,o),null===e||Oi?(t.effectTag|=1,Ri(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),qi(e,t,o))}function Ai(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Su(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Pu(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Mi(e,t,i,r,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:Dr)(o,r)&&e.ref===t.ref)?qi(e,t,a):(t.effectTag|=1,(e=Cu(i,r)).ref=t.ref,e.return=t,t.child=e)}function Mi(e,t,n,r,o,a){return null!==e&&Dr(e.memoizedProps,r)&&e.ref===t.ref&&(Oi=!1,o<a)?(t.expirationTime=e.expirationTime,qi(e,t,a)):Fi(e,t,n,r,a)}function zi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Fi(e,t,n,r,o){var a=vo(n)?ho:fo.current;return a=mo(t,a),ra(t,o),n=qa(e,t,n,r,a,o),null===e||Oi?(t.effectTag|=1,Ri(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),qi(e,t,o))}function Ii(e,t,n,r,o){if(vo(n)){var a=!0;wo(t)}else a=!1;if(ra(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),ga(t,n,r),wa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=n.contextType;"object"==typeof c&&null!==c?c=oa(c):c=mo(t,c=vo(n)?ho:fo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&ba(t,i,r,c),aa=!1;var d=t.memoizedState;i.state=d,fa(t,r,i,o),u=t.memoizedState,l!==r||d!==u||po.current||aa?("function"==typeof s&&(ma(t,n,s,r),u=t.memoizedState),(l=aa||ya(t,n,l,r,d,u,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=c,r=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,la(e,t),l=t.memoizedProps,i.props=t.type===t.elementType?l:Yo(t.type,l),u=i.context,"object"==typeof(c=n.contextType)&&null!==c?c=oa(c):c=mo(t,c=vo(n)?ho:fo.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&ba(t,i,r,c),aa=!1,u=t.memoizedState,i.state=u,fa(t,r,i,o),d=t.memoizedState,l!==r||u!==d||po.current||aa?("function"==typeof s&&(ma(t,n,s,r),d=t.memoizedState),(s=aa||ya(t,n,l,r,u,d,c))?(f||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,d,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),i.props=r,i.state=d,i.context=c,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return ji(e,t,n,r,a,o)}function ji(e,t,n,r,o,a){zi(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return o&&xo(t,n,!1),qi(e,t,a);r=t.stateNode,Ni.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,l,a)):Ri(e,t,l,a),t.memoizedState=r.state,o&&xo(t,n,!0),t.child}function Di(e){var t=e.stateNode;t.pendingContext?go(0,t.pendingContext,t.pendingContext!==t.context):t.context&&go(0,t.context,!1),La(e,t.containerInfo)}var Ui,$i,Bi,Vi={dehydrated:null,retryTime:0};function Hi(e,t,n){var r,o=t.mode,a=t.pendingProps,i=Fa.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&i)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),co(Fa,1&i),null===e){if(void 0!==a.fallback&&Si(t),l){if(l=a.fallback,(a=_u(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=_u(l,o,n,null)).return=t,a.sibling=n,t.memoizedState=Vi,t.child=a,n}return o=a.children,t.memoizedState=null,t.child=Ca(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(a=a.fallback,(n=Cu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=Cu(o,a)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Vi,t.child=n,o}return n=Sa(t,e.child,a.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=a.fallback,(a=_u(null,o,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=_u(l,o,n,null)).return=t,a.sibling=n,n.effectTag|=2,a.childExpirationTime=0,t.memoizedState=Vi,t.child=a,n}return t.memoizedState=null,t.child=Sa(t,e,a.children,n)}function Wi(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),na(e.return,t)}function Ki(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=o,i.lastEffect=a)}function Qi(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Ri(e,t,r.children,n),0!=(2&(r=Fa.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Wi(e,n);else if(19===e.tag)Wi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Fa,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ia(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ki(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ia(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ki(t,!0,n,null,a,t.lastEffect);break;case"together":Ki(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function qi(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&iu(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Cu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Cu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Yi(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Gi(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vo(t.type)&&yo(),null;case 3:return Aa(),uo(po),uo(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Pi(t)||(t.effectTag|=4),null;case 5:za(t),n=Ra(Oa.current);var a=t.type;if(null!==e&&null!=t.stateNode)$i(e,t,a,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ra(_a.current),Pi(t)){r=t.stateNode,a=t.type;var l=t.memoizedProps;switch(r[Tn]=t,r[Sn]=l,a){case"iframe":case"object":case"embed":Qt("load",r);break;case"video":case"audio":for(e=0;e<Ge.length;e++)Qt(Ge[e],r);break;case"source":Qt("error",r);break;case"img":case"image":case"link":Qt("error",r),Qt("load",r);break;case"form":Qt("reset",r),Qt("submit",r);break;case"details":Qt("toggle",r);break;case"input":ke(r,l),Qt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Qt("invalid",r),un(n,"onChange");break;case"textarea":Re(r,l),Qt("invalid",r),un(n,"onChange")}for(var u in on(a,l),e=null,l)if(l.hasOwnProperty(u)){var c=l[u];"children"===u?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):T.hasOwnProperty(u)&&null!=c&&un(n,u)}switch(a){case"input":we(r),Ce(r,l,!0);break;case"textarea":we(r),Ae(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=cn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=Fe(a)),e===ln?"script"===a?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(a,{is:r.is}):(e=u.createElement(a),"select"===a&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,a),e[Tn]=t,e[Sn]=r,Ui(e,t),t.stateNode=e,u=an(a,r),a){case"iframe":case"object":case"embed":Qt("load",e),c=r;break;case"video":case"audio":for(c=0;c<Ge.length;c++)Qt(Ge[c],e);c=r;break;case"source":Qt("error",e),c=r;break;case"img":case"image":case"link":Qt("error",e),Qt("load",e),c=r;break;case"form":Qt("reset",e),Qt("submit",e),c=r;break;case"details":Qt("toggle",e),c=r;break;case"input":ke(e,r),c=Ee(e,r),Qt("invalid",e),un(n,"onChange");break;case"option":c=_e(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=o({},r,{value:void 0}),Qt("invalid",e),un(n,"onChange");break;case"textarea":Re(e,r),c=Oe(e,r),Qt("invalid",e),un(n,"onChange");break;default:c=r}on(a,c);var s=c;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?nn(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&De(e,f):"children"===l?"string"==typeof f?("textarea"!==a||""!==f)&&Ue(e,f):"number"==typeof f&&Ue(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(T.hasOwnProperty(l)?null!=f&&un(n,l):null!=f&&X(e,l,f,u))}switch(a){case"input":we(e),Ce(e,r,!1);break;case"textarea":we(e),Ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Ne(e,!!r.multiple,n,!1):null!=r.defaultValue&&Ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=cn)}yn(a,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Bi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Ra(Oa.current),Ra(_a.current),Pi(t)?(n=t.stateNode,r=t.memoizedProps,n[Tn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Tn]=t,t.stateNode=n)}return null;case 13:return uo(Fa),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Pi(t):(r=null!==(a=e.memoizedState),n||null===a||null!==(a=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=a,a.nextEffect=l):(t.firstEffect=t.lastEffect=a,a.nextEffect=null),a.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Fa.current)?Pl===wl&&(Pl=xl):(Pl!==wl&&Pl!==xl||(Pl=El),0!==Ll&&null!==Tl&&(Au(Tl,Cl),Mu(Tl,Ll)))),(n||r)&&(t.effectTag|=4),null);case 4:return Aa(),null;case 10:return ta(t),null;case 17:return vo(t.type)&&yo(),null;case 19:if(uo(Fa),null===(r=t.memoizedState))return null;if(a=0!=(64&t.effectTag),null===(l=r.rendering)){if(a)Yi(r,!1);else if(Pl!==wl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Ia(l))){for(t.effectTag|=64,Yi(r,!1),null!==(a=e.updateQueue)&&(t.updateQueue=a,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(a=r).effectTag&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(e=a.alternate)?(a.childExpirationTime=0,a.expirationTime=l,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null):(a.childExpirationTime=e.childExpirationTime,a.expirationTime=e.expirationTime,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,l=e.dependencies,a.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return co(Fa,1&Fa.current|2),t.child}l=l.sibling}}else{if(!a)if(null!==(e=Ia(l))){if(t.effectTag|=64,a=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Yi(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Uo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,a=!0,Yi(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Uo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Uo(),n.sibling=null,t=Fa.current,co(Fa,a?1&t|2:1&t),n):null}throw Error(i(156,t.tag))}function Xi(e){switch(e.tag){case 1:vo(e.type)&&yo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Aa(),uo(po),uo(fo),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return za(e),null;case 13:return uo(Fa),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return uo(Fa),null;case 4:return Aa(),null;case 10:return ta(e),null;default:return null}}function Ji(e,t){return{value:e,source:t,stack:ye(t)}}Ui=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},$i=function(e,t,n,r,a){var i=e.memoizedProps;if(i!==r){var l,u,c=t.stateNode;switch(Ra(_a.current),e=null,n){case"input":i=Ee(c,i),r=Ee(c,r),e=[];break;case"option":i=_e(c,i),r=_e(c,r),e=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":i=Oe(c,i),r=Oe(c,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(c.onclick=cn)}for(l in on(n,r),n=null,i)if(!r.hasOwnProperty(l)&&i.hasOwnProperty(l)&&null!=i[l])if("style"===l)for(u in c=i[l])c.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(T.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var s=r[l];if(c=null!=i?i[l]:void 0,r.hasOwnProperty(l)&&s!==c&&(null!=s||null!=c))if("style"===l)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(n||(n={}),n[u]=s[u])}else n||(e||(e=[]),e.push(l,n)),n=s;else"dangerouslySetInnerHTML"===l?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(l,s)):"children"===l?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(l,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(T.hasOwnProperty(l)?(null!=s&&un(a,l),e||c===s||(e=[])):(e=e||[]).push(l,s))}n&&(e=e||[]).push("style",n),a=e,(t.updateQueue=a)&&(t.effectTag|=4)}},Bi=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Zi="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){gu(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(i(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function al(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ol(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Yo(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&da(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}da(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Ft(n)))));case 19:case 17:case 20:case 21:return}throw Error(i(163))}function il(e,t,n){switch("function"==typeof Eu&&Eu(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Vo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){gu(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gu(e,t)}}(t,n);break;case 5:tl(t);break;case 4:sl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function cl(e){e:{for(var t=e.return;null!==t;){if(ul(t)){var n=t;break e}t=t.return}throw Error(i(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.effectTag&&(Ue(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ul(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=cn));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function sl(e,t,n){for(var r,o,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(i(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var u=e,c=a,s=n,f=c;;)if(il(u,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(u=r,c=a.stateNode,8===u.nodeType?u.parentNode.removeChild(c):u.removeChild(c)):r.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,o=!0,a.child.return=a,a=a.child;continue}}else if(il(e,a,n),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function fl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Sn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Te(n,r),an(e,o),t=an(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?nn(n,u):"dangerouslySetInnerHTML"===l?De(n,u):"children"===l?Ue(n,u):X(n,l,u,t)}switch(e){case"input":Se(n,r);break;case"textarea":Le(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Ne(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Ne(n,!!r.multiple,r.defaultValue,!0):Ne(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Ft(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Ml=Uo()),null!==n)e:for(e=n;;){if(5===e.tag)a=e.stateNode,r?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,a.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void dl(t);case 19:return void dl(t);case 17:return}throw Error(i(163))}function dl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zi),t.forEach((function(t){var r=wu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=ua(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Fl||(Fl=!0,Il=r),el(e,t)},n}function ml(e,t,n){(n=ua(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return el(e,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===jl?jl=new Set([this]):jl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vl,yl=Math.ceil,gl=G.ReactCurrentDispatcher,bl=G.ReactCurrentOwner,wl=0,xl=3,El=4,kl=0,Tl=null,Sl=null,Cl=0,Pl=wl,_l=null,Nl=1073741823,Ol=1073741823,Rl=null,Ll=0,Al=!1,Ml=0,zl=null,Fl=!1,Il=null,jl=null,Dl=!1,Ul=null,$l=90,Bl=null,Vl=0,Hl=null,Wl=0;function Kl(){return 0!=(48&kl)?1073741821-(Uo()/10|0):0!==Wl?Wl:Wl=1073741821-(Uo()/10|0)}function Ql(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=$o();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&kl))return Cl;if(null!==n)e=qo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=qo(e,150,100);break;case 97:case 96:e=qo(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==Tl&&e===Cl&&--e,e}function ql(e,t){if(50<Vl)throw Vl=0,Hl=null,Error(i(185));if(null!==(e=Yl(e,t))){var n=$o();1073741823===t?0!=(8&kl)&&0==(48&kl)?Zl(e):(Xl(e),0===kl&&Ko()):Xl(e),0==(4&kl)||98!==n&&99!==n||(null===Bl?Bl=new Map([[e,t]]):(void 0===(n=Bl.get(e))||n>t)&&Bl.set(e,t))}}function Yl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Tl===o&&(iu(t),Pl===El&&Au(o,Cl)),Mu(o,t)),o}function Gl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Lu(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Xl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Wo(Zl.bind(null,e));else{var t=Gl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Kl();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Ao&&To(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Wo(Zl.bind(null,e)):Ho(r,Jl.bind(null,e),{timeout:10*(1073741821-t)-Uo()}),e.callbackNode=t}}}function Jl(e,t){if(Wl=0,t)return zu(e,t=Kl()),Xl(e),null;var n=Gl(e);if(0!==n){if(t=e.callbackNode,0!=(48&kl))throw Error(i(327));if(mu(),e===Tl&&n===Cl||nu(e,n),null!==Sl){var r=kl;kl|=16;for(var o=ou();;)try{uu();break}catch(t){ru(e,t)}if(ea(),kl=r,gl.current=o,1===Pl)throw t=_l,nu(e,n),Au(e,n),Xl(e),t;if(null===Sl)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Pl,Tl=null,r){case wl:case 1:throw Error(i(345));case 2:zu(e,2<n?2:n);break;case xl:if(Au(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),1073741823===Nl&&10<(o=Ml+500-Uo())){if(Al){var a=e.lastPingedTime;if(0===a||a>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(a=Gl(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(du.bind(null,e),o);break}du(e);break;case El:if(Au(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),Al&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(o=Gl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Ol?r=10*(1073741821-Ol)-Uo():1073741823===Nl?r=0:(r=10*(1073741821-Nl)-5e3,0>(r=(o=Uo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*yl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(du.bind(null,e),r);break}du(e);break;case 5:if(1073741823!==Nl&&null!==Rl){a=Nl;var l=Rl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(a=Uo()-(10*(1073741821-a)-(0|l.timeoutMs||5e3)))<=o?0:o+r-a),10<r){Au(e,n),e.timeoutHandle=bn(du.bind(null,e),r);break}}du(e);break;default:throw Error(i(329))}if(Xl(e),e.callbackNode===t)return Jl.bind(null,e)}}return null}function Zl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&kl))throw Error(i(327));if(mu(),e===Tl&&t===Cl||nu(e,t),null!==Sl){var n=kl;kl|=16;for(var r=ou();;)try{lu();break}catch(t){ru(e,t)}if(ea(),kl=n,gl.current=r,1===Pl)throw n=_l,nu(e,t),Au(e,t),Xl(e),n;if(null!==Sl)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Tl=null,du(e),Xl(e)}return null}function eu(e,t){var n=kl;kl|=1;try{return e(t)}finally{0===(kl=n)&&Ko()}}function tu(e,t){var n=kl;kl&=-2,kl|=8;try{return e(t)}finally{0===(kl=n)&&Ko()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==Sl)for(n=Sl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&yo();break;case 3:Aa(),uo(po),uo(fo);break;case 5:za(r);break;case 4:Aa();break;case 13:case 19:uo(Fa);break;case 10:ta(r)}n=n.return}Tl=e,Sl=Cu(e.current,null),Cl=t,Pl=wl,_l=null,Ol=Nl=1073741823,Rl=null,Ll=0,Al=!1}function ru(e,t){for(;;){try{if(ea(),Da.current=vi,Wa)for(var n=Ba.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if($a=0,Ha=Va=Ba=null,Wa=!1,null===Sl||null===Sl.return)return Pl=1,_l=t,Sl=null;e:{var o=e,a=Sl.return,i=Sl,l=t;if(t=Cl,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&i.mode)){var c=i.alternate;c?(i.updateQueue=c.updateQueue,i.memoizedState=c.memoizedState,i.expirationTime=c.expirationTime):(i.updateQueue=null,i.memoizedState=null)}var s=0!=(1&Fa.current),f=a;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var h=f.memoizedProps;d=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!s)}}if(d){var m=f.updateQueue;if(null===m){var v=new Set;v.add(u),f.updateQueue=v}else m.add(u);if(0==(2&f.mode)){if(f.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var y=ua(1073741823,null);y.tag=2,ca(i,y)}i.expirationTime=1073741823;break e}l=void 0,i=t;var g=o.pingCache;if(null===g?(g=o.pingCache=new pl,l=new Set,g.set(u,l)):void 0===(l=g.get(u))&&(l=new Set,g.set(u,l)),!l.has(i)){l.add(i);var b=bu.bind(null,o,u,i);u.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((ve(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(i))}5!==Pl&&(Pl=2),l=Ji(l,i),f=a;do{switch(f.tag){case 3:u=l,f.effectTag|=4096,f.expirationTime=t,sa(f,hl(f,u,t));break e;case 1:u=l;var w=f.type,x=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===jl||!jl.has(x)))){f.effectTag|=4096,f.expirationTime=t,sa(f,ml(f,u,t));break e}}f=f.return}while(null!==f)}Sl=su(Sl)}catch(e){t=e;continue}break}}function ou(){var e=gl.current;return gl.current=vi,null===e?vi:e}function au(e,t){e<Nl&&2<e&&(Nl=e),null!==t&&e<Ol&&2<e&&(Ol=e,Rl=t)}function iu(e){e>Ll&&(Ll=e)}function lu(){for(;null!==Sl;)Sl=cu(Sl)}function uu(){for(;null!==Sl&&!Mo();)Sl=cu(Sl)}function cu(e){var t=vl(e.alternate,e,Cl);return e.memoizedProps=e.pendingProps,null===t&&(t=su(e)),bl.current=null,t}function su(e){Sl=e;do{var t=Sl.alternate;if(e=Sl.return,0==(2048&Sl.effectTag)){if(t=Gi(t,Sl,Cl),1===Cl||1!==Sl.childExpirationTime){for(var n=0,r=Sl.child;null!==r;){var o=r.expirationTime,a=r.childExpirationTime;o>n&&(n=o),a>n&&(n=a),r=r.sibling}Sl.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Sl.firstEffect),null!==Sl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Sl.firstEffect),e.lastEffect=Sl.lastEffect),1<Sl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Sl:e.firstEffect=Sl,e.lastEffect=Sl))}else{if(null!==(t=Xi(Sl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Sl.sibling))return t;Sl=e}while(null!==Sl);return Pl===wl&&(Pl=5),null}function fu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function du(e){var t=$o();return Vo(99,pu.bind(null,e,t)),null}function pu(e,t){do{mu()}while(null!==Ul);if(0!=(48&kl))throw Error(i(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=fu(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Tl&&(Sl=Tl=null,Cl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var a=kl;kl|=32,bl.current=null,mn=Kt;var l=pn();if(hn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var c=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(c&&0!==c.rangeCount){u=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var d=0,p=-1,h=-1,m=0,v=0,y=l,g=null;t:for(;;){for(var b;y!==u||0!==s&&3!==y.nodeType||(p=d+s),y!==f||0!==c&&3!==y.nodeType||(h=d+c),3===y.nodeType&&(d+=y.nodeValue.length),null!==(b=y.firstChild);)g=y,y=b;for(;;){if(y===l)break t;if(g===u&&++m===s&&(p=d),g===f&&++v===c&&(h=d),null!==(b=y.nextSibling))break;g=(y=g).parentNode}y=b}u=-1===p||-1===h?null:{start:p,end:h}}else u=null}u=u||{start:0,end:0}}else u=null;vn={activeElementDetached:null,focusedElem:l,selectionRange:u},Kt=!1,zl=o;do{try{hu()}catch(e){if(null===zl)throw Error(i(330));gu(zl,e),zl=zl.nextEffect}}while(null!==zl);zl=o;do{try{for(l=e,u=t;null!==zl;){var w=zl.effectTag;if(16&w&&Ue(zl.stateNode,""),128&w){var x=zl.alternate;if(null!==x){var E=x.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&w){case 2:cl(zl),zl.effectTag&=-3;break;case 6:cl(zl),zl.effectTag&=-3,fl(zl.alternate,zl);break;case 1024:zl.effectTag&=-1025;break;case 1028:zl.effectTag&=-1025,fl(zl.alternate,zl);break;case 4:fl(zl.alternate,zl);break;case 8:sl(l,s=zl,u),ll(s)}zl=zl.nextEffect}}catch(e){if(null===zl)throw Error(i(330));gu(zl,e),zl=zl.nextEffect}}while(null!==zl);if(E=vn,x=pn(),w=E.focusedElem,u=E.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==u&&hn(w)&&(x=u.start,void 0===(E=u.end)&&(E=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(E,w.value.length)):(E=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(E=E.getSelection(),s=w.textContent.length,l=Math.min(u.start,s),u=void 0===u.end?l:Math.min(u.end,s),!E.extend&&l>u&&(s=u,u=l,l=s),s=dn(w,l),f=dn(w,u),s&&f&&(1!==E.rangeCount||E.anchorNode!==s.node||E.anchorOffset!==s.offset||E.focusNode!==f.node||E.focusOffset!==f.offset)&&((x=x.createRange()).setStart(s.node,s.offset),E.removeAllRanges(),l>u?(E.addRange(x),E.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),E.addRange(x))))),x=[];for(E=w;E=E.parentNode;)1===E.nodeType&&x.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(E=x[w]).element.scrollLeft=E.left,E.element.scrollTop=E.top}Kt=!!mn,vn=mn=null,e.current=n,zl=o;do{try{for(w=e;null!==zl;){var k=zl.effectTag;if(36&k&&al(w,zl.alternate,zl),128&k){x=void 0;var T=zl.ref;if(null!==T){var S=zl.stateNode;switch(zl.tag){case 5:x=S;break;default:x=S}"function"==typeof T?T(x):T.current=x}}zl=zl.nextEffect}}catch(e){if(null===zl)throw Error(i(330));gu(zl,e),zl=zl.nextEffect}}while(null!==zl);zl=null,zo(),kl=a}else e.current=n;if(Dl)Dl=!1,Ul=e,$l=t;else for(zl=o;null!==zl;)t=zl.nextEffect,zl.nextEffect=null,zl=t;if(0===(t=e.firstPendingTime)&&(jl=null),1073741823===t?e===Hl?Vl++:(Vl=0,Hl=e):Vl=0,"function"==typeof xu&&xu(n.stateNode,r),Xl(e),Fl)throw Fl=!1,e=Il,Il=null,e;return 0!=(8&kl)||Ko(),null}function hu(){for(;null!==zl;){var e=zl.effectTag;0!=(256&e)&&nl(zl.alternate,zl),0==(512&e)||Dl||(Dl=!0,Ho(97,(function(){return mu(),null}))),zl=zl.nextEffect}}function mu(){if(90!==$l){var e=97<$l?97:$l;return $l=90,Vo(e,vu)}}function vu(){if(null===Ul)return!1;var e=Ul;if(Ul=null,0!=(48&kl))throw Error(i(331));var t=kl;for(kl|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),ol(5,n)}}catch(t){if(null===e)throw Error(i(330));gu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return kl=t,Ko(),!0}function yu(e,t,n){ca(e,t=hl(e,t=Ji(n,t),1073741823)),null!==(e=Yl(e,1073741823))&&Xl(e)}function gu(e,t){if(3===e.tag)yu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===jl||!jl.has(r))){ca(n,e=ml(n,e=Ji(t,e),1073741823)),null!==(n=Yl(n,1073741823))&&Xl(n);break}}n=n.return}}function bu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Tl===e&&Cl===n?Pl===El||Pl===xl&&1073741823===Nl&&Uo()-Ml<500?nu(e,Cl):Al=!0:Lu(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Xl(e)))}function wu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Ql(t=Kl(),e,null)),null!==(e=Yl(e,t))&&Xl(e)}vl=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)Oi=!0;else{if(r<n){switch(Oi=!1,t.tag){case 3:Di(t),_i();break;case 5:if(Ma(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vo(t.type)&&wo(t);break;case 4:La(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,co(Go,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Hi(e,t,n):(co(Fa,1&Fa.current),null!==(t=qi(e,t,n))?t.sibling:null);co(Fa,1&Fa.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Qi(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),co(Fa,Fa.current),!r)return null}return qi(e,t,n)}Oi=!1}}else Oi=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=mo(t,fo.current),ra(t,n),o=qa(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var a=!0;wo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ia(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&ma(t,r,l,e),o.updater=va,t.stateNode=o,o._reactInternalFiber=t,wa(t,r,e,n),t=ji(null,t,r,!0,a,n)}else t.tag=0,Ri(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,a=t.tag=function(e){if("function"==typeof e)return Su(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===fe)return 14}return 2}(o),e=Yo(o,e),a){case 0:t=Fi(null,t,o,e,n);break e;case 1:t=Ii(null,t,o,e,n);break e;case 11:t=Li(null,t,o,e,n);break e;case 14:t=Ai(null,t,o,Yo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Fi(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ii(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 3:if(Di(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),fa(t,r,null,n),(r=t.memoizedState.element)===o)_i(),t=qi(e,t,n);else{if((o=t.stateNode.hydrate)&&(xi=xn(t.stateNode.containerInfo.firstChild),wi=t,o=Ei=!0),o)for(n=Ca(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ri(e,t,r,n),_i();t=t.child}return t;case 5:return Ma(t),null===e&&Si(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,gn(r,o)?l=null:null!==a&&gn(r,a)&&(t.effectTag|=16),zi(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ri(e,t,l,n),t=t.child),t;case 6:return null===e&&Si(t),null;case 13:return Hi(e,t,n);case 4:return La(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Sa(t,null,r,n):Ri(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Li(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 7:return Ri(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ri(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(co(Go,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0===(a=Ir(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!po.current){t=qi(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&a)){1===u.tag&&((s=ua(n,null)).tag=2,ca(u,s)),u.expirationTime<n&&(u.expirationTime=n),null!==(s=u.alternate)&&s.expirationTime<n&&(s.expirationTime=n),na(u.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Ri(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,ra(t,n),r=r(o=oa(o,a.unstable_observedBits)),t.effectTag|=1,Ri(e,t,r,n),t.child;case 14:return a=Yo(o=t.type,t.pendingProps),Ai(e,t,o,a=Yo(o.type,a),r,n);case 15:return Mi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Yo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vo(r)?(e=!0,wo(t)):e=!1,ra(t,n),ga(t,r,o),wa(t,r,o,n),ji(null,t,r,!0,e,n);case 19:return Qi(e,t,n)}throw Error(i(156,t.tag))};var xu=null,Eu=null;function ku(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Tu(e,t,n,r){return new ku(e,t,n,r)}function Su(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Cu(e,t){var n=e.alternate;return null===n?((n=Tu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Pu(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Su(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return _u(n.children,o,a,t);case le:l=8,o|=7;break;case re:l=8,o|=1;break;case oe:return(e=Tu(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=a,e;case ce:return(e=Tu(13,n,t,o)).type=ce,e.elementType=ce,e.expirationTime=a,e;case se:return(e=Tu(19,n,t,o)).elementType=se,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ae:l=10;break e;case ie:l=9;break e;case ue:l=11;break e;case fe:l=14;break e;case de:l=16,r=null;break e;case pe:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Tu(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=a,t}function _u(e,t,n,r){return(e=Tu(7,e,r,t)).expirationTime=n,e}function Nu(e,t,n){return(e=Tu(6,e,null,t)).expirationTime=n,e}function Ou(e,t,n){return(t=Tu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ru(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Lu(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Au(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Mu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function zu(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Fu(e,t,n,r){var o=t.current,a=Kl(),l=pa.suspense;a=Ql(a,o,l);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(vo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var c=n.type;if(vo(c)){n=bo(n,c,u);break e}}n=u}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=ua(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ca(o,t),ql(o,a),a}function Iu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ju(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Du(e,t){ju(e,t),(e=e.alternate)&&ju(e,t)}function Uu(e,t,n){var r=new Ru(e,t,n=null!=n&&!0===n.hydrate),o=Tu(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ia(o),e[Cn]=r.current,n&&0!==t&&function(e,t){var n=Je(t);Ct.forEach((function(e){ht(e,t,n)})),Pt.forEach((function(e){ht(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function $u(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Bu(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Iu(i);l.call(e)}}Fu(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Uu(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Iu(i);u.call(e)}}tu((function(){Fu(t,i,e,o)}))}return Iu(i)}function Vu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Hu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!$u(t))throw Error(i(200));return Vu(e,t,null,n)}Uu.prototype.render=function(e){Fu(e,this._internalRoot,null,null)},Uu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Fu(null,e,null,(function(){t[Cn]=null}))},mt=function(e){if(13===e.tag){var t=qo(Kl(),150,100);ql(e,t),Du(e,t)}},vt=function(e){13===e.tag&&(ql(e,3),Du(e,3))},yt=function(e){if(13===e.tag){var t=Kl();ql(e,t=Ql(t,e,null)),Du(e,t)}},_=function(e,t,n){switch(t){case"input":if(Se(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=On(r);if(!o)throw Error(i(90));xe(r),Se(r,o)}}}break;case"textarea":Le(e,n);break;case"select":null!=(t=n.value)&&Ne(e,!!n.multiple,t,!1)}},M=eu,z=function(e,t,n,r,o){var a=kl;kl|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(kl=a)&&Ko()}},F=function(){0==(49&kl)&&(function(){if(null!==Bl){var e=Bl;Bl=null,e.forEach((function(e,t){zu(t,e),Xl(t)})),Ko()}}(),mu())},I=function(e,t){var n=kl;kl|=2;try{return e(t)}finally{0===(kl=n)&&Ko()}};var Wu,Ku,Qu={Events:[_n,Nn,On,C,k,In,function(e){ot(e,Fn)},L,A,Xt,lt,mu,{current:!1}]};Ku=(Wu={findFiberByHostInstance:Pn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);xu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Eu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Wu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:G.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Ku?Ku(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Qu,t.createPortal=Hu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&kl))throw Error(i(187));var n=kl;kl|=1;try{return Vo(99,e.bind(null,t))}finally{kl=n,Ko()}},t.hydrate=function(e,t,n){if(!$u(t))throw Error(i(200));return Bu(null,e,t,!0,n)},t.render=function(e,t,n){if(!$u(t))throw Error(i(200));return Bu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!$u(e))throw Error(i(40));return!!e._reactRootContainer&&(tu((function(){Bu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Cn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Hu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!$u(n))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return Bu(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(36)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,a,i,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,s=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(s,0))},o=function(e,t){c=setTimeout(e,t)},a=function(){clearTimeout(c)},i=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var g=!1,b=null,w=-1,x=5,E=0;i=function(){return t.unstable_now()>=E},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,T=k.port2;k.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();E=e+x;try{b(!0,e)?T.postMessage(null):(g=!1,b=null)}catch(e){throw T.postMessage(null),e}}else g=!1},r=function(e){b=e,g||(g=!0,T.postMessage(null))},o=function(e,n){w=h((function(){e(t.unstable_now())}),n)},a=function(){m(w),w=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<_(o,t)))break e;e[r]=t,e[n]=o,n=r}}function C(e){return void 0===(e=e[0])?null:e}function P(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>_(i,n))void 0!==u&&0>_(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>_(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function _(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var N=[],O=[],R=1,L=null,A=3,M=!1,z=!1,F=!1;function I(e){for(var t=C(O);null!==t;){if(null===t.callback)P(O);else{if(!(t.startTime<=e))break;P(O),t.sortIndex=t.expirationTime,S(N,t)}t=C(O)}}function j(e){if(F=!1,I(e),!z)if(null!==C(N))z=!0,r(D);else{var t=C(O);null!==t&&o(j,t.startTime-e)}}function D(e,n){z=!1,F&&(F=!1,a()),M=!0;var r=A;try{for(I(n),L=C(N);null!==L&&(!(L.expirationTime>n)||e&&!i());){var l=L.callback;if(null!==l){L.callback=null,A=L.priorityLevel;var u=l(L.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?L.callback=u:L===C(N)&&P(N),I(n)}else P(N);L=C(N)}if(null!==L)var c=!0;else{var s=C(O);null!==s&&o(j,s.startTime-n),c=!1}return c}finally{L=null,A=r,M=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var $=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){z||M||(z=!0,r(D))},t.unstable_getCurrentPriorityLevel=function(){return A},t.unstable_getFirstCallbackNode=function(){return C(N)},t.unstable_next=function(e){switch(A){case 1:case 2:case 3:var t=3;break;default:t=A}var n=A;A=t;try{return e()}finally{A=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=$,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=A;A=e;try{return t()}finally{A=n}},t.unstable_scheduleCallback=function(e,n,i){var l=t.unstable_now();if("object"==typeof i&&null!==i){var u=i.delay;u="number"==typeof u&&0<u?l+u:l,i="number"==typeof i.timeout?i.timeout:U(e)}else i=U(e),u=l;return e={id:R++,callback:n,priorityLevel:e,startTime:u,expirationTime:i=u+i,sortIndex:-1},u>l?(e.sortIndex=u,S(O,e),null===C(N)&&e===C(O)&&(F?a():F=!0,o(j,u-l))):(e.sortIndex=i,S(N,e),z||M||(z=!0,r(D))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();I(e);var n=C(N);return n!==L&&null!==L&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<L.expirationTime||i()},t.unstable_wrapCallback=function(e){var t=A;return function(){var n=A;A=t;try{return e.apply(this,arguments)}finally{A=n}}}},function(e,t,n){"use strict";var r=n(38);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=function(e){"use strict";var t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",a=r.asyncIterator||"@@asyncIterator",i=r.toStringTag||"@@toStringTag";function l(e,t,n,r){var o=t&&t.prototype instanceof s?t:s,a=Object.create(o.prototype),i=new E(r||[]);return a._invoke=function(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return T()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=b(i,n);if(l){if(l===c)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var s=u(e,t,n);if("normal"===s.type){if(r=n.done?"completed":"suspendedYield",s.arg===c)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r="completed",n.method="throw",n.arg=s.arg)}}}(e,n,i),a}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var c={};function s(){}function f(){}function d(){}var p={};p[o]=function(){return this};var h=Object.getPrototypeOf,m=h&&h(h(k([])));m&&m!==t&&n.call(m,o)&&(p=m);var v=d.prototype=s.prototype=Object.create(p);function y(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function g(e,t){var r;this._invoke=function(o,a){function i(){return new t((function(r,i){!function r(o,a,i,l){var c=u(e[o],e,a);if("throw"!==c.type){var s=c.arg,f=s.value;return f&&"object"==typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(f).then((function(e){s.value=e,i(s)}),(function(e){return r("throw",e,i,l)}))}l(c.arg)}(o,a,r,i)}))}return r=r?r.then(i,i):i()}}function b(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,b(e,t),"throw"===t.method))return c;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var r=u(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,c;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,c):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,c)}function w(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(w,this),this.reset(!0)}function k(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:T}}function T(){return{value:void 0,done:!0}}return f.prototype=v.constructor=d,d.constructor=f,d[i]=f.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,d):(e.__proto__=d,i in e||(e[i]="GeneratorFunction")),e.prototype=Object.create(v),e},e.awrap=function(e){return{__await:e}},y(g.prototype),g.prototype[a]=function(){return this},e.AsyncIterator=g,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new g(l(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},y(v),v[i]="Generator",v[o]=function(){return this},v.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=k,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,c):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),c},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),c}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;x(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:k(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),c}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t,n){var r=n(17);e.exports=function(e){if(Array.isArray(e))return r(e)}},function(e,t){e.exports=function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}},function(e,t,n){var r=n(17);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},function(e,t,n){"use strict";var r=n(2),o=n(18),a=n(45),i=n(24);function l(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var u=l(n(21));u.Axios=a,u.create=function(e){return l(i(u.defaults,e))},u.Cancel=n(25),u.CancelToken=n(59),u.isCancel=n(20),u.all=function(e){return Promise.all(e)},u.spread=n(60),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(2),o=n(19),a=n(46),i=n(47),l=n(24);function u(e){this.defaults=e,this.interceptors={request:new a,response:new a}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=l(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t,n){"use strict";var r=n(2);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(2),o=n(48),a=n(20),i=n(21);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return l(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(l(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(2);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,c=[],s=!1,f=-1;function d(){s&&u&&(s=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=l(d);s=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||s||l(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(2);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(23);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(54),o=n(55);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(2),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},function(e,t,n){"use strict";var r=n(2);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(2);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(a)&&l.push("domain="+a),!0===i&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(25);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,x=r?Symbol.for("react.scope"):60119;function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case i:case u:case l:case h:return e;default:switch(e=e&&e.$$typeof){case s:case p:case y:case v:case c:return e;default:return t}}case a:return t}}}function k(e){return E(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=y,t.Memo=v,t.Portal=a,t.Profiler=u,t.StrictMode=l,t.Suspense=h,t.isAsyncMode=function(e){return k(e)||E(e)===f},t.isConcurrentMode=k,t.isContextConsumer=function(e){return E(e)===s},t.isContextProvider=function(e){return E(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return E(e)===p},t.isFragment=function(e){return E(e)===i},t.isLazy=function(e){return E(e)===y},t.isMemo=function(e){return E(e)===v},t.isPortal=function(e){return E(e)===a},t.isProfiler=function(e){return E(e)===u},t.isStrictMode=function(e){return E(e)===l},t.isSuspense=function(e){return E(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===u||e===l||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===x||e.$$typeof===g)},t.typeOf=E},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return Ve}));var r=n(6),o=n.n(r),a=n(7),i=n.n(a),l=n(8),u=n.n(l),c=n(9),s=n.n(c),f=n(5),d=n.n(f),p=n(0),h=n.n(p),m=n(27),v=n.n(m),y=n(3),g=n(1),b=n.n(g);function w(){return(w=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function x(e){return"/"===e.charAt(0)}function E(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var k=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],a=e&&x(e),i=t&&x(t),l=a||i;if(e&&x(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var u=o[o.length-1];n="."===u||".."===u||""===u}else n=!1;for(var c=0,s=o.length;s>=0;s--){var f=o[s];"."===f?E(o,s):".."===f?(E(o,s),c++):c&&(E(o,s),c--)}if(!l)for(;c--;c)o.unshift("..");!l||""===o[0]||o[0]&&x(o[0])||o.unshift("");var d=o.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d};var T=function(e,t){if(!e)throw new Error("Invariant failed")};function S(e){return"/"===e.charAt(0)?e:"/"+e}function C(e){return"/"===e.charAt(0)?e.substr(1):e}function P(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function _(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function N(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function O(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=w({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=k(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function R(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var L=!("undefined"==typeof window||!window.document||!window.document.createElement);function A(e,t){t(window.confirm(e))}function M(){try{return window.history.state||{}}catch(e){return{}}}function z(e){void 0===e&&(e={}),L||T(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,i=a.forceRefresh,l=void 0!==i&&i,u=a.getUserConfirmation,c=void 0===u?A:u,s=a.keyLength,f=void 0===s?6:s,d=e.basename?_(S(e.basename)):"";function p(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return d&&(a=P(a,d)),O(a,r,n)}function h(){return Math.random().toString(36).substr(2,f)}var m=R();function v(e){w(D,e),D.length=n.length,m.notifyListeners(D.location,D.action)}function y(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||x(p(e.state))}function g(){x(p(M()))}var b=!1;function x(e){if(b)b=!1,v();else{m.confirmTransitionTo(e,"POP",c,(function(t){t?v({action:"POP",location:e}):function(e){var t=D.location,n=k.indexOf(t.key);-1===n&&(n=0);var r=k.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(b=!0,z(o))}(e)}))}}var E=p(M()),k=[E.key];function C(e){return d+N(e)}function z(e){n.go(e)}var F=0;function I(e){1===(F+=e)&&1===e?(window.addEventListener("popstate",y),o&&window.addEventListener("hashchange",g)):0===F&&(window.removeEventListener("popstate",y),o&&window.removeEventListener("hashchange",g))}var j=!1;var D={length:n.length,action:"POP",location:E,createHref:C,push:function(e,t){var o=O(e,t,h(),D.location);m.confirmTransitionTo(o,"PUSH",c,(function(e){if(e){var t=C(o),a=o.key,i=o.state;if(r)if(n.pushState({key:a,state:i},null,t),l)window.location.href=t;else{var u=k.indexOf(D.location.key),c=k.slice(0,u+1);c.push(o.key),k=c,v({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=O(e,t,h(),D.location);m.confirmTransitionTo(o,"REPLACE",c,(function(e){if(e){var t=C(o),a=o.key,i=o.state;if(r)if(n.replaceState({key:a,state:i},null,t),l)window.location.replace(t);else{var u=k.indexOf(D.location.key);-1!==u&&(k[u]=o.key),v({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:z,goBack:function(){z(-1)},goForward:function(){z(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return j||(I(1),j=!0),function(){return j&&(j=!1,I(-1)),t()}},listen:function(e){var t=m.appendListener(e);return I(1),function(){I(-1),t()}}};return D}var F={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+C(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:C,decodePath:S},slash:{encodePath:S,decodePath:S}};function I(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function j(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function D(e){window.location.replace(I(window.location.href)+"#"+e)}function U(e){void 0===e&&(e={}),L||T(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?A:r,a=n.hashType,i=void 0===a?"slash":a,l=e.basename?_(S(e.basename)):"",u=F[i],c=u.encodePath,s=u.decodePath;function f(){var e=s(j());return l&&(e=P(e,l)),O(e)}var d=R();function p(e){w(z,e),z.length=t.length,d.notifyListeners(z.location,z.action)}var h=!1,m=null;function v(){var e,t,n=j(),r=c(n);if(n!==r)D(r);else{var a=f(),i=z.location;if(!h&&(t=a,(e=i).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(m===N(a))return;m=null,function(e){if(h)h=!1,p();else{d.confirmTransitionTo(e,"POP",o,(function(t){t?p({action:"POP",location:e}):function(e){var t=z.location,n=x.lastIndexOf(N(t));-1===n&&(n=0);var r=x.lastIndexOf(N(e));-1===r&&(r=0);var o=n-r;o&&(h=!0,E(o))}(e)}))}}(a)}}var y=j(),g=c(y);y!==g&&D(g);var b=f(),x=[N(b)];function E(e){t.go(e)}var k=0;function C(e){1===(k+=e)&&1===e?window.addEventListener("hashchange",v):0===k&&window.removeEventListener("hashchange",v)}var M=!1;var z={length:t.length,action:"POP",location:b,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=I(window.location.href)),n+"#"+c(l+N(e))},push:function(e,t){var n=O(e,void 0,void 0,z.location);d.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=N(n),r=c(l+t);if(j()!==r){m=t,function(e){window.location.hash=e}(r);var o=x.lastIndexOf(N(z.location)),a=x.slice(0,o+1);a.push(t),x=a,p({action:"PUSH",location:n})}else p()}}))},replace:function(e,t){var n=O(e,void 0,void 0,z.location);d.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=N(n),r=c(l+t);j()!==r&&(m=t,D(r));var o=x.indexOf(N(z.location));-1!==o&&(x[o]=t),p({action:"REPLACE",location:n})}}))},go:E,goBack:function(){E(-1)},goForward:function(){E(1)},block:function(e){void 0===e&&(e=!1);var t=d.setPrompt(e);return M||(C(1),M=!0),function(){return M&&(M=!1,C(-1)),t()}},listen:function(e){var t=d.appendListener(e);return C(1),function(){C(-1),t()}}};return z}function $(e,t,n){return Math.min(Math.max(e,t),n)}function B(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,o=void 0===r?["/"]:r,a=t.initialIndex,i=void 0===a?0:a,l=t.keyLength,u=void 0===l?6:l,c=R();function s(e){w(v,e),v.length=v.entries.length,c.notifyListeners(v.location,v.action)}function f(){return Math.random().toString(36).substr(2,u)}var d=$(i,0,o.length-1),p=o.map((function(e){return O(e,void 0,"string"==typeof e?f():e.key||f())})),h=N;function m(e){var t=$(v.index+e,0,v.entries.length-1),r=v.entries[t];c.confirmTransitionTo(r,"POP",n,(function(e){e?s({action:"POP",location:r,index:t}):s()}))}var v={length:p.length,action:"POP",location:p[d],index:d,entries:p,createHref:h,push:function(e,t){var r=O(e,t,f(),v.location);c.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=v.index+1,n=v.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),s({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=O(e,t,f(),v.location);c.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(v.entries[v.index]=r,s({action:"REPLACE",location:r}))}))},go:m,goBack:function(){m(-1)},goForward:function(){m(1)},canGo:function(e){var t=v.index+e;return t>=0&&t<v.entries.length},block:function(e){return void 0===e&&(e=!1),c.setPrompt(e)},listen:function(e){return c.appendListener(e)}};return v}var V=n(14),H=n(15),W=n.n(H);n(26);function K(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n(30);var Q=function(e){var t=Object(V.a)();return t.displayName=e,t}("Router-History"),q=function(e){var t=Object(V.a)();return t.displayName=e,t}("Router"),Y=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(y.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return h.a.createElement(q.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},h.a.createElement(Q.Provider,{children:this.props.children||null,value:this.props.history}))},t}(h.a.Component);h.a.Component;h.a.Component;var G={},X=0;function J(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,a=void 0!==o&&o,i=n.strict,l=void 0!==i&&i,u=n.sensitive,c=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=G[n]||(G[n]={});if(r[e])return r[e];var o=[],a={regexp:W()(e,o,t),keys:o};return X<1e4&&(r[e]=a,X++),a}(n,{end:a,strict:l,sensitive:c}),o=r.regexp,i=r.keys,u=o.exec(e);if(!u)return null;var s=u[0],f=u.slice(1),d=e===s;return a&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:i.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var Z=function(e){function t(){return e.apply(this,arguments)||this}return Object(y.a)(t,e),t.prototype.render=function(){var e=this;return h.a.createElement(q.Consumer,null,(function(t){t||T(!1);var n=e.props.location||t.location,r=w({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?J(n.pathname,e.props):t.match}),o=e.props,a=o.children,i=o.component,l=o.render;return Array.isArray(a)&&0===a.length&&(a=null),h.a.createElement(q.Provider,{value:r},r.match?a?"function"==typeof a?a(r):a:i?h.a.createElement(i,r):l?l(r):null:"function"==typeof a?a(r):null)}))},t}(h.a.Component);function ee(e){return"/"===e.charAt(0)?e:"/"+e}function te(e,t){if(!e)return t;var n=ee(e);return 0!==t.pathname.indexOf(n)?t:w({},t,{pathname:t.pathname.substr(n.length)})}function ne(e){return"string"==typeof e?e:N(e)}function re(e){return function(){T(!1)}}function oe(){}h.a.Component;var ae=function(e){function t(){return e.apply(this,arguments)||this}return Object(y.a)(t,e),t.prototype.render=function(){var e=this;return h.a.createElement(q.Consumer,null,(function(t){t||T(!1);var n,r,o=e.props.location||t.location;return h.a.Children.forEach(e.props.children,(function(e){if(null==r&&h.a.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?J(o.pathname,w({},e.props,{path:a})):t.match}})),r?h.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(h.a.Component);h.a.useContext;var ie=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=z(t.props),t}return Object(y.a)(t,e),t.prototype.render=function(){return h.a.createElement(Y,{history:this.history,children:this.props.children})},t}(h.a.Component);h.a.Component;var le=function(e,t){return"function"==typeof e?e(t):e},ue=function(e,t){return"string"==typeof e?O(e,null,null,t):e},ce=function(e){return e},se=h.a.forwardRef;void 0===se&&(se=ce);var fe=se((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,a=K(e,["innerRef","navigate","onClick"]),i=a.target,l=w({},a,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||i&&"_self"!==i||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return l.ref=ce!==se&&t||n,h.a.createElement("a",l)}));var de=se((function(e,t){var n=e.component,r=void 0===n?fe:n,o=e.replace,a=e.to,i=e.innerRef,l=K(e,["component","replace","to","innerRef"]);return h.a.createElement(q.Consumer,null,(function(e){e||T(!1);var n=e.history,u=ue(le(a,e.location),e.location),c=u?n.createHref(u):"",s=w({},l,{href:c,navigate:function(){var t=le(a,e.location);(o?n.replace:n.push)(t)}});return ce!==se?s.ref=t||i:s.innerRef=i,h.a.createElement(r,s)}))})),pe=function(e){return e},he=h.a.forwardRef;void 0===he&&(he=pe);var me=he((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,a=void 0===o?"active":o,i=e.activeStyle,l=e.className,u=e.exact,c=e.isActive,s=e.location,f=e.sensitive,d=e.strict,p=e.style,m=e.to,v=e.innerRef,y=K(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return h.a.createElement(q.Consumer,null,(function(e){e||T(!1);var n=s||e.location,o=ue(le(m,n),n),g=o.pathname,b=g&&g.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),x=b?J(n.pathname,{path:b,exact:u,sensitive:f,strict:d}):null,E=!!(c?c(x,n):x),k=E?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(l,a):l,S=E?w({},p,{},i):p,C=w({"aria-current":E&&r||null,className:k,style:S,to:o},y);return pe!==he?C.ref=t||v:C.innerRef=v,h.a.createElement(de,C)}))})),ve=n(4),ye=n.n(ve),ge=n(10),be=n.n(ge),we=function(e){e.clickTimes;var t=e.keyPressTimes,n=e.pressedKey,r=e.secretKey,o=e.handleFieldChange;return h.a.createElement("div",{className:"mt-1 mb-5 pt-5 pb-5 pl-4 text-dark"},h.a.createElement("div",{className:"text-primary mb-3"},h.a.createElement("h2",null,"Secret key guess game!"),h.a.createElement("div",{className:"text-secondary"},"Basic ReactJS example: using React state and components only"),h.a.createElement("div",{className:"text-danger m-3"},r?"Secret key pressed, Game start now!":"First person: Press a secret key first!"),h.a.createElement("div",{className:"text-success"},"Second person: Try to guess what is the secret key by press other keys")),r===n&&h.a.createElement(h.a.Fragment,null,h.a.createElement("h3",{className:"text-danger"},"Congratulation, you won!"),h.a.createElement("div",{className:"text-success"},"You've tried ",t," times, your score is"," ",100-2*(t-1),"/100"),"Press Esc key to start the game again! or",h.a.createElement("br",null),h.a.createElement("button",{onClick:o,className:"btn btn-success mt-3  btn-sm"},"Click here to restart")),r&&r!==n&&h.a.createElement("div",null,"Pressed Key: ",h.a.createElement("span",{className:"text-danger mr-3"},n),"Key Press Times: ",h.a.createElement("span",{className:"text-danger"},t),h.a.createElement("button",{onClick:o,className:"btn btn-secondary btn-sm ml-3"},"Click here to restart")))};we.propTypes={clickTimes:b.a.number,keyPressTimes:b.a.number,pressedKey:b.a.string,secretKey:b.a.string,handleFieldChange:b.a.func};var xe=we;function Ee(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=d()(e);if(t){var o=d()(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return s()(this,n)}}var ke=function(e){u()(n,e);var t=Ee(n);function n(e){var r;return o()(this,n),r=t.call(this,e),be()(ye()(r),"handleFieldChange",(function(e){r.setState({clickTimes:r.state.clickTimes+1,keyPressTimes:0,pressedKey:"null",secretKey:null})})),be()(ye()(r),"handleKeyPress",(function(e){null===r.state.secretKey?r.setState({secretKey:e.key}):"Escape"===e.key?r.setState({clickTimes:0,keyPressTimes:0,pressedKey:"null",secretKey:null}):r.state.pressedKey===r.state.secretKey||r.setState({pressedKey:e.key,keyPressTimes:r.state.keyPressTimes+1}),console.log("key pressed event:",e)})),r.state={clickTimes:0,keyPressTimes:0,pressedKey:"null",secretKey:null},r.handleFieldChange=r.handleFieldChange.bind(ye()(r)),r.handleKeyPress=r.handleKeyPress.bind(ye()(r)),r}return i()(n,[{key:"componentDidMount",value:function(){console.log("componentDidMount",this.state),document.addEventListener("keydown",this.handleKeyPress,!1)}},{key:"componentDidUpdate",value:function(){console.log("componentDidUpdate",this.state)}},{key:"render",value:function(){return h.a.createElement("div",{className:"text-center text-danger"},h.a.createElement(xe,{clickTimes:this.state.clickTimes,keyPressTimes:this.state.keyPressTimes,pressedKey:this.state.pressedKey,secretKey:this.state.secretKey,handleFieldChange:this.handleFieldChange}))}}]),n}(p.Component),Te=n(12),Se=n.n(Te),Ce=n(13),Pe=n.n(Ce),_e=n(28),Ne=n.n(_e),Oe=n(29),Re=n.n(Oe).a.create({baseURL:"https://packagist.org",timeout:3e3,responseType:"json",params:{per_page:5},headers:{"Content-Type":"application/json","X-Custom-Header":"AlexStack react starter example",Authorization:"Client Id change-here-if-authorization-needed"}}),Le=function(e){var t=e.total,n=e.searchResults,r=e.handleFieldChange;return h.a.createElement(h.a.Fragment,null,n.length>0&&n.map((function(e,t){return h.a.createElement("div",{className:"row text-left border-bottom p-3",key:t},h.a.createElement("div",{className:"col-md"},h.a.createElement("span",{className:"badge badge-secondary"},t+1)," ",h.a.createElement("a",{href:e.repository,target:"_blank"},e.name),h.a.createElement("div",null,h.a.createElement("i",{className:"fas fa-download  text-success mr-1"}),e.downloads)),h.a.createElement("div",{className:"col-md text-secondary"},e.description))})),t>0&&t>n.length&&h.a.createElement("button",{className:"btn btn-success m-2",name:"loadMore",onClick:r},"Load More Data"),0===t&&h.a.createElement("div",{className:"text-danger"},"No result"),t>0&&h.a.createElement("div",{className:"text-danger m-3"},"Total results: ",t))};Le.propTypes={total:b.a.number,searchResults:b.a.array,handleFieldChange:b.a.func};var Ae=Le,Me=function(e){var t=e.keyword,n=e.total,r=e.searchResults,o=e.handleFieldChange,a=e.handleSearchSubmit;return h.a.createElement("div",{className:"mt-1 mb-5 pt-5 pb-5 pl-4 text-dark"},h.a.createElement("div",{className:"text-primary mb-3"},h.a.createElement("h2",null,"Axios RESTful API search example!"),h.a.createElement("div",{className:"text-secondary"},"Axios RESTful API search example: A form using axios to implement a RESTful API search")),h.a.createElement("form",{onSubmit:a},h.a.createElement("div",{className:"text-success"},h.a.createElement("div",{className:"input-group mb-3"},h.a.createElement("div",{className:"input-group-prepend"},h.a.createElement("span",{className:"input-group-text",id:"inputGroup-sizing-default"},"Keyword")),h.a.createElement("input",{type:"text",name:"keyword",className:"form-control text-success","aria-label":"Default","aria-describedby":"inputGroup-sizing-default",value:t,onChange:o}),h.a.createElement("div",{className:"input-group-append"},h.a.createElement("select",{onChange:o,name:"perPage"},h.a.createElement("option",{value:"5"},"Display Number"),h.a.createElement("option",{value:"5"},"5 results per page"),h.a.createElement("option",{value:"10"},"10 results per page"),h.a.createElement("option",{value:"20"},"20 results per page"),h.a.createElement("option",{value:"50"},"50 results per page"))),h.a.createElement("div",{className:"input-group-append"},h.a.createElement("button",{className:"btn btn-success",type:"submit"},"Search"))))),h.a.createElement(Ae,{total:n,searchResults:r,handleFieldChange:o}))};Me.propTypes={keyword:b.a.string,total:b.a.number,searchResults:b.a.array,handleFieldChange:b.a.func,handleSearchSubmit:b.a.func};var ze=Me,Fe=function(){return h.a.createElement("div",{className:"mt-5 mb-5 pt-5 pb-5 pl-4 bg-dark text-light"},"Time now : ",(new Date).toLocaleDateString()," -",(new Date).toLocaleTimeString())};Fe.propTypes={};var Ie=Fe;function je(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=d()(e);if(t){var o=d()(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return s()(this,n)}}var De=function(e){u()(r,e);var t,n=je(r);function r(e){var t;return o()(this,r),t=n.call(this,e),be()(ye()(t),"handleFieldChange",(function(e){if("keyword"==e.target.name)t.setState({keyword:e.target.value});else if("perPage"==e.target.name)t.setState({perPage:e.target.value});else if("loadMore"==e.target.name){var n=t.state.page+1;t.getApiResult(n)}console.log(t.state)})),be()(ye()(t),"handleSearchSubmit",(function(e){e.preventDefault(),t.getApiResult(1)})),t.state={keyword:"react api",searchResults:[],page:1,perPage:5,total:null},t.handleFieldChange=t.handleFieldChange.bind(ye()(t)),t.handleSearchSubmit=t.handleSearchSubmit.bind(ye()(t)),t}return i()(r,[{key:"componentDidMount",value:function(){}},{key:"componentDidUpdate",value:function(){}},{key:"getApiResult",value:(t=Ne()(Se.a.mark((function e(t){var n;return Se.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Re.get("/search.json",{params:{q:this.state.keyword,per_page:this.state.perPage,page:t}}).catch((function(e){return console.log(e,n),e}));case 2:return(n=e.sent).data&&(console.log(n.data),t>1?this.setState({searchResults:[].concat(Pe()(this.state.searchResults),Pe()(n.data.results)),total:n.data.total,loadMore:!1,page:t}):this.setState({searchResults:n.data.results,total:n.data.total,loadMore:!1,page:1})),e.abrupt("return",n);case 5:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"render",value:function(){return h.a.createElement("div",{className:"text-center text-danger"},h.a.createElement(ze,{keyword:this.state.keyword,total:this.state.total,searchResults:this.state.searchResults,handleFieldChange:this.handleFieldChange,handleSearchSubmit:this.handleSearchSubmit}))}}]),r}(p.Component),Ue=function(e){document.getElementById("collapsibleNavbar").classList.remove("show")},$e=function(){return h.a.createElement("nav",{className:"navbar navbar-expand-md bg-dark navbar-dark"},h.a.createElement(me,{to:"/",className:"navbar-brand"},h.a.createElement("i",{className:"fab fa-react mr-1"}),"React Examples"),h.a.createElement("button",{className:"navbar-toggler",type:"button","data-toggle":"collapse","data-target":"#collapsibleNavbar"},h.a.createElement("span",{className:"navbar-toggler-icon"})),h.a.createElement("div",{className:"collapse navbar-collapse",id:"collapsibleNavbar"},h.a.createElement("ul",{className:"navbar-nav"},h.a.createElement("li",{className:"nav-item"},h.a.createElement(me,{to:"/basic",className:"nav-link",onClick:function(){return Ue()}},"Basic React")),h.a.createElement("li",{className:"nav-item"},h.a.createElement(me,{to:"/",className:"nav-link",onClick:function(){return Ue()}},"Axios API")),h.a.createElement("li",{className:"nav-item"},h.a.createElement(me,{to:"/redux",className:"nav-link",onClick:function(){return Ue()}},"Redux Saga")))))};function Be(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=d()(e);if(t){var o=d()(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return s()(this,n)}}var Ve=function(e){u()(n,e);var t=Be(n);function n(){return o()(this,n),t.apply(this,arguments)}return i()(n,[{key:"render",value:function(){return h.a.createElement(ie,null,h.a.createElement("div",{className:"container-fluid top-container"},h.a.createElement($e,null),h.a.createElement(ae,null,h.a.createElement(Z,{exact:!0,path:"/basic",component:ke}),h.a.createElement(Z,{path:"/axios",component:De}),h.a.createElement(Z,{component:De})),h.a.createElement(Ie,null)))}}]),n}(h.a.Component);document.getElementById("react-js-basic-app")&&v.a.render(h.a.createElement(Ve,null),document.getElementById("react-js-basic-app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXNtL3JlYWN0LXJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9iYXNpY0FwcC9CYXNpY0FwcFByZXNlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmFzaWNBcHAvQmFzaWNBcHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9heGlvc0FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9heGlvc0FwcC9BeGlvc0FwcFJlc3VsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXhpb3NBcHAvQXhpb3NBcHBQcmVzZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Zvb3Rlci9Gb290ZXJQcmVzZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2F4aW9zQXBwL0F4aW9zQXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2hlYWRlci9IZWFkZXJQcmVzZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9yZWFjdEFwcC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInRvU3RyaW5nIiwiaXNBcnJheSIsInZhbCIsImlzVW5kZWZpbmVkIiwiaXNPYmplY3QiLCJpc0Z1bmN0aW9uIiwiZm9yRWFjaCIsIm9iaiIsImZuIiwibGVuZ3RoIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiY29uc3RydWN0b3IiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0Iiwid2luZG93IiwiZG9jdW1lbnQiLCJtZXJnZSIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiYXJndW1lbnRzIiwiZGVlcE1lcmdlIiwiZXh0ZW5kIiwiYSIsImIiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsInJlcGxhY2UiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9nZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl90eXBlb2YiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJhcnJheVdpdGhvdXRIb2xlcyIsIml0ZXJhYmxlVG9BcnJheSIsInVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJhcnIiLCJjb21tb25qc0dsb2JhbCIsImdsb2JhbFRoaXMiLCJnbG9iYWwiLCJjcmVhdGVFdmVudEVtaXR0ZXIiLCJoYW5kbGVycyIsIm9uIiwiaGFuZGxlciIsInB1c2giLCJvZmYiLCJmaWx0ZXIiLCJoIiwic2V0IiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsImluZGV4IiwiY3JlYXRlQ29udGV4dCIsImRlZmF1bHRWYWx1ZSIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJQcm92aWRlciIsIl9Db21wb25lbnQiLCJfdGhpcyIsImFwcGx5IiwidGhpcyIsImVtaXR0ZXIiLCJfcHJvdG8iLCJnZXRDaGlsZENvbnRleHQiLCJfcmVmIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwieCIsInkiLCJyZW5kZXIiLCJjaGlsZHJlbiIsImNoaWxkQ29udGV4dFR5cGVzIiwiaXNSZXF1aXJlZCIsIkNvbnN1bWVyIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJzdGF0ZSIsImdldFZhbHVlIiwib25VcGRhdGUiLCJvYnNlcnZlZEJpdHMiLCJzZXRTdGF0ZSIsIl9wcm90bzIiLCJjb21wb25lbnREaWRNb3VudCIsImNvbnRleHQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIkFycmF5IiwiY29udGV4dFR5cGVzIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwiY29tcGlsZSIsIm9wdGlvbnMiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsIlJlZ0V4cCIsImpvaW4iLCJyZXMiLCJ0b2tlbnMiLCJwYXRoIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImV4ZWMiLCJlc2NhcGVkIiwib2Zmc2V0Iiwic2xpY2UiLCJuZXh0IiwicHJlZml4IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsInBhdHRlcm4iLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsInN1YnN0ciIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImNoYXJDb2RlQXQiLCJ0b1VwcGVyQ2FzZSIsIm1hdGNoZXMiLCJmbGFncyIsIm9wdHMiLCJkYXRhIiwiZW5jb2RlIiwicHJldHR5IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidG9rZW4iLCJzZWdtZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImoiLCJ0ZXN0IiwiYXR0YWNoS2V5cyIsInJlIiwia2V5cyIsInNlbnNpdGl2ZSIsInN0cmljdCIsImVuZCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJzb3VyY2UiLCJtYXRjaCIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsImFzc2lnbiIsInRlc3QxIiwiU3RyaW5nIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwibWFwIiwidGVzdDMiLCJzcGxpdCIsImxldHRlciIsImVyciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJsZW4iLCJhcnIyIiwiYXJncyIsInV0aWxzIiwidXJsIiwicGFyYW1zIiwicGFyYW1zU2VyaWFsaXplciIsInNlcmlhbGl6ZWRQYXJhbXMiLCJ2IiwidG9JU09TdHJpbmciLCJoYXNobWFya0luZGV4IiwiaW5kZXhPZiIsIl9fQ0FOQ0VMX18iLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJwcm9jZXNzIiwidHJhbnNmb3JtUmVxdWVzdCIsInRyYW5zZm9ybVJlc3BvbnNlIiwiZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiY29tbW9uIiwibWV0aG9kIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsImZ1bGxQYXRoIiwiYmFzZVVSTCIsIm9wZW4iLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInVuZGVmaW5lZCIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiZXJyb3IiLCJFcnJvciIsImNvbmZpZzEiLCJjb25maWcyIiwidmFsdWVGcm9tQ29uZmlnMktleXMiLCJtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyIsImRlZmF1bHRUb0NvbmZpZzJLZXlzIiwicHJvcCIsImF4aW9zS2V5cyIsImNvbmNhdCIsIm90aGVyS2V5cyIsIkNhbmNlbCIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiY29uc29sZSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsIl9uZXh0IiwiX3Rocm93IiwiYXJnIiwiaW5mbyIsImRvbmUiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNvbnRleHRUeXBlIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwiTWVtbyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJfc2V0UHJvdG90eXBlT2YiLCJpdGVyYXRvciIsImZvciIsInEiLCJ1IiwidyIsInoiLCJBIiwiQiIsIkMiLCJEIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkUiLCJGIiwicmVmcyIsInVwZGF0ZXIiLCJHIiwiSCIsImlzUmVhY3RDb21wb25lbnQiLCJmb3JjZVVwZGF0ZSIsIkkiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkoiLCJjdXJyZW50IiwiSyIsIkwiLCJyZWYiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJnIiwiayIsImYiLCIkJHR5cGVvZiIsIl9vd25lciIsIk8iLCJQIiwiUSIsIlIiLCJwb3AiLCJrZXlQcmVmaXgiLCJmdW5jIiwiY291bnQiLCJTIiwiViIsIlQiLCJVIiwiZXNjYXBlIiwiVyIsImFhIiwiWCIsIk4iLCJZIiwiWiIsImJhIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJ0b0FycmF5Iiwib25seSIsIkNvbXBvbmVudCIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJQdXJlQ29tcG9uZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjbG9uZUVsZW1lbnQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJfY29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJtZW1vIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidmVyc2lvbiIsIm9uRXJyb3IiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJsYSIsIm1hIiwibmEiLCJvYSIsImN1cnJlbnRUYXJnZXQiLCJrYSIsInBhIiwicWEiLCJyYSIsInNhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJ0YSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidWEiLCJyZWdpc3RyYXRpb25OYW1lIiwidmEiLCJ3YSIsImRlcGVuZGVuY2llcyIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsInN0YXRlTm9kZSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJVYSIsIlZhIiwieGxpbmtIcmVmIiwiV2EiLCJYYSIsIlNhIiwiaXNOYU4iLCJUYSIsIlJhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJZYSIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5iIiwicGIiLCJxYiIsInRhZyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmV0dXJuIiwicmIiLCJzYiIsIm5vZGVOYW1lIiwieGIiLCJfdmFsdWVUcmFja2VyIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ0YiIsInliIiwiY2hlY2tlZCIsInpiIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJBYiIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJCYiIsIkNiIiwiRGIiLCJFYiIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiR2IiLCJGYiIsIkhiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsIkliIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJKYiIsIktiIiwiTGIiLCJ0ZXh0Q29udGVudCIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwidmFsdWVPZiIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiUmIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsIlNiIiwiVGIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJVYiIsIlZiIiwiV2IiLCJzdHlsZSIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJXZWFrTWFwIiwiTWFwIiwiY2MiLCJkYyIsImFsdGVybmF0ZSIsImVmZmVjdFRhZyIsImVjIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJmYyIsImhjIiwiY2hpbGQiLCJzaWJsaW5nIiwiZ2MiLCJpYyIsImpjIiwia2MiLCJsYyIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIm1jIiwibmMiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwib2MiLCJwYyIsInFjIiwidG9wTGV2ZWxUeXBlIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwicmMiLCJldmVudFN5c3RlbUZsYWdzIiwic2MiLCJjb250YWluZXJJbmZvIiwidGMiLCJ1YyIsImhhcyIsInZjIiwid2MiLCJ4YyIsInljIiwiemMiLCJBYyIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJLYyIsImJsb2NrZWRPbiIsImNvbnRhaW5lciIsIkxjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwiTWMiLCJOYyIsIlBjIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJzaGlmdCIsIlVjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiVmMiLCJXYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiYnViYmxlZCIsImNhcHR1cmVkIiwiZXZlbnRQcmlvcml0eSIsImJkIiwiY2QiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJpZCIsIk9jIiwiamQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImtkIiwibGQiLCJtZCIsInNldFByb3BlcnR5IiwiY2hhckF0Iiwic3Vic3RyaW5nIiwibmQiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJvZCIsInBkIiwiaXMiLCJxZCIsInJkIiwic2QiLCJ0ZCIsImJvZHkiLCJ1ZCIsInZkIiwibm9kZSIsIm5leHRTaWJsaW5nIiwieGQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJ5ZCIsImNvbnRlbnRFZGl0YWJsZSIsIkRkIiwiRWQiLCJGZCIsImF1dG9Gb2N1cyIsIkdkIiwiX19odG1sIiwiSGQiLCJzZXRUaW1lb3V0IiwiSWQiLCJjbGVhclRpbWVvdXQiLCJKZCIsIktkIiwicHJldmlvdXNTaWJsaW5nIiwiTGQiLCJNYXRoIiwicmFuZG9tIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsImRpc3BhdGNoQ29uZmlnIiwiVWQiLCJfdGFyZ2V0SW5zdCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImVlIiwiZXZlbnRQb29sIiwiZmUiLCJkZXN0cnVjdG9yIiwiZGUiLCJnZXRQb29sZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwiZ2UiLCJoZSIsImllIiwiamUiLCJrZSIsImRvY3VtZW50TW9kZSIsImxlIiwibWUiLCJuZSIsIm9lIiwiYmVmb3JlSW5wdXQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInBlIiwicWUiLCJrZXlDb2RlIiwiZGV0YWlsIiwic2UiLCJ2ZSIsImxvY2FsZSIsIndoaWNoIiwidGUiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJ1ZSIsIndlIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJ4ZSIsInllIiwiY2hhbmdlIiwiemUiLCJBZSIsIkJlIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJHZSIsImRldGFjaEV2ZW50IiwiSGUiLCJJZSIsImF0dGFjaEV2ZW50IiwiSmUiLCJLZSIsIkxlIiwiTWUiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiTmUiLCJ2aWV3IiwiT2UiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGUiLCJnZXRNb2RpZmllclN0YXRlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJXZSIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlhlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJZZSIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInNlbGVjdCIsImVmIiwiZmYiLCJnZiIsImhmIiwiamYiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0Iiwia2YiLCJvblNlbGVjdCIsImxmIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm1mIiwiY2xpcGJvYXJkRGF0YSIsIm5mIiwib2YiLCJjaGFyQ29kZSIsInBmIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInFmIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInJmIiwic2YiLCJkYXRhVHJhbnNmZXIiLCJ0ZiIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ1ZiIsInZmIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ3ZiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRGYiLCJFZiIsIkZmIiwiR2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIkhmIiwiSWYiLCJKZiIsIktmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJMZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIk1mIiwidW5zdGFibGVfbm93IiwiTmYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIk9mIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJQZiIsIlFmIiwiUmYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIlNmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiVGYiLCJVZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ2ZyIsIndnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJ4ZyIsInlnIiwiemciLCJjYSIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkpnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIkdnIiwiSGciLCJJZyIsIktnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiTGciLCJNZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiTmciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJPZyIsIlBnIiwiX3N0cmluZ1JlZiIsIlFnIiwiUmciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiU2ciLCJUZyIsImVsZW1lbnRUeXBlIiwiVWciLCJpbXBsZW1lbnRhdGlvbiIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsImVoIiwiZmgiLCJnaCIsImhoIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiaWgiLCJyZXNwb25kZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwicXVldWUiLCJ1aCIsInZoIiwid2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJ4aCIsInloIiwiemgiLCJBaCIsImRlc3Ryb3kiLCJkZXBzIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJyZWFkQ29udGV4dCIsInVzZVJlc3BvbmRlciIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwicGVuZGluZ1Byb3BzIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsImVpIiwiZmkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJnaSIsImhpIiwicGVuZGluZ0NvbnRleHQiLCJuaSIsInBpIiwicWkiLCJpaSIsInJldHJ5VGltZSIsImppIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsImtpIiwibGkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbEV4cGlyYXRpb24iLCJ0YWlsTW9kZSIsIm1pIiwicmkiLCJzaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJzdGFjayIsIkJpIiwiV2Vha1NldCIsIlNldCIsIkNpIiwiRmkiLCJFaSIsIkdpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJIaSIsIklpIiwiSmkiLCJmb2N1cyIsIktpIiwiTGkiLCJEaSIsIk1pIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiUmkiLCJTaSIsIlRpIiwiZGlzcGxheSIsIlVpIiwiVmkiLCJhZGQiLCJXaSIsIlhpIiwiZWxlbWVudCIsIllpIiwiWmkiLCIkaSIsImNvbXBvbmVudERpZENhdGNoIiwiYWoiLCJjb21wb25lbnRTdGFjayIsIlJqIiwiYmoiLCJjZWlsIiwiY2oiLCJkaiIsImtqIiwibGoiLCJtaiIsIm5qIiwib2oiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsInRpbWVvdXRNcyIsInhqIiwieWoiLCJ6aiIsImxhc3RFeHBpcmVkVGltZSIsIkFqIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQaW5nZWRUaW1lIiwibmV4dEtub3duUGVuZGluZ0xldmVsIiwiY2FsbGJhY2tFeHBpcmF0aW9uVGltZSIsImNhbGxiYWNrUHJpb3JpdHkiLCJjYWxsYmFja05vZGUiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIklqIiwidGltZW91dEhhbmRsZSIsIkpqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIktqIiwiTWoiLCJOaiIsInBpbmdDYWNoZSIsIk9qIiwidWIiLCJQaiIsIlhjIiwiUWoiLCJTaiIsImZpcnN0U3VzcGVuZGVkVGltZSIsInJhbmdlQ291bnQiLCJ3YiIsImFjdGl2ZUVsZW1lbnREZXRhY2hlZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJUaiIsIndkIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm1pbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwidmIiLCJVaiIsIlZqIiwiV2oiLCJoaWRkZW4iLCJkZWZhdWx0Iiwib2IiLCJYaiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlpqIiwicGVuZGluZ0NoaWxkcmVuIiwiYWsiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiSmMiLCJfaW50ZXJuYWxSb290IiwiZ2siLCJpayIsImhhc0F0dHJpYnV0ZSIsImhrIiwiamsiLCJrayIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiWWoiLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsIkNvbnRleHQiLCJfaW52b2tlIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwicmV2ZXJzZSIsInNraXBUZW1wUmVzZXQiLCJwcmV2Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJGdW5jdGlvbiIsImFycmF5TGlrZVRvQXJyYXkiLCJtaW5MZW4iLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiYXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJnZXRVcmkiLCJ1c2UiLCJlamVjdCIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsInJlYXNvbiIsImZucyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwib25jZSIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIm5vcm1hbGl6ZWROYW1lIiwiaXNBeGlvc0Vycm9yIiwidG9KU09OIiwiZGVzY3JpcHRpb24iLCJjb2x1bW5OdW1iZXIiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwibGluZSIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJwcm90b2NvbCIsImhvc3QiLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJyZXF1ZXN0VVJMIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiTGF6eSIsIlBvcnRhbCIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsIl9leHRlbmRzIiwiaXNBYnNvbHV0ZSIsInNwbGljZU9uZSIsImxpc3QiLCJoYXNUcmFpbGluZ1NsYXNoIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwidXAiLCJwYXJ0IiwiY29uZGl0aW9uIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwibGlzdGVuZXIiLCJpdGVtIiwibm90aWZ5TGlzdGVuZXJzIiwiX2xlbiIsIl9rZXkiLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJ0cmFuc2l0aW9uTWFuYWdlciIsIm5leHRTdGF0ZSIsImhhbmRsZVBvcFN0YXRlIiwiZXZlbnQiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsIm9rIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsInN0cmlwSGFzaCIsImdldEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJiYXNlVGFnIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtYXgiLCJjcmVhdGVNZW1vcnlIaXN0b3J5IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwiZW50cmllcyIsIm5leHRJbmRleCIsIm5leHRFbnRyaWVzIiwic3BsaWNlIiwiY2FuR28iLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImhpc3RvcnlDb250ZXh0IiwiY3JlYXRlTmFtZWRDb250ZXh0JDEiLCJfUmVhY3QkQ29tcG9uZW50IiwiUm91dGVyIiwiX2lzTW91bnRlZCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsImlzRXhhY3QiLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsInJlZHVjZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsInJlZ2V4cCIsImNvbXBpbGVQYXRoJDEiLCJSb3V0ZSIsImNvbnRleHQkMSIsImNvbXB1dGVkTWF0Y2giLCJfdGhpcyRwcm9wcyIsImNyZWF0ZVVSTCIsInN0YXRpY0hhbmRsZXIiLCJtZXRob2ROYW1lIiwiU3dpdGNoIiwiQnJvd3NlclJvdXRlciIsInJlc29sdmVUb0xvY2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0iLCJMaW5rQW5jaG9yIiwiZm9yd2FyZGVkUmVmIiwiaW5uZXJSZWYiLCJuYXZpZ2F0ZSIsIl9vbkNsaWNrIiwicmVzdCIsImV4IiwiaXNNb2RpZmllZEV2ZW50IiwiTGluayIsIl9yZWYyIiwiX3JlZjIkY29tcG9uZW50IiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIk5hdkxpbmsiLCJfcmVmJGFyaWFDdXJyZW50IiwiYXJpYUN1cnJlbnQiLCJfcmVmJGFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiY2xhc3NOYW1lUHJvcCIsImNsYXNzTmFtZSIsImlzQWN0aXZlUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0eWxlUHJvcCIsImVzY2FwZWRQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwiQmFzaWNBcHBQcmVzZW50IiwiY2xpY2tUaW1lcyIsImtleVByZXNzVGltZXMiLCJwcmVzc2VkS2V5Iiwic2VjcmV0S2V5IiwiaGFuZGxlRmllbGRDaGFuZ2UiLCJCYXNpY0FwcCIsImxvZyIsImhhbmRsZUtleVByZXNzIiwicGVyX3BhZ2UiLCJBeGlvc0FwcFJlc3VsdHMiLCJ0b3RhbCIsInNlYXJjaFJlc3VsdHMiLCJyZXBvc2l0b3J5IiwiZG93bmxvYWRzIiwiQXhpb3NBcHBQcmVzZW50Iiwia2V5d29yZCIsImhhbmRsZVNlYXJjaFN1Ym1pdCIsIm9uU3VibWl0IiwiYXJpYS1sYWJlbCIsImFyaWEtZGVzY3JpYmVkYnkiLCJvbkNoYW5nZSIsIkZvb3RlclByZXNlbnQiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJBeGlvc0FwcCIsInBlclBhZ2UiLCJwYWdlTnVtYmVyIiwicGFnZSIsImdldEFwaVJlc3VsdCIsImF4aW9zQXBpIiwicmVzdWx0cyIsImxvYWRNb3JlIiwiaGlkZU5hdmJhciIsImdldEVsZW1lbnRCeUlkIiwiY2xhc3NMaXN0IiwiSGVhZGVyUHJlc2VudCIsImRhdGEtdG9nZ2xlIiwiZGF0YS10YXJnZXQiLCJSZWFjdEFwcCIsIlJlYWN0IiwiUmVhY3RET00iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFy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cEQsVUFBVSxXQUNWNW1CLFFBQVMsa0JBQU1vcEIsT0FIakIsbUIsNmFDakNTTSxHLHNJQUVqQixPQUNFLGtCQUFDLEdBQUQsS0FDRSx5QkFBSzlDLFVBQVUsaUNBQ2Isa0JBQUMsR0FBRCxNQUNBLGtCQUFDLEdBQUQsS0FDRSxrQkFBQyxFQUFELENBQU8xWSxPQUFLLEVBQUN4MUMsS0FBSyxTQUFTc00sVUFBV3lpRCxLQUN0QyxrQkFBQyxFQUFELENBQU8vdUQsS0FBSyxTQUFTc00sVUFBVzRqRCxLQUNoQyxrQkFBQyxFQUFELENBQU81akQsVUFBVzRqRCxNQUVwQixrQkFBQyxHQUFELFksR0FYNEJlLElBQU01L0MsV0FrQnhDOVgsU0FBU28zRCxlQUFlLHVCQUMxQk8sSUFBU2h6RCxPQUFPLGtCQUFDLEdBQUQsTUFBYzNFLFNBQVNvM0QsZUFBZSIsImZpbGUiOiJyZWFjdEFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA2NCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGVxdWFsIHRvIG1lcmdlIHdpdGggdGhlIGRpZmZlcmVuY2UgYmVpbmcgdGhhdCBubyByZWZlcmVuY2VcbiAqIHRvIG9yaWdpbmFsIG9iamVjdHMgaXMga2VwdC5cbiAqXG4gKiBAc2VlIG1lcmdlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBkZWVwTWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZGVlcE1lcmdlOiBkZWVwTWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2Y7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0czsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiKTtcblxudmFyIG5vbkl0ZXJhYmxlU3ByZWFkID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVTcHJlYWRcIik7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheTsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB7fTtcblxuZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKSB7XG4gIHZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuICByZXR1cm4gY29tbW9uanNHbG9iYWxba2V5XSA9IChjb21tb25qc0dsb2JhbFtrZXldIHx8IDApICsgMTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ2V0VW5pcXVlSWQoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheUxpa2VUb0FycmF5OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcih0aW1lb3V0RXJyb3JNZXNzYWdlLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3VybCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICd2YWxpZGF0ZVN0YXR1cycsICdtYXhSZWRpcmVjdHMnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJ1xuICBdO1xuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMilcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgZnVuY3Rpb24gb3RoZXJLZXlzRGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3luY1RvR2VuZXJhdG9yOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mOyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxBPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6XG42MDExNixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEU9e307ZnVuY3Rpb24gRihhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEMoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRygpe31HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2woSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsaz1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihrPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaD1BcnJheShmKSxtPTA7bTxmO20rKyloW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49aH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjprLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZyxRPVtdO2Z1bmN0aW9uIFIoYSxiLGMsZSl7aWYoUS5sZW5ndGgpe3ZhciBkPVEucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFMoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5RLmxlbmd0aCYmUS5wdXNoKGEpfVxuZnVuY3Rpb24gVChhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtkPWFba107dmFyIGY9YitVKGQsayk7Zys9VChkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1UoZCxrKyspLGcrPVQoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihDKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixjKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBXKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGFhKGEsYixjKXt2YXIgZT1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1goYSxlLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTyhhKSYmKGE9TihhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFgoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIik7Yj1SKGIsZyxlLGQpO1YoYSxhYSxiKTtTKGIpfXZhciBZPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFooKXt2YXIgYT1ZLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQygzMjEpKTtyZXR1cm4gYX1cbnZhciBiYT17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpZLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOntzdXNwZW5zZTpudWxsfSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07ZXhwb3J0cy5DaGlsZHJlbj17bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1goYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVIobnVsbCxudWxsLGIsYyk7VihhLFcsYik7UyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFYoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtYKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoQygxNDMpKTtyZXR1cm4gYX19O1xuZXhwb3J0cy5Db21wb25lbnQ9RjtleHBvcnRzLkZyYWdtZW50PXI7ZXhwb3J0cy5Qcm9maWxlcj11O2V4cG9ydHMuUHVyZUNvbXBvbmVudD1IO2V4cG9ydHMuU3RyaWN0TW9kZT10O2V4cG9ydHMuU3VzcGVuc2U9eTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWJhO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEMoMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixrPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixrPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihoIGluIGIpSy5jYWxsKGIsaCkmJiFMLmhhc093blByb3BlcnR5KGgpJiYoZVtoXT12b2lkIDA9PT1iW2hdJiZ2b2lkIDAhPT1mP2ZbaF06YltoXSl9dmFyIGg9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1oKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8aCl7Zj1BcnJheShoKTtmb3IodmFyIG09MDttPGg7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6a319O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eix0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMVwiO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7XG5mdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsayl7ZGE9ITE7ZWE9bnVsbDtiYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgbD1lYTtkYT0hMTtlYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtmYXx8KGZhPSEwLGhhPWwpfX12YXIgbGE9bnVsbCxtYT1udWxsLG5hPW51bGw7XG5mdW5jdGlvbiBvYShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9bmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH12YXIgcGE9bnVsbCxxYT17fTtcbmZ1bmN0aW9uIHJhKCl7aWYocGEpZm9yKHZhciBhIGluIHFhKXt2YXIgYj1xYVthXSxjPXBhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighc2FbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7c2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZih0YS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTt0YVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ1YShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIHVhKGEsYixjKXtpZih2YVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7dmFbYV09Yjt3YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBzYT1bXSx0YT17fSx2YT17fSx3YT17fTtmdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighcWEuaGFzT3duUHJvcGVydHkoYyl8fHFhW2NdIT09ZCl7aWYocWFbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO3FhW2NdPWQ7Yj0hMH19YiYmcmEoKX12YXIgeWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLHphPW51bGwsQWE9bnVsbCxCYT1udWxsO1xuZnVuY3Rpb24gQ2EoYSl7aWYoYT1tYShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9bGEoYiksemEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRGEoYSl7QWE/QmE/QmEucHVzaChhKTpCYT1bYV06QWE9YX1mdW5jdGlvbiBFYSgpe2lmKEFhKXt2YXIgYT1BYSxiPUJhO0JhPUFhPW51bGw7Q2EoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUNhKGJbYV0pfX1mdW5jdGlvbiBGYShhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEdhKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSGEoKXt9dmFyIElhPUZhLEphPSExLEthPSExO2Z1bmN0aW9uIExhKCl7aWYobnVsbCE9PUFhfHxudWxsIT09QmEpSGEoKSxFYSgpfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKEthKXJldHVybiBhKGIsYyk7S2E9ITA7dHJ5e3JldHVybiBJYShhLGIsYyl9ZmluYWxseXtLYT0hMSxMYSgpfX12YXIgTmE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLE9hPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksUGE9e30sUWE9e307XG5mdW5jdGlvbiBSYShhKXtpZihPYS5jYWxsKFFhLGEpKXJldHVybiEwO2lmKE9hLmNhbGwoUGEsYSkpcmV0dXJuITE7aWYoTmEudGVzdChhKSlyZXR1cm4gUWFbYV09ITA7UGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gU2EoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBUYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxTYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBDPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0NbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBVYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFZhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFxuVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuQy54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO3ZhciBXYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoV2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbmZ1bmN0aW9uIFhhKGEsYixjLGQpe3ZhciBlPUMuaGFzT3duUHJvcGVydHkoYik/Q1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KFRhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9SYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIFlhPS9eKC4qKVtcXFxcXFwvXS8sRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFphPUU/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsJGE9RT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGFiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGJiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGNiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGRiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGViPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGdiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGhiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGliPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxqYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGtiPUU/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsbGI9RT9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsbWI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIG5iKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1tYiYmYVttYl18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiBvYihhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIHBiKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJiOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGI6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaWI6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWI6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGdiOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBqYjpyZXR1cm4gcGIoYS50eXBlKTtjYXNlIGxiOnJldHVybiBwYihhLnJlbmRlcik7Y2FzZSBrYjppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIHBiKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIHFiKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1wYihhLnR5cGUpO2M9bnVsbDtkJiYoYz1wYihkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFlhLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiByYihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gc2IoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIHRiKGEpe3ZhciBiPXNiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiB4YihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9dGIoYSkpfWZ1bmN0aW9uIHliKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1zYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIHpiKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEFiKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXJiKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQmIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZYYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gQ2IoYSxiKXtCYihhLGIpO3ZhciBjPXJiKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0RiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkRiKGEsYi50eXBlLHJiKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRWIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIERiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBGYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIityYihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnJiKGMpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9cmIoYi52YWx1ZSksZD1yYihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIExiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE1iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE5iKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gT2IoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP05iKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFBiLFFiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BiPVBifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVBiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFJiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gU2IoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGI9e2FuaW1hdGlvbmVuZDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWI9e30sVmI9e307XG55YSYmKFZiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2IoYSl7aWYoVWJbYV0pcmV0dXJuIFViW2FdO2lmKCFUYlthXSlyZXR1cm4gYTt2YXIgYj1UYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYilyZXR1cm4gVWJbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYj1XYihcImFuaW1hdGlvbmVuZFwiKSxZYj1XYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYj1XYihcImFuaW1hdGlvbnN0YXJ0XCIpLCRiPVdiKFwidHJhbnNpdGlvbmVuZFwiKSxhYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmM9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24gY2MoYSl7dmFyIGI9YmMuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBNYXAsYmMuc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24gZGMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZWMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBmYyhhKXtpZihkYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBnYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1kYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBmYyhlKSxhO2lmKGY9PT1kKXJldHVybiBmYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhjKGEpe2E9Z2MoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBqYyhhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIga2M9bnVsbDtcbmZ1bmN0aW9uIGxjKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKylvYShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZvYShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gbWMoYSl7bnVsbCE9PWEmJihrYz1pYyhrYyxhKSk7YT1rYztrYz1udWxsO2lmKGEpe2pjKGEsbGMpO2lmKGtjKXRocm93IEVycm9yKHUoOTUpKTtpZihmYSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9fVxuZnVuY3Rpb24gbmMoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIG9jKGEpe2lmKCF5YSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgcGM9W107ZnVuY3Rpb24gcWMoYSl7YS50b3BMZXZlbFR5cGU9bnVsbDthLm5hdGl2ZUV2ZW50PW51bGw7YS50YXJnZXRJbnN0PW51bGw7YS5hbmNlc3RvcnMubGVuZ3RoPTA7MTA+cGMubGVuZ3RoJiZwYy5wdXNoKGEpfVxuZnVuY3Rpb24gcmMoYSxiLGMsZCl7aWYocGMubGVuZ3RoKXt2YXIgZT1wYy5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1kO2UubmF0aXZlRXZlbnQ9YjtlLnRhcmdldEluc3Q9YztyZXR1cm4gZX1yZXR1cm57dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX19XG5mdW5jdGlvbiBzYyhhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9dGMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9bmMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTt2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9YS5ldmVudFN5c3RlbUZsYWdzOzA9PT1jJiYoZ3w9NjQpO2Zvcih2YXIgaD1udWxsLGs9MDtrPHNhLmxlbmd0aDtrKyspe3ZhciBsPXNhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9XG5pYyhoLGwpKX1tYyhoKX19ZnVuY3Rpb24gdWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjp2YyhiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6dmMoYixcImZvY3VzXCIsITApO3ZjKGIsXCJibHVyXCIsITApO2Muc2V0KFwiYmx1clwiLG51bGwpO2Muc2V0KFwiZm9jdXNcIixudWxsKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6b2MoYSkmJnZjKGIsYSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFjLmluZGV4T2YoYSkmJkYoYSxiKX1jLnNldChhLG51bGwpfX1cbnZhciB3Yyx4Yyx5Yyx6Yz0hMSxBYz1bXSxCYz1udWxsLENjPW51bGwsRGM9bnVsbCxFYz1uZXcgTWFwLEZjPW5ldyBNYXAsR2M9W10sSGM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSxJYz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBKYyhhLGIpe3ZhciBjPWNjKGIpO0hjLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSk7SWMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KX1mdW5jdGlvbiBLYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZSxjb250YWluZXI6ZH19XG5mdW5jdGlvbiBMYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkJjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpDYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpEYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6RWMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6RmMuZGVsZXRlKGIucG9pbnRlcklkKX19ZnVuY3Rpb24gTWMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1LYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1OYyhiKSxudWxsIT09YiYmeGMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO3JldHVybiBhfVxuZnVuY3Rpb24gT2MoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIEJjPU1jKEJjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBDYz1NYyhDYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gRGM9TWMoRGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtFYy5zZXQoZixNYyhFYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsRmMuc2V0KGYsTWMoRmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9dGMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1kYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1lYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7eWMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIFFjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPU5jKGIpO251bGwhPT1jJiZ4YyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gU2MoYSxiLGMpe1FjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBUYygpe2Zvcih6Yz0hMTswPEFjLmxlbmd0aDspe3ZhciBhPUFjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1OYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJndjKGEpO2JyZWFrfXZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOkFjLnNoaWZ0KCl9bnVsbCE9PUJjJiZRYyhCYykmJihCYz1udWxsKTtudWxsIT09Q2MmJlFjKENjKSYmKENjPW51bGwpO251bGwhPT1EYyYmUWMoRGMpJiYoRGM9bnVsbCk7RWMuZm9yRWFjaChTYyk7RmMuZm9yRWFjaChTYyl9ZnVuY3Rpb24gVWMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLHpjfHwoemM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVGMpKSl9XG5mdW5jdGlvbiBWYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBVYyhiLGEpfWlmKDA8QWMubGVuZ3RoKXtVYyhBY1swXSxhKTtmb3IodmFyIGM9MTtjPEFjLmxlbmd0aDtjKyspe3ZhciBkPUFjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09QmMmJlVjKEJjLGEpO251bGwhPT1DYyYmVWMoQ2MsYSk7bnVsbCE9PURjJiZVYyhEYyxhKTtFYy5mb3JFYWNoKGIpO0ZjLmZvckVhY2goYik7Zm9yKGM9MDtjPEdjLmxlbmd0aDtjKyspZD1HY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8R2MubGVuZ3RoJiYoYz1HY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylQYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJkdjLnNoaWZ0KCl9XG52YXIgV2M9e30sWWM9bmV3IE1hcCxaYz1uZXcgTWFwLCRjPVtcImFib3J0XCIsXCJhYm9ydFwiLFhiLFwiYW5pbWF0aW9uRW5kXCIsWWIsXCJhbmltYXRpb25JdGVyYXRpb25cIixaYixcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcblwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLCRiLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBhZChhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXSxmPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO2Y9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmYsY2FwdHVyZWQ6ZitcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltkXSxldmVudFByaW9yaXR5OmJ9O1pjLnNldChkLGIpO1ljLnNldChkLGYpO1djW2VdPWZ9fVxuYWQoXCJibHVyIGJsdXIgY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXMgZm9jdXMgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSwwKTtcbmFkKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO2FkKCRjLDIpO2Zvcih2YXIgYmQ9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLGNkPTA7Y2Q8YmQubGVuZ3RoO2NkKyspWmMuc2V0KGJkW2NkXSwwKTtcbnZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIEYoYSxiKXt2YyhiLGEsITEpfWZ1bmN0aW9uIHZjKGEsYixjKXt2YXIgZD1aYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWQ/MjpkKXtjYXNlIDA6ZD1nZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2Nhc2UgMTpkPWhkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7ZGVmYXVsdDpkPWlkLmJpbmQobnVsbCxiLDEsYSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBnZChhLGIsYyxkKXtKYXx8SGEoKTt2YXIgZT1pZCxmPUphO0phPSEwO3RyeXtHYShlLGEsYixjLGQpfWZpbmFsbHl7KEphPWYpfHxMYSgpfX1mdW5jdGlvbiBoZChhLGIsYyxkKXtlZChkZCxpZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaWQoYSxiLGMsZCl7aWYoZmQpaWYoMDxBYy5sZW5ndGgmJi0xPEhjLmluZGV4T2YoYSkpYT1LYyhudWxsLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZXt2YXIgZT1SYyhhLGIsYyxkKTtpZihudWxsPT09ZSlMYyhhLGQpO2Vsc2UgaWYoLTE8SGMuaW5kZXhPZihhKSlhPUtjKGUsYSxiLGMsZCksQWMucHVzaChhKTtlbHNlIGlmKCFPYyhlLGEsYixjLGQpKXtMYyhhLGQpO2E9cmMoYSxkLG51bGwsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9fX19XG5mdW5jdGlvbiBSYyhhLGIsYyxkKXtjPW5jKGQpO2M9dGMoYyk7aWYobnVsbCE9PWMpe3ZhciBlPWRjKGMpO2lmKG51bGw9PT1lKWM9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7Yz1lYyhlKTtpZihudWxsIT09YylyZXR1cm4gYztjPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtjPW51bGx9ZWxzZSBlIT09YyYmKGM9bnVsbCl9fWE9cmMoYSxkLGMsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9cmV0dXJuIG51bGx9XG52YXIgamQ9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sa2Q9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGpkKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2tkLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7amRbYl09amRbYV19KX0pO2Z1bmN0aW9uIGxkKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxqZC5oYXNPd25Qcm9wZXJ0eShhKSYmamRbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gbWQoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bGQoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgbmQ9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIG9kKGEsYil7aWYoYil7aWYobmRbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDEzNyxhLFwiXCIpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHUoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHUoNjIsXCJcIikpO319XG5mdW5jdGlvbiBwZChhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHFkPU1iLmh0bWw7ZnVuY3Rpb24gcmQoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9Y2MoYSk7Yj13YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl1YyhiW2RdLGEsYyl9ZnVuY3Rpb24gc2QoKXt9XG5mdW5jdGlvbiB0ZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gdWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIHZkKGEsYil7dmFyIGM9dWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9dWQoYyl9fVxuZnVuY3Rpb24gd2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT93ZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9ZnVuY3Rpb24geGQoKXtmb3IodmFyIGE9d2luZG93LGI9dGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9dGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9XG5mdW5jdGlvbiB5ZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfXZhciB6ZD1cIiRcIixBZD1cIi8kXCIsQmQ9XCIkP1wiLENkPVwiJCFcIixEZD1udWxsLEVkPW51bGw7ZnVuY3Rpb24gRmQoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gR2QoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBIZD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxJZD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gSmQoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9XG5mdW5jdGlvbiBLZChhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT16ZHx8Yz09PUNkfHxjPT09QmQpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlIGM9PT1BZCYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIExkPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE1kPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGQsTmQ9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMZCxPZD1cIl9fcmVhY3RDb250YWluZXJlJFwiK0xkO1xuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YVtNZF07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbT2RdfHxjW01kXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUtkKGEpO251bGwhPT1hOyl7aWYoYz1hW01kXSlyZXR1cm4gYzthPUtkKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBOYyhhKXthPWFbTWRdfHxhW09kXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gUGQoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHUoMzMpKTt9ZnVuY3Rpb24gUWQoYSl7cmV0dXJuIGFbTmRdfHxudWxsfVxuZnVuY3Rpb24gUmQoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFNkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9bGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLFxuYix0eXBlb2YgYykpO3JldHVybiBjfWZ1bmN0aW9uIFRkKGEsYixjKXtpZihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVWQoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1SZChiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspVGQoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylUZChjW2JdLFwiYnViYmxlZFwiLGEpfX1cbmZ1bmN0aW9uIFZkKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gV2QoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWZChhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWGQoYSl7amMoYSxVZCl9dmFyIFlkPW51bGwsWmQ9bnVsbCwkZD1udWxsO1xuZnVuY3Rpb24gYWUoKXtpZigkZClyZXR1cm4gJGQ7dmFyIGEsYj1aZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiAkZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGJlKCl7cmV0dXJuITB9ZnVuY3Rpb24gY2UoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEcoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2JlOmNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Y2U7cmV0dXJuIHRoaXN9XG5uKEcucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YmUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YmUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9YmV9LGlzUGVyc2lzdGVudDpjZSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1jZTt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0cuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtkZShjKTtyZXR1cm4gY307ZGUoRyk7ZnVuY3Rpb24gZWUoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBmZShhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBkZShhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1lZTthLnJlbGVhc2U9ZmV9dmFyIGdlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxoZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaWU9WzksMTMsMjcsMzJdLGplPXlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxrZT1udWxsO3lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihrZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGxlPXlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYha2UsbWU9eWEmJighamV8fGtlJiY4PGtlJiYxMT49a2UpLG5lPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLG9lPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHBlPSExO1xuZnVuY3Rpb24gcWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1pZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHJlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHNlPSExO2Z1bmN0aW9uIHRlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiByZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7cGU9ITA7cmV0dXJuIG5lO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PW5lJiZwZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHNlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFqZSYmcWUoYSxiKT8oYT1hZSgpLCRkPVpkPVlkPW51bGwsc2U9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIG1lJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB2ZT17ZXZlbnRUeXBlczpvZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKGplKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPW9lLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPW9lLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1vZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2Ugc2U/cWUoYSxjKSYmKGY9b2UuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1vZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhtZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihzZXx8ZiE9PW9lLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PW9lLmNvbXBvc2l0aW9uRW5kJiZzZSYmKGU9YWUoKSk6KFlkPWQsWmQ9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsc2U9ITApKSxmPWdlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9cmUoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFhkKGYpLGU9Zik6ZT1udWxsOyhhPWxlP3RlKGEsYyk6dWUoYSxjKSk/KGI9aGUuZ2V0UG9vbGVkKG9lLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxYZChiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSx3ZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiB4ZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXdlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciB5ZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiB6ZShhLGIsYyl7YT1HLmdldFBvb2xlZCh5ZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0RhKGMpO1hkKGEpO3JldHVybiBhfXZhciBBZT1udWxsLEJlPW51bGw7ZnVuY3Rpb24gQ2UoYSl7bWMoYSl9ZnVuY3Rpb24gRGUoYSl7dmFyIGI9UGQoYSk7aWYoeWIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgRmU9ITE7eWEmJihGZT1vYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIEdlKCl7QWUmJihBZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSksQmU9QWU9bnVsbCl9ZnVuY3Rpb24gSGUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkRlKEJlKSlpZihhPXplKEJlLGEsbmMoYSkpLEphKW1jKGEpO2Vsc2V7SmE9ITA7dHJ5e0ZhKENlLGEpfWZpbmFsbHl7SmE9ITEsTGEoKX19fWZ1bmN0aW9uIEllKGEsYixjKXtcImZvY3VzXCI9PT1hPyhHZSgpLEFlPWIsQmU9YyxBZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSkpOlwiYmx1clwiPT09YSYmR2UoKX1mdW5jdGlvbiBKZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBEZShCZSl9ZnVuY3Rpb24gS2UoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBEZShiKX1mdW5jdGlvbiBMZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBEZShiKX1cbnZhciBNZT17ZXZlbnRUeXBlczp5ZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkZlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9QZChiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUVlO2Vsc2UgaWYoeGUoZSkpaWYoRmUpZz1MZTtlbHNle2c9SmU7dmFyIGg9SWV9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPUtlKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiB6ZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkRiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LE5lPUcuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxcbk9lPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZShhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9lW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gUWUoKXtyZXR1cm4gUGV9XG52YXIgUmU9MCxTZT0wLFRlPSExLFVlPSExLFZlPU5lLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1SZTtSZT1hLnNjcmVlblg7cmV0dXJuIFRlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooVGU9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1TZTtTZT1hLnNjcmVlblk7cmV0dXJuIFVlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooVWU9ITAsMCl9fSksV2U9VmUuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLFhlPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxZZT17ZXZlbnRUeXBlczpYZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtmPWQud2luZG93PT09ZD9kOihmPWQub3duZXJEb2N1bWVudCk/Zi5kZWZhdWx0Vmlld3x8Zi5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP3RjKGIpOm51bGwsbnVsbCE9PWIpe3ZhciBoPWRjKGIpO2lmKGIhPT1ofHw1IT09Yi50YWcmJjYhPT1iLnRhZyliPW51bGx9fWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1cbmEpe3ZhciBrPVZlO3ZhciBsPVhlLm1vdXNlTGVhdmU7dmFyIG09WGUubW91c2VFbnRlcjt2YXIgcD1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaz1XZSxsPVhlLnBvaW50ZXJMZWF2ZSxtPVhlLnBvaW50ZXJFbnRlcixwPVwicG9pbnRlclwiO2E9bnVsbD09Zz9mOlBkKGcpO2Y9bnVsbD09Yj9mOlBkKGIpO2w9ay5nZXRQb29sZWQobCxnLGMsZCk7bC50eXBlPXArXCJsZWF2ZVwiO2wudGFyZ2V0PWE7bC5yZWxhdGVkVGFyZ2V0PWY7Yz1rLmdldFBvb2xlZChtLGIsYyxkKTtjLnR5cGU9cCtcImVudGVyXCI7Yy50YXJnZXQ9ZjtjLnJlbGF0ZWRUYXJnZXQ9YTtkPWc7cD1iO2lmKGQmJnApYTp7az1kO209cDtnPTA7Zm9yKGE9azthO2E9UmQoYSkpZysrO2E9MDtmb3IoYj1tO2I7Yj1SZChiKSlhKys7Zm9yKDswPGctYTspaz1SZChrKSxnLS07Zm9yKDswPGEtZzspbT1SZChtKSxhLS07Zm9yKDtnLS07KXtpZihrPT09bXx8az09PW0uYWx0ZXJuYXRlKWJyZWFrIGE7XG5rPVJkKGspO209UmQobSl9az1udWxsfWVsc2Ugaz1udWxsO209aztmb3Ioaz1bXTtkJiZkIT09bTspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2sucHVzaChkKTtkPVJkKGQpfWZvcihkPVtdO3AmJnAhPT1tOyl7Zz1wLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ZC5wdXNoKHApO3A9UmQocCl9Zm9yKHA9MDtwPGsubGVuZ3RoO3ArKylWZChrW3BdLFwiYnViYmxlZFwiLGwpO2ZvcihwPWQubGVuZ3RoOzA8cC0tOylWZChkW3BdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm4gMD09PShlJjY0KT9bbF06W2wsY119fTtmdW5jdGlvbiBaZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyICRlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOlplLGFmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBiZihhLGIpe2lmKCRlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighYWYuY2FsbChiLGNbZF0pfHwhJGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciBjZj15YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGRmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxlZj1udWxsLGZmPW51bGwsZ2Y9bnVsbCxoZj0hMTtcbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoaGZ8fG51bGw9PWVmfHxlZiE9PXRkKGMpKXJldHVybiBudWxsO2M9ZWY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmeWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gZ2YmJmJmKGdmLGMpP251bGw6KGdmPWMsYT1HLmdldFBvb2xlZChkZi5zZWxlY3QsZmYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1lZixYZChhKSxhKX1cbnZhciBrZj17ZXZlbnRUeXBlczpkZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXtlPWZ8fChkLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCk7aWYoIShmPSFlKSl7YTp7ZT1jYyhlKTtmPXdhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9QZChiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKHhlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKWVmPWUsZmY9YixnZj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6Z2Y9ZmY9ZWY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6aGY9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBoZj0hMSxqZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihjZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGpmKGMsZCl9cmV0dXJuIG51bGx9fSxsZj1HLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksbWY9Ry5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxuZj1OZS5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIG9mKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHBmPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxxZj17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0scmY9TmUuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXBmW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9mKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9xZlthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2YoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2YoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxzZj1WZS5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdGY9TmUuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWV9KSx1Zj1HLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx2Zj1WZS5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHdmPXtldmVudFR5cGVzOldjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9WWMuZ2V0KGEpO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2YoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXJmO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1uZjticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVxuVmU7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1zZjticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXRmO2JyZWFrO2Nhc2UgWGI6Y2FzZSBZYjpjYXNlIFpiOmE9bGY7YnJlYWs7Y2FzZSAkYjphPXVmO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPU5lO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9dmY7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1tZjticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVxuV2U7YnJlYWs7ZGVmYXVsdDphPUd9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtYZChiKTtyZXR1cm4gYn19O2lmKHBhKXRocm93IEVycm9yKHUoMTAxKSk7cGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7cmEoKTt2YXIgeGY9TmM7bGE9UWQ7bWE9eGY7bmE9UGQ7eGEoe1NpbXBsZUV2ZW50UGx1Z2luOndmLEVudGVyTGVhdmVFdmVudFBsdWdpbjpZZSxDaGFuZ2VFdmVudFBsdWdpbjpNZSxTZWxlY3RFdmVudFBsdWdpbjprZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnZlfSk7dmFyIHlmPVtdLHpmPS0xO2Z1bmN0aW9uIEgoYSl7MD56Znx8KGEuY3VycmVudD15Zlt6Zl0seWZbemZdPW51bGwsemYtLSl9XG5mdW5jdGlvbiBJKGEsYil7emYrKzt5Zlt6Zl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBBZj17fSxKPXtjdXJyZW50OkFmfSxLPXtjdXJyZW50OiExfSxCZj1BZjtmdW5jdGlvbiBDZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEFmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIERmKCl7SChLKTtIKEopfWZ1bmN0aW9uIEVmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1BZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiKTtJKEssYyl9ZnVuY3Rpb24gRmYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih1KDEwOCxwYihiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gR2YoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEFmO0JmPUouY3VycmVudDtJKEosYSk7SShLLEsuY3VycmVudCk7cmV0dXJuITB9XG5mdW5jdGlvbiBIZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhhPUZmKGEsYixCZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoSyksSChKKSxJKEosYSkpOkgoSyk7SShLLGMpfVxudmFyIElmPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEpmPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxLZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLExmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LE1mPXIudW5zdGFibGVfbm93LE5mPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsT2Y9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxQZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFFmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksUmY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxTZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxUZj17fSxVZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFZmPXZvaWQgMCE9PUxmP0xmOmZ1bmN0aW9uKCl7fSxXZj1udWxsLFhmPW51bGwsWWY9ITEsWmY9TWYoKSwkZj0xRTQ+WmY/TWY6ZnVuY3Rpb24oKXtyZXR1cm4gTWYoKS1aZn07XG5mdW5jdGlvbiBhZygpe3N3aXRjaChOZigpKXtjYXNlIE9mOnJldHVybiA5OTtjYXNlIFBmOnJldHVybiA5ODtjYXNlIFFmOnJldHVybiA5NztjYXNlIFJmOnJldHVybiA5NjtjYXNlIFNmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gT2Y7Y2FzZSA5ODpyZXR1cm4gUGY7Y2FzZSA5NzpyZXR1cm4gUWY7Y2FzZSA5NjpyZXR1cm4gUmY7Y2FzZSA5NTpyZXR1cm4gU2Y7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gY2coYSxiKXthPWJnKGEpO3JldHVybiBJZihhLGIpfWZ1bmN0aW9uIGRnKGEsYixjKXthPWJnKGEpO3JldHVybiBKZihhLGIsYyl9ZnVuY3Rpb24gZWcoYSl7bnVsbD09PVdmPyhXZj1bYV0sWGY9SmYoT2YsZmcpKTpXZi5wdXNoKGEpO3JldHVybiBUZn1mdW5jdGlvbiBnZygpe2lmKG51bGwhPT1YZil7dmFyIGE9WGY7WGY9bnVsbDtLZihhKX1mZygpfVxuZnVuY3Rpb24gZmcoKXtpZighWWYmJm51bGwhPT1XZil7WWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9V2Y7Y2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1dmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVdmJiYoV2Y9V2Yuc2xpY2UoYSsxKSksSmYoT2YsZ2cpLGM7fWZpbmFsbHl7WWY9ITF9fX1mdW5jdGlvbiBoZyhhLGIsYyl7Yy89MTA7cmV0dXJuIDEwNzM3NDE4MjEtKCgoMTA3Mzc0MTgyMS1hK2IvMTApL2N8MCkrMSkqY31mdW5jdGlvbiBpZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgamc9e2N1cnJlbnQ6bnVsbH0sa2c9bnVsbCxsZz1udWxsLG1nPW51bGw7ZnVuY3Rpb24gbmcoKXttZz1sZz1rZz1udWxsfVxuZnVuY3Rpb24gb2coYSl7dmFyIGI9amcuY3VycmVudDtIKGpnKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHBnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHFnKGEsYil7a2c9YTttZz1sZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJihyZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBzZyhhLGIpe2lmKG1nIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YiltZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09bGcpe2lmKG51bGw9PT1rZyl0aHJvdyBFcnJvcih1KDMwOCkpO2xnPWI7a2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBsZz1sZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgdGc9ITE7ZnVuY3Rpb24gdWcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxiYXNlUXVldWU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGJhc2VRdWV1ZTphLmJhc2VRdWV1ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB3ZyhhLGIpe2E9e2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9O3JldHVybiBhLm5leHQ9YX1mdW5jdGlvbiB4ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIHlnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJnZnKGMsYSk7YT1hLnVwZGF0ZVF1ZXVlO2M9YS5iYXNlUXVldWU7bnVsbD09PWM/KGEuYmFzZVF1ZXVlPWIubmV4dD1iLGIubmV4dD1iKTooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yil9XG5mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3RnPSExO3ZhciBmPWUuYmFzZVF1ZXVlLGc9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09Zyl7aWYobnVsbCE9PWYpe3ZhciBoPWYubmV4dDtmLm5leHQ9Zy5uZXh0O2cubmV4dD1ofWY9ZztlLnNoYXJlZC5wZW5kaW5nPW51bGw7aD1hLmFsdGVybmF0ZTtudWxsIT09aCYmKGg9aC51cGRhdGVRdWV1ZSxudWxsIT09aCYmKGguYmFzZVF1ZXVlPWcpKX1pZihudWxsIT09Zil7aD1mLm5leHQ7dmFyIGs9ZS5iYXNlU3RhdGUsbD0wLG09bnVsbCxwPW51bGwseD1udWxsO2lmKG51bGwhPT1oKXt2YXIgej1oO2Rve2c9ei5leHBpcmF0aW9uVGltZTtpZihnPGQpe3ZhciBjYT17ZXhwaXJhdGlvblRpbWU6ei5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PXg/KHA9eD1cbmNhLG09ayk6eD14Lm5leHQ9Y2E7Zz5sJiYobD1nKX1lbHNle251bGwhPT14JiYoeD14Lm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9KTtBZyhnLHouc3VzcGVuc2VDb25maWcpO2E6e3ZhciBEPWEsdD16O2c9YjtjYT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOkQ9dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBEKXtrPUQuY2FsbChjYSxrLGcpO2JyZWFrIGF9az1EO2JyZWFrIGE7Y2FzZSAzOkQuZWZmZWN0VGFnPUQuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDpEPXQucGF5bG9hZDtnPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBEP0QuY2FsbChjYSxrLGcpOkQ7aWYobnVsbD09PWd8fHZvaWQgMD09PWcpYnJlYWsgYTtrPW4oe30sayxnKTticmVhayBhO2Nhc2UgMjp0Zz0hMH19bnVsbCE9PXouY2FsbGJhY2smJlxuKGEuZWZmZWN0VGFnfD0zMixnPWUuZWZmZWN0cyxudWxsPT09Zz9lLmVmZmVjdHM9W3pdOmcucHVzaCh6KSl9ej16Lm5leHQ7aWYobnVsbD09PXp8fHo9PT1oKWlmKGc9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09ZylicmVhaztlbHNlIHo9Zi5uZXh0PWcubmV4dCxnLm5leHQ9aCxlLmJhc2VRdWV1ZT1mPWcsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpfW51bGw9PT14P209azp4Lm5leHQ9cDtlLmJhc2VTdGF0ZT1tO2UuYmFzZVF1ZXVlPXg7QmcobCk7YS5leHBpcmF0aW9uVGltZT1sO2EubWVtb2l6ZWRTdGF0ZT1rfX1cbmZ1bmN0aW9uIENnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9ZTtlPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQpdGhyb3cgRXJyb3IodSgxOTEsZCkpO2QuY2FsbChlKX19fXZhciBEZz1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxFZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBGZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgSmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2RjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZygpLGQ9RGcuc3VzcGVuc2U7XG5jPUhnKGMsYSxkKTtkPXdnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7eGcoYSxkKTtJZyhhLGMpfX07ZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hYmYoYyxkKXx8IWJmKGUsZik6ITB9XG5mdW5jdGlvbiBMZyhhLGIsYyl7dmFyIGQ9ITEsZT1BZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1zZyhmKTooZT1MKGIpP0JmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0NmKGEsZSk6QWYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1KZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUVnO3VnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9c2coZik6KGY9TChiKT9CZjpKLmN1cnJlbnQsZS5jb250ZXh0PUNmKGEsZikpO3pnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihGZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSx6ZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIE9nPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBQZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFFnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiBSZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1TZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1QZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1WZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9V2coYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1UZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYz1VZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1QZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgJGE6cmV0dXJuIGI9VmcoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE9nKGIpfHxcbm5iKGIpKXJldHVybiBiPVdnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1FnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWFiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSAkYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihPZyhjKXx8bmIoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1FnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1hYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSAkYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihPZyhkKXx8bmIoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1FnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gY2EoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLG09Zyx5PWc9MCxBPW51bGw7bnVsbCE9PW0mJnk8aC5sZW5ndGg7eSsrKXttLmluZGV4Pnk/KEE9bSxtPW51bGwpOkE9bS5zaWJsaW5nO3ZhciBxPXgoZSxtLGhbeV0sayk7aWYobnVsbD09PXEpe251bGw9PT1tJiYobT1BKTticmVha31hJiZcbm0mJm51bGw9PT1xLmFsdGVybmF0ZSYmYihlLG0pO2c9ZihxLGcseSk7bnVsbD09PXQ/bD1xOnQuc2libGluZz1xO3Q9cTttPUF9aWYoeT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt5PGgubGVuZ3RoO3krKyltPXAoZSxoW3ldLGspLG51bGwhPT1tJiYoZz1mKG0sZyx5KSxudWxsPT09dD9sPW06dC5zaWJsaW5nPW0sdD1tKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7eTxoLmxlbmd0aDt5KyspQT16KG0sZSx5LGhbeV0sayksbnVsbCE9PUEmJihhJiZudWxsIT09QS5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1BLmtleT95OkEua2V5KSxnPWYoQSxnLHkpLG51bGw9PT10P2w9QTp0LnNpYmxpbmc9QSx0PUEpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gRChlLGcsaCxsKXt2YXIgaz1uYihoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2Ygayl0aHJvdyBFcnJvcih1KDE1MCkpO2g9ay5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1rPW51bGwsdD1nLHk9Zz0wLEE9bnVsbCxxPWgubmV4dCgpO251bGwhPT10JiYhcS5kb25lO3krKyxxPWgubmV4dCgpKXt0LmluZGV4Pnk/KEE9dCx0PW51bGwpOkE9dC5zaWJsaW5nO3ZhciBEPXgoZSx0LHEudmFsdWUsbCk7aWYobnVsbD09PUQpe251bGw9PT10JiYodD1BKTticmVha31hJiZ0JiZudWxsPT09RC5hbHRlcm5hdGUmJmIoZSx0KTtnPWYoRCxnLHkpO251bGw9PT1tP2s9RDptLnNpYmxpbmc9RDttPUQ7dD1BfWlmKHEuZG9uZSlyZXR1cm4gYyhlLHQpLGs7aWYobnVsbD09PXQpe2Zvcig7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXAoZSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTtyZXR1cm4ga31mb3IodD1kKGUsdCk7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXoodCxlLHkscS52YWx1ZSxsKSxudWxsIT09cSYmKGEmJm51bGwhPT1cbnEuYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09cS5rZXk/eTpxLmtleSksZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBrfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1hYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBaYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PWFiKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLFxuay5zaWJsaW5nKTtkPWUoayxmLnByb3BzKTtkLnJlZj1QZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWFiPyhkPVdnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1VZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1QZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgJGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9XG5kLnNpYmxpbmd9ZD1WZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1UZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihPZyhmKSlyZXR1cm4gY2EoYSxkLGYsaCk7aWYobmIoZikpcmV0dXJuIEQoYSxkLGYsaCk7bCYmUWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFhnPVJnKCEwKSxZZz1SZyghMSksWmc9e30sJGc9e2N1cnJlbnQ6Wmd9LGFoPXtjdXJyZW50OlpnfSxiaD17Y3VycmVudDpaZ307XG5mdW5jdGlvbiBjaChhKXtpZihhPT09WmcpdGhyb3cgRXJyb3IodSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBkaChhLGIpe0koYmgsYik7SShhaCxhKTtJKCRnLFpnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOk9iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1PYihiLGEpfUgoJGcpO0koJGcsYil9ZnVuY3Rpb24gZWgoKXtIKCRnKTtIKGFoKTtIKGJoKX1mdW5jdGlvbiBmaChhKXtjaChiaC5jdXJyZW50KTt2YXIgYj1jaCgkZy5jdXJyZW50KTt2YXIgYz1PYihiLGEudHlwZSk7YiE9PWMmJihJKGFoLGEpLEkoJGcsYykpfWZ1bmN0aW9uIGdoKGEpe2FoLmN1cnJlbnQ9PT1hJiYoSCgkZyksSChhaCkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gaGgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09QmR8fGMuZGF0YT09PUNkKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIGloKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIGpoPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsa2g9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsbGg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxtaD0hMTtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gbmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighJGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9oKGEsYixjLGQsZSxmKXtsaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5leHBpcmF0aW9uVGltZT0wO2poLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/cGg6cWg7YT1jKGQsZSk7aWYoYi5leHBpcmF0aW9uVGltZT09PWxoKXtmPTA7ZG97Yi5leHBpcmF0aW9uVGltZT0wO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IodSgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtqaC5jdXJyZW50PXJoO2E9YyhkLGUpfXdoaWxlKGIuZXhwaXJhdGlvblRpbWU9PT1saCl9amguY3VycmVudD1zaDtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O2xoPTA7UD1PPU49bnVsbDttaD0hMTtpZihiKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiB1aCgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gdmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiB3aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5leHBpcmF0aW9uVGltZTtpZihsPGxoKXt2YXIgbT17ZXhwaXJhdGlvblRpbWU6ay5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW0sZj1kKTpoPWgubmV4dD1tO2w+Ti5leHBpcmF0aW9uVGltZSYmXG4oTi5leHBpcmF0aW9uVGltZT1sLEJnKGwpKX1lbHNlIG51bGwhPT1oJiYoaD1oLm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLEFnKGwsay5zdXNwZW5zZUNvbmZpZyksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7JGUoZCxiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTskZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24geWgoYSl7dmFyIGI9dGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6dmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gQmgoKXtyZXR1cm4gdWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIENoKGEsYixjLGQpe3ZhciBlPXRoKCk7Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gRGgoYSxiLGMsZCl7dmFyIGU9dWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZuaChkLGcuZGVwcykpe0FoKGIsYyxmLGQpO3JldHVybn19Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLGYsZCl9ZnVuY3Rpb24gRWgoYSxiKXtyZXR1cm4gQ2goNTE2LDQsYSxiKX1mdW5jdGlvbiBGaChhLGIpe3JldHVybiBEaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEdoKGEsYil7cmV0dXJuIERoKDQsMixhLGIpfVxuZnVuY3Rpb24gSGgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBJaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIERoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBKaCgpe31mdW5jdGlvbiBLaChhLGIpe3RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9ZnVuY3Rpb24gTGgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBNaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBOaChhLGIsYyl7dmFyIGQ9YWcoKTtjZyg5OD5kPzk4OmQsZnVuY3Rpb24oKXthKCEwKX0pO2NnKDk3PGQ/OTc6ZCxmdW5jdGlvbigpe3ZhciBkPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXthKCExKSxjKCl9ZmluYWxseXtraC5zdXNwZW5zZT1kfX0pfVxuZnVuY3Rpb24gemgoYSxiLGMpe3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXtleHBpcmF0aW9uVGltZTpkLHN1c3BlbnNlQ29uZmlnOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGY9Yi5wZW5kaW5nO251bGw9PT1mP2UubmV4dD1lOihlLm5leHQ9Zi5uZXh0LGYubmV4dD1lKTtiLnBlbmRpbmc9ZTtmPWEuYWx0ZXJuYXRlO2lmKGE9PT1OfHxudWxsIT09ZiYmZj09PU4pbWg9ITAsZS5leHBpcmF0aW9uVGltZT1saCxOLmV4cGlyYXRpb25UaW1lPWxoO2Vsc2V7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09Znx8MD09PWYuZXhwaXJhdGlvblRpbWUpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuZWFnZXJSZWR1Y2VyPWY7ZS5lYWdlclN0YXRlPWg7aWYoJGUoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fUlnKGEsXG5kKX19XG52YXIgc2g9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LHBoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpLaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpFaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gQ2goNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQ2goNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz10aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLFxuYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPXRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnloLHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz15aChhKSxkPWNbMF0sZT1jWzFdO0VoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1cbmN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eWgoITEpLGM9YlswXTtiPWJbMV07cmV0dXJuW0toKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHFoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6d2gsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHdoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXdoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVxud2godmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHJoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6eGgsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHhoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXhoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXhoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsXG5iLGEpLFtiLGFdKSxjXX19LE9oPW51bGwsUGg9bnVsbCxRaD0hMTtmdW5jdGlvbiBSaChhLGIpe3ZhciBjPVNoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBUaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVWgoYSl7aWYoUWgpe3ZhciBiPVBoO2lmKGIpe3ZhciBjPWI7aWYoIVRoKGEsYikpe2I9SmQoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFUaChhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO1FoPSExO09oPWE7cmV0dXJufVJoKE9oLGMpfU9oPWE7UGg9SmQoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsUWg9ITEsT2g9YX19ZnVuY3Rpb24gVmgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO09oPWF9XG5mdW5jdGlvbiBXaChhKXtpZihhIT09T2gpcmV0dXJuITE7aWYoIVFoKXJldHVybiBWaChhKSxRaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUdkKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1QaDtiOylSaChhLGIpLGI9SmQoYi5uZXh0U2libGluZyk7VmgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1BZCl7aWYoMD09PWIpe1BoPUpkKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PXpkJiZjIT09Q2QmJmMhPT1CZHx8YisrfWE9YS5uZXh0U2libGluZ31QaD1udWxsfX1lbHNlIFBoPU9oP0pkKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoKXtQaD1PaD1udWxsO1FoPSExfXZhciBZaD1XYS5SZWFjdEN1cnJlbnRPd25lcixyZz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWcoYixudWxsLGMsZCk6WGcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gWmgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3FnKGIsZSk7ZD1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFiaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxjaShhLGIsZyxkLGUsZik7YT1VZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmJmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuICRoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVNnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2koYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmYmYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocmc9ITEsZTxmKT8oYi5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLCRoKGEsYixmKSk6ZGkoYSxiLGMsZCxmKX1mdW5jdGlvbiBlaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGRpKGEsYixjLGQsZSl7dmFyIGY9TChjKT9CZjpKLmN1cnJlbnQ7Zj1DZihiLGYpO3FnKGIsZSk7Yz1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7cWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLExnKGIsYyxkKSxOZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKTt0Zz0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT14O3pnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHx4IT09a3x8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9dGd8fEtnKGIsYyxoLGQseCxrLGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLHZnKGEsYiksaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6aWcoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKSx0Zz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSxnLnN0YXRlPWssemcoYixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUsaCE9PWR8fGshPT14fHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT10Z3x8S2coYixjLGgsZCxrLHgsbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWwsZD1tKTpcbihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gZ2koYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlLGYpe2VpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZIZihiLGMsITEpLCRoKGEsYixmKTtkPWIuc3RhdGVOb2RlO1loLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVhnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WGcoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmSGYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0VmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkVmKGEsYi5jb250ZXh0LCExKTtkaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgaWk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiBqaShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmVWgoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WWcoYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9U2coZCxlKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1YZyhiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1cbmN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVhnKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24ga2koYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3BnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsRXhwaXJhdGlvbj0wLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1IoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYma2koYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpa2koYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShNLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1oaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO2xpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWhoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1saShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6bGkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZCZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVNnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIG5pLG9pLHBpLHFpO1xubmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O29pPWZ1bmN0aW9uKCl7fTtcbnBpPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtjaCgkZy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9emIoZyxmKTtkPXpiKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HYihnLGYpO2Q9R2IoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1JYihnLGYpO2Q9SWIoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1zZCl9b2QoYyxkKTt2YXIgaCxrO2M9bnVsbDtmb3IoaCBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGgpJiZmLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mW2hdKWlmKFwic3R5bGVcIj09PVxuaClmb3IoayBpbiBnPWZbaF0sZylnLmhhc093blByb3BlcnR5KGspJiYoY3x8KGM9e30pLGNba109XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWgmJlwiY2hpbGRyZW5cIiE9PWgmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goaCxudWxsKSk7Zm9yKGggaW4gZCl7dmFyIGw9ZFtoXTtnPW51bGwhPWY/ZltoXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShoKSYmbCE9PWcmJihudWxsIT1sfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1oKWlmKGcpe2ZvcihrIGluIGcpIWcuaGFzT3duUHJvcGVydHkoayl8fGwmJmwuaGFzT3duUHJvcGVydHkoayl8fChjfHwoYz17fSksY1trXT1cIlwiKTtmb3IoayBpbiBsKWwuaGFzT3duUHJvcGVydHkoaykmJmdba10hPT1sW2tdJiYoY3x8KGM9e30pLFxuY1trXT1sW2tdKX1lbHNlIGN8fChhfHwoYT1bXSksYS5wdXNoKGgsYykpLGM9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8obD1sP2wuX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmchPT1sJiYoYT1hfHxbXSkucHVzaChoLGwpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiZyZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7aWYoYi51cGRhdGVRdWV1ZT1lKWIuZWZmZWN0VGFnfD00fX07XG5xaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZWZmZWN0VGFnfD00KX07ZnVuY3Rpb24gcmkoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gc2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDM6cmV0dXJuIGVoKCksSChLKSxIKEopLGM9Yi5zdGF0ZU5vZGUsYy5wZW5kaW5nQ29udGV4dCYmKGMuY29udGV4dD1jLnBlbmRpbmdDb250ZXh0LGMucGVuZGluZ0NvbnRleHQ9bnVsbCksbnVsbCE9PWEmJm51bGwhPT1hLmNoaWxkfHwhV2goYil8fChiLmVmZmVjdFRhZ3w9NCksb2koYiksbnVsbDtjYXNlIDU6Z2goYik7Yz1jaChiaC5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXBpKGEsYixlLGQsYyksYS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xucmV0dXJuIG51bGx9YT1jaCgkZy5jdXJyZW50KTtpZihXaChiKSl7ZD1iLnN0YXRlTm9kZTtlPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtNZF09YjtkW05kXT1mO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPGFjLmxlbmd0aDthKyspRihhY1thXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpBYihkLGYpO0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihkLGYpLEYoXCJpbnZhbGlkXCIsZCkscmQoYyxcIm9uQ2hhbmdlXCIpfW9kKGUsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJihhPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTp2YS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmcmQoYyxnKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoZCk7RWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihkKTtMYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmXG4oZC5vbmNsaWNrPXNkKX1jPWE7Yi51cGRhdGVRdWV1ZT1jO251bGwhPT1jJiYoYi5lZmZlY3RUYWd8PTQpfWVsc2V7Zz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDthPT09cWQmJihhPU5iKGUpKTthPT09cWQ/XCJzY3JpcHRcIj09PWU/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChlLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxlKTthW01kXT1iO2FbTmRdPWQ7bmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9cGQoZSxkKTtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLFxuYSk7aD1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYy5sZW5ndGg7aCsrKUYoYWNbaF0sYSk7aD1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixhKTtGKFwic3VibWl0XCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpBYihhLGQpO2g9emIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD1HYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07aD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGEsXG5kKTtoPUliKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPWR9b2QoZSxoKTt2YXIgaz1oO2ZvcihmIGluIGspaWYoay5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGw9a1tmXTtcInN0eWxlXCI9PT1mP21kKGEsbCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8obD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1sJiZRYihhLGwpKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD8oXCJ0ZXh0YXJlYVwiIT09ZXx8XCJcIiE9PWwpJiZSYihhLGwpOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmUmIoYSxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJih2YS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1sJiZyZChjLGYpOm51bGwhPWwmJlhhKGEsZixsLGcpKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoYSk7RWIoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGEpO0xiKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIityYihkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2M9ZC52YWx1ZTtudWxsIT1jP0hiKGEsISFkLm11bHRpcGxlLGMsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZIYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoYS5vbmNsaWNrPXNkKX1GZChlLGQpJiYoYi5lZmZlY3RUYWd8PTQpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlxaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbmM9Y2goYmguY3VycmVudCk7Y2goJGcuY3VycmVudCk7V2goYik/KGM9Yi5zdGF0ZU5vZGUsZD1iLm1lbW9pemVkUHJvcHMsY1tNZF09YixjLm5vZGVWYWx1ZSE9PWQmJihiLmVmZmVjdFRhZ3w9NCkpOihjPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksY1tNZF09YixiLnN0YXRlTm9kZT1jKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9YyxiO2M9bnVsbCE9PWQ7ZD0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJldoKGIpOihlPWEubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1lLGN8fG51bGw9PT1lfHwoZT1hLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihmPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWY/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9Zik6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PVxuZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpKTtpZihjJiYhZCYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlTPT09dGkmJihTPXVpKTtlbHNle2lmKFM9PT10aXx8Uz09PXVpKVM9dmk7MCE9PXdpJiZudWxsIT09VCYmKHhpKFQsVSkseWkoVCx3aSkpfWlmKGN8fGQpYi5lZmZlY3RUYWd8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG9pKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYiksbnVsbDtjYXNlIDE3OnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDE5OkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZT0wIT09KGIuZWZmZWN0VGFnJjY0KTtmPWQucmVuZGVyaW5nO2lmKG51bGw9PT1mKWlmKGUpcmkoZCwhMSk7ZWxzZXtpZihTIT09dGl8fG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJlxuNjQpKWZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXthPWhoKGYpO2lmKG51bGwhPT1hKXtiLmVmZmVjdFRhZ3w9NjQ7cmkoZCwhMSk7ZT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1lJiYoYi51cGRhdGVRdWV1ZT1lLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2ZvcihkPWIuY2hpbGQ7bnVsbCE9PWQ7KWU9ZCxmPWMsZS5lZmZlY3RUYWcmPTIsZS5uZXh0RWZmZWN0PW51bGwsZS5maXJzdEVmZmVjdD1udWxsLGUubGFzdEVmZmVjdD1udWxsLGE9ZS5hbHRlcm5hdGUsbnVsbD09PWE/KGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGUuZXhwaXJhdGlvblRpbWU9ZixlLmNoaWxkPW51bGwsZS5tZW1vaXplZFByb3BzPW51bGwsZS5tZW1vaXplZFN0YXRlPW51bGwsZS51cGRhdGVRdWV1ZT1udWxsLGUuZGVwZW5kZW5jaWVzPW51bGwpOihlLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lLFxuZS5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLGUuY2hpbGQ9YS5jaGlsZCxlLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzLGUubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGUsZS51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGY9YS5kZXBlbmRlbmNpZXMsZS5kZXBlbmRlbmNpZXM9bnVsbD09PWY/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Zi5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Zi5maXJzdENvbnRleHQscmVzcG9uZGVyczpmLnJlc3BvbmRlcnN9KSxkPWQuc2libGluZztJKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9Zj1mLnNpYmxpbmd9fWVsc2V7aWYoIWUpaWYoYT1oaChmKSxudWxsIT09YSl7aWYoYi5lZmZlY3RUYWd8PTY0LGU9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZWZmZWN0VGFnfD00KSxyaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWYuYWx0ZXJuYXRlKXJldHVybiBiPVxuYi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMiokZigpLWQucmVuZGVyaW5nU3RhcnRUaW1lPmQudGFpbEV4cGlyYXRpb24mJjE8YyYmKGIuZWZmZWN0VGFnfD02NCxlPSEwLHJpKGQsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWMtMSk7ZC5pc0JhY2t3YXJkcz8oZi5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1mKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWY6Yi5jaGlsZD1mLGQubGFzdD1mKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oMD09PWQudGFpbEV4cGlyYXRpb24mJihkLnRhaWxFeHBpcmF0aW9uPSRmKCkrNTAwKSxjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT0kZigpLGMuc2libGluZz1udWxsLGI9TS5jdXJyZW50LEkoTSxlP2ImMXwyOmImMSksYyk6bnVsbH10aHJvdyBFcnJvcih1KDE1NixcbmIudGFnKSk7fWZ1bmN0aW9uIHppKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRGYoKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih1KDI4NSkpO2EuZWZmZWN0VGFnPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBnaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoTSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKE0pLG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBBaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnFiKGIpfX1cbnZhciBCaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBDaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPXFiKGMpKTtudWxsIT09YyYmcGIoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmcGIoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gRGkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe0VpKGEsYyl9fWZ1bmN0aW9uIEZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0VpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEdpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmlnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEhpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuZGVzdHJveTtjLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWQmJmQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIElpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1cbmZ1bmN0aW9uIEppKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpJaSgzLGMpO3JldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmlnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWI9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmQ2coYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1DZyhjLGIsYSl9cmV0dXJuO1xuY2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJjQmJkZkKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmVmMoYykpKSk7cmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gS2koYSxiLGMpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBMaSYmTGkoYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtjZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7RWkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOkZpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJkRpKGIsYyk7YnJlYWs7Y2FzZSA1OkZpKGIpO2JyZWFrO2Nhc2UgNDpNaShhLGIsYyl9fVxuZnVuY3Rpb24gTmkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO251bGwhPT1iJiZOaShiKX1mdW5jdGlvbiBPaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFBpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE9pKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihSYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8T2koYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP1FpKGEsYyxiKTpSaShhLGMsYil9XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9c2QpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBSaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFJpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUmkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gTWkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihLaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihLaShhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gU2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOkhpKDMsYik7cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW05kXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZCYihjLGQpO3BkKGEsZSk7Yj1wZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/bWQoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1FiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9SYihjLGgpOlhhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpDYihjLGQpO2JyZWFrO1xuY2FzZSBcInRleHRhcmVhXCI6S2IoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9IYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SGIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkhiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsVmMoYi5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/XG5kPSExOihkPSEwLGM9Yi5jaGlsZCxUaT0kZigpKTtpZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9bGQoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9XG5mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfVVpKGIpO3JldHVybjtjYXNlIDE5OlVpKGIpO3JldHVybjtjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31mdW5jdGlvbiBVaShhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBCaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVZpLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxudmFyIFdpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFhpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7WWl8fChZaT0hMCxaaT1kKTtDaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uICRpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe0NpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1haj9haj1uZXcgU2V0KFt0aGlzXSk6YWouYWRkKHRoaXMpLENpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIGJqPU1hdGguY2VpbCxjaj1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRqPVdhLlJlYWN0Q3VycmVudE93bmVyLFY9MCxlaj04LGZqPTE2LGdqPTMyLHRpPTAsaGo9MSxpaj0yLHVpPTMsdmk9NCxqaj01LFc9VixUPW51bGwsWD1udWxsLFU9MCxTPXRpLGtqPW51bGwsbGo9MTA3Mzc0MTgyMyxtaj0xMDczNzQxODIzLG5qPW51bGwsd2k9MCxvaj0hMSxUaT0wLHBqPTUwMCxZPW51bGwsWWk9ITEsWmk9bnVsbCxhaj1udWxsLHFqPSExLHJqPW51bGwsc2o9OTAsdGo9bnVsbCx1aj0wLHZqPW51bGwsd2o9MDtmdW5jdGlvbiBHZygpe3JldHVybihXJihmanxnaikpIT09Vj8xMDczNzQxODIxLSgkZigpLzEwfDApOjAhPT13aj93ajp3aj0xMDczNzQxODIxLSgkZigpLzEwfDApfVxuZnVuY3Rpb24gSGcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1hZygpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVyZmaikhPT1WKXJldHVybiBVO2lmKG51bGwhPT1jKWE9aGcoYSxjLnRpbWVvdXRNc3wwfHw1RTMsMjUwKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9aGcoYSwxNTAsMTAwKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT1oZyhhLDVFMywyNTApO2JyZWFrO2Nhc2UgOTU6YT0yO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjYpKTt9bnVsbCE9PVQmJmE9PT1VJiYtLWE7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZyhhLGIpe2lmKDUwPHVqKXRocm93IHVqPTAsdmo9bnVsbCxFcnJvcih1KDE4NSkpO2E9eGooYSxiKTtpZihudWxsIT09YSl7dmFyIGM9YWcoKTsxMDczNzQxODIzPT09Yj8oVyZlaikhPT1WJiYoVyYoZmp8Z2opKT09PVY/eWooYSk6KFooYSksVz09PVYmJmdnKCkpOlooYSk7KFcmNCk9PT1WfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT10aj90aj1uZXcgTWFwKFtbYSxiXV0pOihjPXRqLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmdGouc2V0KGEsYikpKX19XG5mdW5jdGlvbiB4aihhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoVD09PWUmJihCZyhiKSxTPT09dmkmJnhpKGUsVSkpLHlpKGUsYikpO3JldHVybiBlfVxuZnVuY3Rpb24gemooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMCE9PWIpcmV0dXJuIGI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7aWYoIUFqKGEsYikpcmV0dXJuIGI7dmFyIGM9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO2E9Yz5hP2M6YTtyZXR1cm4gMj49YSYmYiE9PWE/MDphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWVnKHlqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj16aihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9R2coKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09VGYmJktmKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9lZyh5ai5iaW5kKG51bGwsYSkpOmRnKGQsQmouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLSRmKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBCaihhLGIpe3dqPTA7aWYoYilyZXR1cm4gYj1HZygpLENqKGEsYiksWihhKSxudWxsO3ZhciBjPXpqKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmM9PT1VfHxFaihhLGMpO2lmKG51bGwhPT1YKXt2YXIgZD1XO1d8PWZqO3ZhciBlPUZqKCk7ZG8gdHJ5e0dqKCk7YnJlYWt9Y2F0Y2goaCl7SGooYSxoKX13aGlsZSgxKTtuZygpO1c9ZDtjai5jdXJyZW50PWU7aWYoUz09PWhqKXRocm93IGI9a2osRWooYSxjKSx4aShhLGMpLFooYSksYjtpZihudWxsPT09WClzd2l0Y2goZT1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1jLGQ9UyxUPW51bGwsZCl7Y2FzZSB0aTpjYXNlIGhqOnRocm93IEVycm9yKHUoMzQ1KSk7Y2FzZSBpajpDaihhLDI8Yz8yOmMpO2JyZWFrO2Nhc2UgdWk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7XG5jPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZigxMDczNzQxODIzPT09bGomJihlPVRpK3BqLSRmKCksMTA8ZSkpe2lmKG9qKXt2YXIgZj1hLmxhc3RQaW5nZWRUaW1lO2lmKDA9PT1mfHxmPj1jKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha319Zj16aihhKTtpZigwIT09ZiYmZiE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxlKTticmVha31KaihhKTticmVhaztjYXNlIHZpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKG9qJiYoZT1hLmxhc3RQaW5nZWRUaW1lLDA9PT1lfHxlPj1jKSl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9ZT16aihhKTtpZigwIT09ZSYmZSE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPVxuZDticmVha30xMDczNzQxODIzIT09bWo/ZD0xMCooMTA3Mzc0MTgyMS1taiktJGYoKToxMDczNzQxODIzPT09bGo/ZD0wOihkPTEwKigxMDczNzQxODIxLWxqKS01RTMsZT0kZigpLGM9MTAqKDEwNzM3NDE4MjEtYyktZSxkPWUtZCwwPmQmJihkPTApLGQ9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqYmooZC8xOTYwKSktZCxjPGQmJihkPWMpKTtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugamo6aWYoMTA3Mzc0MTgyMyE9PWxqJiZudWxsIT09bmope2Y9bGo7dmFyIGc9bmo7ZD1nLmJ1c3lNaW5EdXJhdGlvbk1zfDA7MD49ZD9kPTA6KGU9Zy5idXN5RGVsYXlNc3wwLGY9JGYoKS0oMTAqKDEwNzM3NDE4MjEtZiktKGcudGltZW91dE1zfDB8fDVFMykpLGQ9Zjw9ZT8wOmUrZC1mKTtpZigxMDxkKXt4aShhLGMpO2EudGltZW91dEhhbmRsZT1cbkhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha319SmooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyOSkpO31aKGEpO2lmKGEuY2FsbGJhY2tOb2RlPT09YilyZXR1cm4gQmouYmluZChudWxsLGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHlqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2I9MCE9PWI/YjoxMDczNzQxODIzO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmI9PT1VfHxFaihhLGIpO2lmKG51bGwhPT1YKXt2YXIgYz1XO1d8PWZqO3ZhciBkPUZqKCk7ZG8gdHJ5e0tqKCk7YnJlYWt9Y2F0Y2goZSl7SGooYSxlKX13aGlsZSgxKTtuZygpO1c9Yztjai5jdXJyZW50PWQ7aWYoUz09PWhqKXRocm93IGM9a2osRWooYSxiKSx4aShhLGIpLFooYSksYztpZihudWxsIT09WCl0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VD1udWxsO0pqKGEpO1ooYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTGooKXtpZihudWxsIT09dGope3ZhciBhPXRqO3RqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7Q2ooYyxhKTtaKGMpfSk7Z2coKX19XG5mdW5jdGlvbiBNaihhLGIpe3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fWZ1bmN0aW9uIE5qKGEsYil7dmFyIGM9VztXJj0tMjtXfD1lajt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fVxuZnVuY3Rpb24gRWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsSWQoYykpO2lmKG51bGwhPT1YKWZvcihjPVgucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmRGYoKTticmVhaztjYXNlIDM6ZWgoKTtIKEspO0goSik7YnJlYWs7Y2FzZSA1OmdoKGQpO2JyZWFrO2Nhc2UgNDplaCgpO2JyZWFrO2Nhc2UgMTM6SChNKTticmVhaztjYXNlIDE5OkgoTSk7YnJlYWs7Y2FzZSAxMDpvZyhkKX1jPWMucmV0dXJufVQ9YTtYPVNnKGEuY3VycmVudCxudWxsKTtVPWI7Uz10aTtraj1udWxsO21qPWxqPTEwNzM3NDE4MjM7bmo9bnVsbDt3aT0wO29qPSExfVxuZnVuY3Rpb24gSGooYSxiKXtkb3t0cnl7bmcoKTtqaC5jdXJyZW50PXNoO2lmKG1oKWZvcih2YXIgYz1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWM7KXt2YXIgZD1jLnF1ZXVlO251bGwhPT1kJiYoZC5wZW5kaW5nPW51bGwpO2M9Yy5uZXh0fWxoPTA7UD1PPU49bnVsbDttaD0hMTtpZihudWxsPT09WHx8bnVsbD09PVgucmV0dXJuKXJldHVybiBTPWhqLGtqPWIsWD1udWxsO2E6e3ZhciBlPWEsZj1YLnJldHVybixnPVgsaD1iO2I9VTtnLmVmZmVjdFRhZ3w9MjA0ODtnLmZpcnN0RWZmZWN0PWcubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1oJiZcIm9iamVjdFwiPT09dHlwZW9mIGgmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLnRoZW4pe3ZhciBrPWg7aWYoMD09PShnLm1vZGUmMikpe3ZhciBsPWcuYWx0ZXJuYXRlO2w/KGcudXBkYXRlUXVldWU9bC51cGRhdGVRdWV1ZSxnLm1lbW9pemVkU3RhdGU9bC5tZW1vaXplZFN0YXRlLGcuZXhwaXJhdGlvblRpbWU9bC5leHBpcmF0aW9uVGltZSk6KGcudXBkYXRlUXVldWU9XG5udWxsLGcubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgbT0wIT09KE0uY3VycmVudCYxKSxwPWY7ZG97dmFyIHg7aWYoeD0xMz09PXAudGFnKXt2YXIgej1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXopeD1udWxsIT09ei5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIGNhPXAubWVtb2l6ZWRQcm9wczt4PXZvaWQgMD09PWNhLmZhbGxiYWNrPyExOiEwIT09Y2EudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6bT8hMTohMH19aWYoeCl7dmFyIEQ9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09RCl7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtwLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBELmFkZChrKTtpZigwPT09KHAubW9kZSYyKSl7cC5lZmZlY3RUYWd8PTY0O2cuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09Zy50YWcpaWYobnVsbD09PWcuYWx0ZXJuYXRlKWcudGFnPTE3O2Vsc2V7dmFyIHk9d2coMTA3Mzc0MTgyMyxudWxsKTt5LnRhZz0yO3hnKGcseSl9Zy5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO1xuYnJlYWsgYX1oPXZvaWQgMDtnPWI7dmFyIEE9ZS5waW5nQ2FjaGU7bnVsbD09PUE/KEE9ZS5waW5nQ2FjaGU9bmV3IFdpLGg9bmV3IFNldCxBLnNldChrLGgpKTooaD1BLmdldChrKSx2b2lkIDA9PT1oJiYoaD1uZXcgU2V0LEEuc2V0KGssaCkpKTtpZighaC5oYXMoZykpe2guYWRkKGcpO3ZhciBxPU9qLmJpbmQobnVsbCxlLGssZyk7ay50aGVuKHEscSl9cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7aD1FcnJvcigocGIoZy50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK3FiKGcpKX1TIT09XG5qaiYmKFM9aWopO2g9QWkoaCxnKTtwPWY7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6az1oO3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgQj1YaShwLGssYik7eWcocCxCKTticmVhayBhO2Nhc2UgMTprPWg7dmFyIHc9cC50eXBlLHViPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dWImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yi5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyh1YikpKSl7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciB2Yj0kaShwLGssYik7eWcocCx2Yik7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WD1QaihYKX1jYXRjaChYYyl7Yj1YYztjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIEZqKCl7dmFyIGE9Y2ouY3VycmVudDtjai5jdXJyZW50PXNoO3JldHVybiBudWxsPT09YT9zaDphfWZ1bmN0aW9uIEFnKGEsYil7YTxsaiYmMjxhJiYobGo9YSk7bnVsbCE9PWImJmE8bWomJjI8YSYmKG1qPWEsbmo9Yil9ZnVuY3Rpb24gQmcoYSl7YT53aSYmKHdpPWEpfWZ1bmN0aW9uIEtqKCl7Zm9yKDtudWxsIT09WDspWD1RaihYKX1mdW5jdGlvbiBHaigpe2Zvcig7bnVsbCE9PVgmJiFVZigpOylYPVFqKFgpfWZ1bmN0aW9uIFFqKGEpe3ZhciBiPVJqKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1QaihhKSk7ZGouY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gUGooYSl7WD1hO2Rve3ZhciBiPVguYWx0ZXJuYXRlO2E9WC5yZXR1cm47aWYoMD09PShYLmVmZmVjdFRhZyYyMDQ4KSl7Yj1zaShiLFgsVSk7aWYoMT09PVV8fDEhPT1YLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Zvcih2YXIgYz0wLGQ9WC5jaGlsZDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWUsZj1kLmNoaWxkRXhwaXJhdGlvblRpbWU7ZT5jJiYoYz1lKTtmPmMmJihjPWYpO2Q9ZC5zaWJsaW5nfVguY2hpbGRFeHBpcmF0aW9uVGltZT1jfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVguZmlyc3RFZmZlY3QpLG51bGwhPT1YLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WC5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVgubGFzdEVmZmVjdCksMTxYLmVmZmVjdFRhZyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YOmEuZmlyc3RFZmZlY3Q9WCxhLmxhc3RFZmZlY3Q9WCkpfWVsc2V7Yj16aShYKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9WC5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1g9YX13aGlsZShudWxsIT09WCk7Uz09PXRpJiYoUz1qaik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSWooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBKaihhKXt2YXIgYj1hZygpO2NnKDk5LFNqLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG8gRGooKTt3aGlsZShudWxsIT09cmopO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih1KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7YS5jYWxsYmFja1ByaW9yaXR5PTkwO2EubmV4dEtub3duUGVuZGluZ0xldmVsPTA7dmFyIGU9SWooYyk7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZDw9YS5sYXN0U3VzcGVuZGVkVGltZT9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6ZDw9YS5maXJzdFN1c3BlbmRlZFRpbWUmJihhLmZpcnN0U3VzcGVuZGVkVGltZT1cbmQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7ZDw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKTthPT09VCYmKFg9VD1udWxsLFU9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZSl7dmFyIGY9VztXfD1najtkai5jdXJyZW50PW51bGw7RGQ9ZmQ7dmFyIGc9eGQoKTtpZih5ZChnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyl2YXIgaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7aD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7aD1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsXG5tPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxtLm5vZGVUeXBlfWNhdGNoKHdiKXtoPW51bGw7YnJlYWsgYX12YXIgcD0wLHg9LTEsej0tMSxjYT0wLEQ9MCx0PWcseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEE7Oyl7dCE9PWh8fDAhPT1sJiYzIT09dC5ub2RlVHlwZXx8KHg9cCtsKTt0IT09bXx8MCE9PWsmJjMhPT10Lm5vZGVUeXBlfHwoej1wK2spOzM9PT10Lm5vZGVUeXBlJiYocCs9dC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEE9dC5maXJzdENoaWxkKSlicmVhazt5PXQ7dD1BfWZvcig7Oyl7aWYodD09PWcpYnJlYWsgYjt5PT09aCYmKytjYT09PWwmJih4PXApO3k9PT1tJiYrK0Q9PT1rJiYoej1wKTtpZihudWxsIT09KEE9dC5uZXh0U2libGluZykpYnJlYWs7dD15O3k9dC5wYXJlbnROb2RlfXQ9QX1oPS0xPT09eHx8LTE9PT16P251bGw6e3N0YXJ0OngsZW5kOnp9fWVsc2UgaD1udWxsfWg9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1cbm51bGw7RWQ9e2FjdGl2ZUVsZW1lbnREZXRhY2hlZDpudWxsLGZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7WT1lO2RvIHRyeXtUaigpfWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihnPWEsaD1iO251bGwhPT1ZOyl7dmFyIHE9WS5lZmZlY3RUYWc7cSYxNiYmUmIoWS5zdGF0ZU5vZGUsXCJcIik7aWYocSYxMjgpe3ZhciBCPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1CKXt2YXIgdz1CLnJlZjtudWxsIT09dyYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3P3cobnVsbCk6dy5jdXJyZW50PW51bGwpfX1zd2l0Y2gocSYxMDM4KXtjYXNlIDI6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSAxMDI0OlkuZWZmZWN0VGFnJj0tMTAyNTticmVhaztjYXNlIDEwMjg6WS5lZmZlY3RUYWcmPVxuLTEwMjU7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0OlNpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpsPVksTWkoZyxsLGgpLE5pKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dz1FZDtCPXhkKCk7cT13LmZvY3VzZWRFbGVtO2g9dy5zZWxlY3Rpb25SYW5nZTtpZihCIT09cSYmcSYmcS5vd25lckRvY3VtZW50JiZ3ZChxLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHEpKXtudWxsIT09aCYmeWQocSkmJihCPWguc3RhcnQsdz1oLmVuZCx2b2lkIDA9PT13JiYodz1CKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBxPyhxLnNlbGVjdGlvblN0YXJ0PUIscS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odyxxLnZhbHVlLmxlbmd0aCkpOih3PShCPXEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZCLmRlZmF1bHRWaWV3fHx3aW5kb3csdy5nZXRTZWxlY3Rpb24mJlxuKHc9dy5nZXRTZWxlY3Rpb24oKSxsPXEudGV4dENvbnRlbnQubGVuZ3RoLGc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXcuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD12ZChxLGcpLG09dmQocSxoKSxsJiZtJiYoMSE9PXcucmFuZ2VDb3VudHx8dy5hbmNob3JOb2RlIT09bC5ub2RlfHx3LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx3LmZvY3VzTm9kZSE9PW0ubm9kZXx8dy5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKEI9Qi5jcmVhdGVSYW5nZSgpLEIuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx3LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8ody5hZGRSYW5nZShCKSx3LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKTooQi5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx3LmFkZFJhbmdlKEIpKSkpKSk7Qj1bXTtmb3Iodz1xO3c9dy5wYXJlbnROb2RlOykxPT09dy5ub2RlVHlwZSYmQi5wdXNoKHtlbGVtZW50OncsbGVmdDp3LnNjcm9sbExlZnQsXG50b3A6dy5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgcS5mb2N1cyYmcS5mb2N1cygpO2ZvcihxPTA7cTxCLmxlbmd0aDtxKyspdz1CW3FdLHcuZWxlbWVudC5zY3JvbGxMZWZ0PXcubGVmdCx3LmVsZW1lbnQuc2Nyb2xsVG9wPXcudG9wfWZkPSEhRGQ7RWQ9RGQ9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihxPWE7bnVsbCE9PVk7KXt2YXIgdWI9WS5lZmZlY3RUYWc7dWImMzYmJkppKHEsWS5hbHRlcm5hdGUsWSk7aWYodWImMTI4KXtCPXZvaWQgMDt2YXIgdmI9WS5yZWY7aWYobnVsbCE9PXZiKXt2YXIgWGM9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6Qj1YYzticmVhaztkZWZhdWx0OkI9WGN9XCJmdW5jdGlvblwiPT09dHlwZW9mIHZiP3ZiKEIpOnZiLmN1cnJlbnQ9Qn19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPVxubnVsbDtWZigpO1c9Zn1lbHNlIGEuY3VycmVudD1jO2lmKHFqKXFqPSExLHJqPWEsc2o9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmKGFqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT12aj91aisrOih1aj0wLHZqPWEpOnVqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIFVqJiZVaihjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKFlpKXRocm93IFlpPSExLGE9WmksWmk9bnVsbCxhO2lmKChXJmVqKSE9PVYpcmV0dXJuIG51bGw7Z2coKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBUaigpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzswIT09KGEmMjU2KSYmR2koWS5hbHRlcm5hdGUsWSk7MD09PShhJjUxMil8fHFqfHwocWo9ITAsZGcoOTcsZnVuY3Rpb24oKXtEaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIERqKCl7aWYoOTAhPT1zail7dmFyIGE9OTc8c2o/OTc6c2o7c2o9OTA7cmV0dXJuIGNnKGEsVmopfX1mdW5jdGlvbiBWaigpe2lmKG51bGw9PT1yailyZXR1cm4hMTt2YXIgYT1yajtyaj1udWxsO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMzMSkpO3ZhciBiPVc7V3w9Z2o7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOkhpKDUsYyksSWkoNSxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMzApKTtFaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31XPWI7Z2coKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFdqKGEsYixjKXtiPUFpKGMsYik7Yj1YaShhLGIsMTA3Mzc0MTgyMyk7eGcoYSxiKTthPXhqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9ZnVuY3Rpb24gRWkoYSxiKXtpZigzPT09YS50YWcpV2ooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtXaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyhkKSkpe2E9QWkoYixhKTthPSRpKGMsYSwxMDczNzQxODIzKTt4ZyhjLGEpO2M9eGooYywxMDczNzQxODIzKTtudWxsIT09YyYmWihjKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBPaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1Q9PT1hJiZVPT09Yz9TPT09dml8fFM9PT11aSYmMTA3Mzc0MTgyMz09PWxqJiYkZigpLVRpPHBqP0VqKGEsVSk6b2o9ITA6QWooYSxjKSYmKGI9YS5sYXN0UGluZ2VkVGltZSwwIT09YiYmYjxjfHwoYS5sYXN0UGluZ2VkVGltZT1jLFooYSkpKX1mdW5jdGlvbiBWaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPUdnKCksYj1IZyhiLGEsbnVsbCkpO2E9eGooYSxiKTtudWxsIT09YSYmWihhKX12YXIgUmo7XG5Saj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KXJnPSEwO2Vsc2V7aWYoZDxjKXtyZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpoaShiKTtYaCgpO2JyZWFrO2Nhc2UgNTpmaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmR2YoYik7YnJlYWs7Y2FzZSA0OmRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtlPWIudHlwZS5fY29udGV4dDtJKGpnLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtcbmlmKDAhPT1kJiZkPj1jKXJldHVybiBqaShhLGIsYyk7SShNLE0uY3VycmVudCYxKTtiPSRoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SShNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBtaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCk7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuICRoKGEsYixjKX1yZz0hMX19ZWxzZSByZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1DZihiLEouY3VycmVudCk7cWcoYixjKTtlPW9oKG51bGwsXG5iLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoTChkKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dWcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkZnKGIsZCxnLGEpO2UudXBkYXRlcj1KZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO05nKGIsZCxhLGMpO2I9Z2kobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjphOntlPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1cbm51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztvYihlKTtpZigxIT09ZS5fc3RhdHVzKXRocm93IGUuX3Jlc3VsdDtlPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPVhqKGUpO2E9aWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9ZGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPWZpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmgobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haShudWxsLGIsZSxpZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZmkoYSxiLGQsZSxjKTtcbmNhc2UgMzpoaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3ZnKGEsYik7emcoYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlYaCgpLGI9JGgoYSxiLGMpO2Vsc2V7aWYoZT1iLnN0YXRlTm9kZS5oeWRyYXRlKVBoPUpkKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksT2g9YixlPVFoPSEwO2lmKGUpZm9yKGM9WWcoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZWZmZWN0VGFnPWMuZWZmZWN0VGFnJi0zfDEwMjQsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLFhoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZmgoYiksbnVsbD09PWEmJlVoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5udWxsLGc9ZS5jaGlsZHJlbixHZChkLGUpP2c9bnVsbDpudWxsIT09ZiYmR2QoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksZWkoYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJlVoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gamkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WGcoYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksWmgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsXG5iLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKGpnLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9JGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj0kaChhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09XG5rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD13ZyhjLG51bGwpLGwudGFnPTIseGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3BnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9XG5nfVIoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4scWcoYixjKSxlPXNnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1pZyhlLGIucGVuZGluZ1Byb3BzKSxmPWlnKGUudHlwZSxmKSxhaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gY2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxHZihiKSk6YT0hMSxxZyhiLGMpLExnKGIsZCxlKSxOZyhiLGQsZSxjKSxnaShudWxsLFxuYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fTt2YXIgVWo9bnVsbCxMaT1udWxsO2Z1bmN0aW9uIFlqKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1VqPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O0xpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gWmooYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBTaChhLGIsYyxkKXtyZXR1cm4gbmV3IFpqKGEsYixjLGQpfVxuZnVuY3Rpb24gYmkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBYaihhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdiKXJldHVybiAxMTtpZihhPT09amIpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1TaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFVnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm4gV2coYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYjpnPTg7ZXw9NzticmVhaztjYXNlIGJiOmc9ODtlfD0xO2JyZWFrO2Nhc2UgY2I6cmV0dXJuIGE9U2goMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1jYixhLnR5cGU9Y2IsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYjpyZXR1cm4gYT1TaCgxMyxjLGIsZSksYS50eXBlPWhiLGEuZWxlbWVudFR5cGU9aGIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBpYjpyZXR1cm4gYT1TaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1pYixhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGI6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBlYjpnPTk7YnJlYWsgYTtjYXNlIGdiOmc9MTE7YnJlYWsgYTtjYXNlIGpiOmc9MTQ7YnJlYWsgYTtjYXNlIGtiOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBsYjpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1TaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFdnKGEsYixjLGQpe2E9U2goNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIFRnKGEsYixjKXthPVNoKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFZnKGEsYixjKXtiPVNoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIEFqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24geWkoYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBDaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIGJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUdnKCksZz1EZy5zdXNwZW5zZTtmPUhnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGRjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9RmYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9QWY7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj13ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO3hnKGUsYik7SWcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBjayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiBlayhhLGIpe2RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZkayhhLGIpfVxuZnVuY3Rpb24gZmsoYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IGFrKGEsYixjKSxlPVNoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO3VnKGUpO2FbT2RdPWQuY3VycmVudDtjJiYwIT09YiYmSmMoYSw5PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudCk7dGhpcy5faW50ZXJuYWxSb290PWR9ZmsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtiayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtmay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztiayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbT2RdPW51bGx9KX07XG5mdW5jdGlvbiBnayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gaGsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBmayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIGlrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7aC5jYWxsKGEpfX1iayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWhrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2suY2FsbChhKX19TmooZnVuY3Rpb24oKXtiayhiLGcsYSxlKX0pfXJldHVybiBjayhnKX1mdW5jdGlvbiBqayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxud2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aGcoR2coKSwxNTAsMTAwKTtJZyhhLGIpO2VrKGEsYil9fTt4Yz1mdW5jdGlvbihhKXsxMz09PWEudGFnJiYoSWcoYSwzKSxlayhhLDMpKX07eWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9R2coKTtiPUhnKGIsYSxudWxsKTtJZyhhLGIpO2VrKGEsYil9fTtcbnphPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Q2IoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVFkKGQpO2lmKCFlKXRocm93IEVycm9yKHUoOTApKTt5YihkKTtDYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2IoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhiKGEsISFjLm11bHRpcGxlLGIsITEpfX07RmE9TWo7XG5HYT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVc7V3w9NDt0cnl7cmV0dXJuIGNnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1c9ZixXPT09ViYmZ2coKX19O0hhPWZ1bmN0aW9uKCl7KFcmKDF8Zmp8Z2opKT09PVYmJihMaigpLERqKCkpfTtJYT1mdW5jdGlvbihhLGIpe3ZhciBjPVc7V3w9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fTtmdW5jdGlvbiBrayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBqayhhLGIsbnVsbCxjKX12YXIgbGs9e0V2ZW50czpbTmMsUGQsUWQseGEsdGEsWGQsZnVuY3Rpb24oYSl7amMoYSxXZCl9LERhLEVhLGlkLG1jLERqLHtjdXJyZW50OiExfV19O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFlqKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjEzLjFcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9bGs7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9a2s7ZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IodSgxODgpKTt0aHJvdyBFcnJvcih1KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWhjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07XG5leHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGNnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1c9YyxnZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITAsYyl9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITEsYyl9O1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFnayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oTmooZnVuY3Rpb24oKXtpayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbT2RdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1NajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiBrayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWdrKGMpKXRocm93IEVycm9yKHUoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IEVycm9yKHUoMzgpKTtyZXR1cm4gaWsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjEzLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTkuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBBPXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpfWlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiB3JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQj14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQn19dmFyIEM9ITEsRD1udWxsLEU9LTEsRj01LEc9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpGPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgSD1uZXcgTWVzc2FnZUNoYW5uZWwsST1ILnBvcnQyO0gucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtHPWErRjt0cnl7RCghMCxhKT9JLnBvc3RNZXNzYWdlKG51bGwpOihDPSExLEQ9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBDPSExfTtmPWZ1bmN0aW9uKGEpe0Q9YTtDfHwoQz0hMCxJLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0U9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihFKTtFPS0xfX1mdW5jdGlvbiBKKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEsoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEwoYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE0oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SyhuLGMpKXZvaWQgMCE9PXImJjA+SyhyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SyhyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTj1bXSxPPVtdLFA9MSxRPW51bGwsUj0zLFM9ITEsVD0hMSxVPSExO1xuZnVuY3Rpb24gVihhKXtmb3IodmFyIGI9TChPKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU0oTyk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlNKE8pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSihOLGIpO2Vsc2UgYnJlYWs7Yj1MKE8pfX1mdW5jdGlvbiBXKGEpe1U9ITE7VihhKTtpZighVClpZihudWxsIT09TChOKSlUPSEwLGYoWCk7ZWxzZXt2YXIgYj1MKE8pO251bGwhPT1iJiZnKFcsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWChhLGIpe1Q9ITE7VSYmKFU9ITEsaCgpKTtTPSEwO3ZhciBjPVI7dHJ5e1YoYik7Zm9yKFE9TChOKTtudWxsIT09USYmKCEoUS5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1RLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtRLmNhbGxiYWNrPW51bGw7Uj1RLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChRLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/US5jYWxsYmFjaz1lOlE9PT1MKE4pJiZNKE4pO1YoYil9ZWxzZSBNKE4pO1E9TChOKX1pZihudWxsIT09USl2YXIgbT0hMDtlbHNle3ZhciBuPUwoTyk7bnVsbCE9PW4mJmcoVyxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7UT1udWxsLFI9YyxTPSExfX1cbmZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgWj1sO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtUfHxTfHwoVD0hMCxmKFgpKX07XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFJ9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTChOKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChSKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1SfXZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Uj1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9WjtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVI7Uj1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGU9Yy5kZWxheTtlPVwibnVtYmVyXCI9PT10eXBlb2YgZSYmMDxlP2QrZTpkO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlkoYSl9ZWxzZSBjPVkoYSksZT1kO2M9ZStjO2E9e2lkOlArKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6ZSxleHBpcmF0aW9uVGltZTpjLHNvcnRJbmRleDotMX07ZT5kPyhhLnNvcnRJbmRleD1lLEooTyxhKSxudWxsPT09TChOKSYmYT09PUwoTykmJihVP2goKTpVPSEwLGcoVyxlLWQpKSk6KGEuc29ydEluZGV4PWMsSihOLGEpLFR8fFN8fChUPSEwLGYoWCkpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtWKGEpO3ZhciBiPUwoTik7cmV0dXJuIGIhPT1RJiZudWxsIT09USYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxRLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1I9Y319fTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5XCIpO1xuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5OyIsInZhciBhcnJheUxpa2VUb0FycmF5ID0gcmVxdWlyZShcIi4vYXJyYXlMaWtlVG9BcnJheVwiKTtcblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXk7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bywgZnJvbSkge1xuICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSBmcm9tID0gJyc7XG5cbiAgdmFyIHRvUGFydHMgPSAodG8gJiYgdG8uc3BsaXQoJy8nKSkgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSAoZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2g7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG5cbiAgaWYgKFxuICAgIG11c3RFbmRBYnMgJiZcbiAgICBmcm9tUGFydHNbMF0gIT09ICcnICYmXG4gICAgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSlcbiAgKVxuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBoaXN0b3J5Q29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKTtcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0JDEgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0JDEoXCJSb3V0ZXJcIik7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07IC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSBoYXZlIHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgbG9jYXRpb25cbiAgICAvLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuICAgIC8vIG9uIHRoZSBpbml0aWFsIHJlbmRlci4gSWYgdGhlcmUgYXJlLCB0aGV5IHdpbGwgcmVwbGFjZS9wdXNoIHdoZW5cbiAgICAvLyB0aGV5IG1vdW50IGFuZCBzaW5jZSBjRE0gZmlyZXMgaW4gY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMsIHdlIG1heVxuICAgIC8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5cbiAgICBfdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIF90aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3RlbikgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KGhpc3RvcnlDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsLFxuICAgICAgdmFsdWU6IHRoaXMucHJvcHMuaGlzdG9yeVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2UHJvcHMuaGlzdG9yeSA9PT0gdGhpcy5wcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZU1lbW9yeUhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNZW1vcnlSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgTGlmZWN5Y2xlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExpZmVjeWNsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlmZWN5Y2xlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaWZlY3ljbGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91bnQpIHRoaXMucHJvcHMub25Nb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVW5tb3VudCkgdGhpcy5wcm9wcy5vblVubW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBMaWZlY3ljbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5IGZyb20gYSBzY3JlZW4uXG4gKi9cblxuZnVuY3Rpb24gUHJvbXB0KF9yZWYpIHtcbiAgdmFyIG1lc3NhZ2UgPSBfcmVmLm1lc3NhZ2UsXG4gICAgICBfcmVmJHdoZW4gPSBfcmVmLndoZW4sXG4gICAgICB3aGVuID0gX3JlZiR3aGVuID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiR3aGVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0LnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5tZXNzYWdlICE9PSBtZXNzYWdlKSB7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Vbm1vdW50OiBmdW5jdGlvbiBvblVubW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSk7XG4gIFByb21wdC5wcm9wVHlwZXMgPSB7XG4gICAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWVzc2FnZTogbWVzc2FnZVR5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG4gIHZhciBnZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXRoKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXRoXSA9IGdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdG9yO1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFwiL1wiO1xuICB9XG5cbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7XG4gICAgcHJldHR5OiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSZWRpcmVjdChfcmVmKSB7XG4gIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgX3JlZiRwdXNoID0gX3JlZi5wdXNoLFxuICAgICAgcHVzaCA9IF9yZWYkcHVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHB1c2g7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IGNvbnRleHQuc3RhdGljQ29udGV4dDtcbiAgICB2YXIgbWV0aG9kID0gcHVzaCA/IGhpc3RvcnkucHVzaCA6IGhpc3RvcnkucmVwbGFjZTtcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihjb21wdXRlZE1hdGNoID8gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcykgOiBfZXh0ZW5kcyh7fSwgdG8sIHtcbiAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgIH0pIDogdG8pOyAvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuICAgIC8vIHNldCB0aGUgbmV3IGxvY2F0aW9uIGltbWVkaWF0ZWx5LlxuXG4gICAgaWYgKHN0YXRpY0NvbnRleHQpIHtcbiAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSAhPT0gdW5kZWZpbmVkLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQxKSB7XG4gICAgICAhY29udGV4dCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JDEubG9jYXRpb247XG4gICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoID8gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcbiAgICAgIDogX3RoaXMucHJvcHMucGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX3RoaXMucHJvcHMpIDogY29udGV4dCQxLm1hdGNoO1xuXG4gICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCQxLCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IG1hdGNoXG4gICAgICB9KTtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHMucmVuZGVyOyAvLyBQcmVhY3QgdXNlcyBhbiBlbXB0eSBhcnJheSBhcyBjaGlsZHJlbiBieVxuICAgICAgLy8gZGVmYXVsdCwgc28gdXNlIG51bGwgaWYgdGhhdCdzIHRoZSBjYXNlLlxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIHByb3BzLm1hdGNoID8gY2hpbGRyZW4gPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogY2hpbGRyZW4gOiBjb21wb25lbnQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogcmVuZGVyID8gcmVuZGVyKHByb3BzKSA6IG51bGwgOiB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogbnVsbCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5jb21wb25lbnQpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cblxudmFyIFN0YXRpY1JvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlBVU0hcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlJFUExBQ0VcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3RhdGljUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubmF2aWdhdGVUbyA9IGZ1bmN0aW9uIG5hdmlnYXRlVG8obG9jYXRpb24sIGFjdGlvbikge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wcyRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcyRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzJGNvbnRleHQ7XG4gICAgY29udGV4dC5hY3Rpb24gPSBhY3Rpb247XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzMiRiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wczIkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzMiRjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczIkY29udGV4dCxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyLmxvY2F0aW9uLFxuICAgICAgICBsb2NhdGlvbiA9IF90aGlzJHByb3BzMiRsb2NhdGlvbiA9PT0gdm9pZCAwID8gXCIvXCIgOiBfdGhpcyRwcm9wczIkbG9jYXRpb24sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgICAgfSxcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaGlzdG9yeTogaGlzdG9yeSxcbiAgICAgIHN0YXRpY0NvbnRleHQ6IGNvbnRleHRcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTd2l0Y2gucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjaGlsZDtcbiAgICAgICAgICB2YXIgcGF0aCA9IGNoaWxkLnByb3BzLnBhdGggfHwgY2hpbGQucHJvcHMuZnJvbTtcbiAgICAgICAgICBtYXRjaCA9IHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF9leHRlbmRzKHt9LCBjaGlsZC5wcm9wcywge1xuICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICAgIH0pKSA6IGNvbnRleHQubWF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBjb21wdXRlZE1hdGNoOiBtYXRjaFxuICAgICAgfSkgOiBudWxsO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cblxuZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcblxuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgY29udGV4dCwge1xuICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgQy5wcm9wVHlwZXMgPSB7XG4gICAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn1cblxudmFyIHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0O1xuZnVuY3Rpb24gdXNlSGlzdG9yeSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUhpc3RvcnkoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChoaXN0b3J5Q29udGV4dCk7XG59XG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUxvY2F0aW9uKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkubG9jYXRpb247XG59XG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VQYXJhbXMoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaC5wYXJhbXMgOiB7fTtcbn1cbmZ1bmN0aW9uIHVzZVJvdXRlTWF0Y2gocGF0aCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBwYXRoKSA6IG1hdGNoO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBcImVzbVwiKSB7XG4gICAgICB2YXIgaW5pdGlhbEJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbZ2xvYmFsW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gXCJlc21cIjtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBoaXN0b3J5Q29udGV4dCBhcyBfX0hpc3RvcnlDb250ZXh0LCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci5qcy5tYXBcbiIsImltcG9ydCB7IFJvdXRlciwgX19Sb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTG9jYXRpb24gfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlQnJvd3Nlckhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCcm93c2VyUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBCcm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhhc2hIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSGFzaFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgcmVzb2x2ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiByZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwiZnVuY3Rpb25cIiA/IHRvKGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG52YXIgbm9ybWFsaXplVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG5cbnZhciBmb3J3YXJkUmVmU2hpbSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbnZhciBMaW5rQW5jaG9yID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBuYXZpZ2F0ZSA9IF9yZWYubmF2aWdhdGUsXG4gICAgICBfb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpbm5lclJlZlwiLCBcIm5hdmlnYXRlXCIsIFwib25DbGlja1wiXSk7XG5cbiAgdmFyIHRhcmdldCA9IHJlc3QudGFyZ2V0O1xuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vbkNsaWNrKSBfb25DbGljayhldmVudCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG5hdmlnYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgfSBlbHNlIHtcbiAgICBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgfVxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50ICovXG5cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgcHJvcHMpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGlua0FuY2hvci5kaXNwbGF5TmFtZSA9IFwiTGlua0FuY2hvclwiO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuXG52YXIgTGluayA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYyJGNvbXBvbmVudCA9IF9yZWYyLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9yZWYyJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gTGlua0FuY2hvciA6IF9yZWYyJGNvbXBvbmVudCxcbiAgICAgIHJlcGxhY2UgPSBfcmVmMi5yZXBsYWNlLFxuICAgICAgdG8gPSBfcmVmMi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZjIuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImNvbXBvbmVudFwiLCBcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5O1xuICAgIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB2YXIgaHJlZiA9IGxvY2F0aW9uID8gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKSA6IFwiXCI7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG5hdmlnYXRlOiBmdW5jdGlvbiBuYXZpZ2F0ZSgpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pO1xuICAgICAgICB2YXIgbWV0aG9kID0gcmVwbGFjZSA/IGhpc3RvcnkucmVwbGFjZSA6IGhpc3RvcnkucHVzaDtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic2Vuc2l0aXZlXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxOYXZMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvblByb3AgfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbiksIGN1cnJlbnRMb2NhdGlvbik7XG4gICAgdmFyIHBhdGggPSB0b0xvY2F0aW9uLnBhdGhuYW1lOyAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuXG4gICAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcbiAgICB2YXIgbWF0Y2ggPSBlc2NhcGVkUGF0aCA/IG1hdGNoUGF0aChjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIHtcbiAgICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgICAgZXhhY3Q6IGV4YWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmUsXG4gICAgICBzdHJpY3Q6IHN0cmljdFxuICAgIH0pIDogbnVsbDtcbiAgICB2YXIgaXNBY3RpdmUgPSAhIShpc0FjdGl2ZVByb3AgPyBpc0FjdGl2ZVByb3AobWF0Y2gsIGN1cnJlbnRMb2NhdGlvbikgOiBtYXRjaCk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IGlzQWN0aXZlID8gam9pbkNsYXNzbmFtZXMoY2xhc3NOYW1lUHJvcCwgYWN0aXZlQ2xhc3NOYW1lKSA6IGNsYXNzTmFtZVByb3A7XG4gICAgdmFyIHN0eWxlID0gaXNBY3RpdmUgPyBfZXh0ZW5kcyh7fSwgc3R5bGVQcm9wLCB7fSwgYWN0aXZlU3R5bGUpIDogc3R5bGVQcm9wO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdG86IHRvTG9jYXRpb25cbiAgICB9LCByZXN0KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSQxICE9PSBmb3J3YXJkUmVmJDEpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xuICB2YXIgYXJpYUN1cnJlbnRUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFtcInBhZ2VcIiwgXCJzdGVwXCIsIFwibG9jYXRpb25cIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcInRydWVcIl0pO1xuICBOYXZMaW5rLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBMaW5rLnByb3BUeXBlcywge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50VHlwZSxcbiAgICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XHJcblxyXG5jb25zdCBCYXNpY0FwcFByZXNlbnQgPSAoe1xyXG4gIGNsaWNrVGltZXMsXHJcbiAga2V5UHJlc3NUaW1lcyxcclxuICBwcmVzc2VkS2V5LFxyXG4gIHNlY3JldEtleSxcclxuICBoYW5kbGVGaWVsZENoYW5nZSxcclxufSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTEgbWItNSBwdC01IHBiLTUgcGwtNCB0ZXh0LWRhcmtcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXByaW1hcnkgbWItM1wiPlxyXG4gICAgICAgIDxoMj5TZWNyZXQga2V5IGd1ZXNzIGdhbWUhPC9oMj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtc2Vjb25kYXJ5XCI+XHJcbiAgICAgICAgICBCYXNpYyBSZWFjdEpTIGV4YW1wbGU6IHVzaW5nIFJlYWN0IHN0YXRlIGFuZCBjb21wb25lbnRzIG9ubHlcclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtZGFuZ2VyIG0tM1wiPlxyXG4gICAgICAgICAge3NlY3JldEtleVxyXG4gICAgICAgICAgICA/IFwiU2VjcmV0IGtleSBwcmVzc2VkLCBHYW1lIHN0YXJ0IG5vdyFcIlxyXG4gICAgICAgICAgICA6IFwiRmlyc3QgcGVyc29uOiBQcmVzcyBhIHNlY3JldCBrZXkgZmlyc3QhXCJ9XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1zdWNjZXNzXCI+XHJcbiAgICAgICAgICBTZWNvbmQgcGVyc29uOiBUcnkgdG8gZ3Vlc3Mgd2hhdCBpcyB0aGUgc2VjcmV0IGtleSBieSBwcmVzcyBvdGhlciBrZXlzXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICB7c2VjcmV0S2V5ID09PSBwcmVzc2VkS2V5ICYmIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtZGFuZ2VyXCI+Q29uZ3JhdHVsYXRpb24sIHlvdSB3b24hPC9oMz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1zdWNjZXNzXCI+XHJcbiAgICAgICAgICAgIFlvdSd2ZSB0cmllZCB7a2V5UHJlc3NUaW1lc30gdGltZXMsIHlvdXIgc2NvcmUgaXN7XCIgXCJ9XHJcbiAgICAgICAgICAgIHsxMDAgLSAoa2V5UHJlc3NUaW1lcyAtIDEpICogMn0vMTAwXHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIFByZXNzIEVzYyBrZXkgdG8gc3RhcnQgdGhlIGdhbWUgYWdhaW4hIG9yXHJcbiAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlRmllbGRDaGFuZ2V9XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tc3VjY2VzcyBtdC0zICBidG4tc21cIlxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICBDbGljayBoZXJlIHRvIHJlc3RhcnRcclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDwvPlxyXG4gICAgICApfVxyXG4gICAgICB7c2VjcmV0S2V5ICYmIHNlY3JldEtleSAhPT0gcHJlc3NlZEtleSAmJiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIFByZXNzZWQgS2V5OiA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWRhbmdlciBtci0zXCI+e3ByZXNzZWRLZXl9PC9zcGFuPlxyXG4gICAgICAgICAgS2V5IFByZXNzIFRpbWVzOiA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWRhbmdlclwiPntrZXlQcmVzc1RpbWVzfTwvc3Bhbj5cclxuICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlRmllbGRDaGFuZ2V9XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tc2Vjb25kYXJ5IGJ0bi1zbSBtbC0zXCJcclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgQ2xpY2sgaGVyZSB0byByZXN0YXJ0XHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKX1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5CYXNpY0FwcFByZXNlbnQucHJvcFR5cGVzID0ge1xyXG4gIGNsaWNrVGltZXM6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAga2V5UHJlc3NUaW1lczogUHJvcFR5cGVzLm51bWJlcixcclxuICBwcmVzc2VkS2V5OiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHNlY3JldEtleTogUHJvcFR5cGVzLnN0cmluZyxcclxuICBoYW5kbGVGaWVsZENoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IEJhc2ljQXBwUHJlc2VudDtcclxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XHJcbmltcG9ydCBCYXNpY0FwcFByZXNlbnQgZnJvbSBcIi4vQmFzaWNBcHBQcmVzZW50XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNpY0FwcCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBjbGlja1RpbWVzOiAwLFxyXG4gICAgICBrZXlQcmVzc1RpbWVzOiAwLFxyXG4gICAgICBwcmVzc2VkS2V5OiBcIm51bGxcIixcclxuICAgICAgc2VjcmV0S2V5OiBudWxsLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmhhbmRsZUZpZWxkQ2hhbmdlID0gdGhpcy5oYW5kbGVGaWVsZENoYW5nZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5oYW5kbGVLZXlQcmVzcyA9IHRoaXMuaGFuZGxlS2V5UHJlc3MuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgY29uc29sZS5sb2coXCJjb21wb25lbnREaWRNb3VudFwiLCB0aGlzLnN0YXRlKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuaGFuZGxlS2V5UHJlc3MsIGZhbHNlKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiY29tcG9uZW50RGlkVXBkYXRlXCIsIHRoaXMuc3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlRmllbGRDaGFuZ2UgPSAoZXZlbnQpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBjbGlja1RpbWVzOiB0aGlzLnN0YXRlLmNsaWNrVGltZXMgKyAxLFxyXG4gICAgICBrZXlQcmVzc1RpbWVzOiAwLFxyXG4gICAgICBwcmVzc2VkS2V5OiBcIm51bGxcIixcclxuICAgICAgc2VjcmV0S2V5OiBudWxsLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgaGFuZGxlS2V5UHJlc3MgPSAoZXZlbnQpID0+IHtcclxuICAgIGlmICh0aGlzLnN0YXRlLnNlY3JldEtleSA9PT0gbnVsbCkge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBzZWNyZXRLZXk6IGV2ZW50LmtleSxcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBjbGlja1RpbWVzOiAwLFxyXG4gICAgICAgIGtleVByZXNzVGltZXM6IDAsXHJcbiAgICAgICAgcHJlc3NlZEtleTogXCJudWxsXCIsXHJcbiAgICAgICAgc2VjcmV0S2V5OiBudWxsLFxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5wcmVzc2VkS2V5ID09PSB0aGlzLnN0YXRlLnNlY3JldEtleSkge1xyXG4gICAgICAvLyBkbyBub3RoaW5nXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBwcmVzc2VkS2V5OiBldmVudC5rZXksXHJcbiAgICAgICAga2V5UHJlc3NUaW1lczogdGhpcy5zdGF0ZS5rZXlQcmVzc1RpbWVzICsgMSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJrZXkgcHJlc3NlZCBldmVudDpcIiwgZXZlbnQpO1xyXG4gIH07XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgdGV4dC1kYW5nZXJcIj5cclxuICAgICAgICA8QmFzaWNBcHBQcmVzZW50XHJcbiAgICAgICAgICBjbGlja1RpbWVzPXt0aGlzLnN0YXRlLmNsaWNrVGltZXN9XHJcbiAgICAgICAgICBrZXlQcmVzc1RpbWVzPXt0aGlzLnN0YXRlLmtleVByZXNzVGltZXN9XHJcbiAgICAgICAgICBwcmVzc2VkS2V5PXt0aGlzLnN0YXRlLnByZXNzZWRLZXl9XHJcbiAgICAgICAgICBzZWNyZXRLZXk9e3RoaXMuc3RhdGUuc2VjcmV0S2V5fVxyXG4gICAgICAgICAgaGFuZGxlRmllbGRDaGFuZ2U9e3RoaXMuaGFuZGxlRmllbGRDaGFuZ2V9XHJcbiAgICAgICAgLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBheGlvcy5jcmVhdGUoe1xyXG4gIGJhc2VVUkw6IFwiaHR0cHM6Ly9wYWNrYWdpc3Qub3JnXCIsXHJcbiAgdGltZW91dDogMzAwMCxcclxuICByZXNwb25zZVR5cGU6IFwianNvblwiLFxyXG4gIC8vIGRlZmF1bHQgcGFyYW1zIG1heSBub3Qgd29ya2luZywgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy8yMTkwXHJcbiAgcGFyYW1zOiB7XHJcbiAgICBwZXJfcGFnZTogNSxcclxuICB9LFxyXG4gIGhlYWRlcnM6IHtcclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgXCJYLUN1c3RvbS1IZWFkZXJcIjogXCJBbGV4U3RhY2sgcmVhY3Qgc3RhcnRlciBleGFtcGxlXCIsXHJcbiAgICBBdXRob3JpemF0aW9uOiBcIkNsaWVudCBJZCBjaGFuZ2UtaGVyZS1pZi1hdXRob3JpemF0aW9uLW5lZWRlZFwiLFxyXG4gIH0sXHJcbn0pO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcclxuXHJcbmNvbnN0IEF4aW9zQXBwUmVzdWx0cyA9ICh7IHRvdGFsLCBzZWFyY2hSZXN1bHRzLCBoYW5kbGVGaWVsZENoYW5nZSB9KSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIHtzZWFyY2hSZXN1bHRzLmxlbmd0aCA+IDAgJiZcclxuICAgICAgICBzZWFyY2hSZXN1bHRzLm1hcCgoaXRlbSwgaW5kZXgpID0+IChcclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IHRleHQtbGVmdCBib3JkZXItYm90dG9tIHAtM1wiIGtleT17aW5kZXh9PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1tZFwiPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImJhZGdlIGJhZGdlLXNlY29uZGFyeVwiPntpbmRleCArIDF9PC9zcGFuPntcIiBcIn1cclxuICAgICAgICAgICAgICA8YSBocmVmPXtpdGVtLnJlcG9zaXRvcnl9IHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgICAgICAgICAge2l0ZW0ubmFtZX1cclxuICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhcyBmYS1kb3dubG9hZCAgdGV4dC1zdWNjZXNzIG1yLTFcIj48L2k+XHJcbiAgICAgICAgICAgICAgICB7aXRlbS5kb3dubG9hZHN9XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1tZCB0ZXh0LXNlY29uZGFyeVwiPntpdGVtLmRlc2NyaXB0aW9ufTwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKSl9XHJcbiAgICAgIHt0b3RhbCA+IDAgJiYgdG90YWwgPiBzZWFyY2hSZXN1bHRzLmxlbmd0aCAmJiAoXHJcbiAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zdWNjZXNzIG0tMlwiXHJcbiAgICAgICAgICBuYW1lPVwibG9hZE1vcmVcIlxyXG4gICAgICAgICAgb25DbGljaz17aGFuZGxlRmllbGRDaGFuZ2V9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgTG9hZCBNb3JlIERhdGFcclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgKX1cclxuICAgICAgey8qIFNob3cgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiwgcGFnZXMsIHRvdGFsICovfVxyXG4gICAgICB7dG90YWwgPT09IDAgJiYgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWRhbmdlclwiPk5vIHJlc3VsdDwvZGl2Pn1cclxuICAgICAge3RvdGFsID4gMCAmJiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWRhbmdlciBtLTNcIj5Ub3RhbCByZXN1bHRzOiB7dG90YWx9PC9kaXY+XHJcbiAgICAgICl9XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuQXhpb3NBcHBSZXN1bHRzLnByb3BUeXBlcyA9IHtcclxuICB0b3RhbDogUHJvcFR5cGVzLm51bWJlcixcclxuICBzZWFyY2hSZXN1bHRzOiBQcm9wVHlwZXMuYXJyYXksXHJcbiAgaGFuZGxlRmllbGRDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXhpb3NBcHBSZXN1bHRzO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcclxuaW1wb3J0IEF4aW9zQXBwUmVzdWx0cyBmcm9tIFwiLi9BeGlvc0FwcFJlc3VsdHNcIjtcclxuXHJcbmNvbnN0IEF4aW9zQXBwUHJlc2VudCA9ICh7XHJcbiAga2V5d29yZCxcclxuICB0b3RhbCxcclxuICBzZWFyY2hSZXN1bHRzLFxyXG4gIGhhbmRsZUZpZWxkQ2hhbmdlLFxyXG4gIGhhbmRsZVNlYXJjaFN1Ym1pdCxcclxufSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTEgbWItNSBwdC01IHBiLTUgcGwtNCB0ZXh0LWRhcmtcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXByaW1hcnkgbWItM1wiPlxyXG4gICAgICAgIDxoMj5BeGlvcyBSRVNUZnVsIEFQSSBzZWFyY2ggZXhhbXBsZSE8L2gyPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1zZWNvbmRhcnlcIj5cclxuICAgICAgICAgIEF4aW9zIFJFU1RmdWwgQVBJIHNlYXJjaCBleGFtcGxlOiBBIGZvcm0gdXNpbmcgYXhpb3MgdG8gaW1wbGVtZW50IGFcclxuICAgICAgICAgIFJFU1RmdWwgQVBJIHNlYXJjaFxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVTZWFyY2hTdWJtaXR9PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1zdWNjZXNzXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwIG1iLTNcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+XHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtdGV4dFwiIGlkPVwiaW5wdXRHcm91cC1zaXppbmctZGVmYXVsdFwiPlxyXG4gICAgICAgICAgICAgICAgS2V5d29yZFxyXG4gICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICBuYW1lPVwia2V5d29yZFwiXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sIHRleHQtc3VjY2Vzc1wiXHJcbiAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIkRlZmF1bHRcIlxyXG4gICAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJpbnB1dEdyb3VwLXNpemluZy1kZWZhdWx0XCJcclxuICAgICAgICAgICAgICB2YWx1ZT17a2V5d29yZH1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlRmllbGRDaGFuZ2V9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtYXBwZW5kXCI+XHJcbiAgICAgICAgICAgICAgPHNlbGVjdCBvbkNoYW5nZT17aGFuZGxlRmllbGRDaGFuZ2V9IG5hbWU9XCJwZXJQYWdlXCI+XHJcbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiNVwiPkRpc3BsYXkgTnVtYmVyPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiNVwiPjUgcmVzdWx0cyBwZXIgcGFnZTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjEwXCI+MTAgcmVzdWx0cyBwZXIgcGFnZTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjIwXCI+MjAgcmVzdWx0cyBwZXIgcGFnZTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjUwXCI+NTAgcmVzdWx0cyBwZXIgcGFnZTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cC1hcHBlbmRcIj5cclxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tc3VjY2Vzc1wiIHR5cGU9XCJzdWJtaXRcIj5cclxuICAgICAgICAgICAgICAgIFNlYXJjaFxyXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Zvcm0+XHJcblxyXG4gICAgICB7LyogRGlzcGxheSByZXN1bHRzICovfVxyXG4gICAgICA8QXhpb3NBcHBSZXN1bHRzXHJcbiAgICAgICAgdG90YWw9e3RvdGFsfVxyXG4gICAgICAgIHNlYXJjaFJlc3VsdHM9e3NlYXJjaFJlc3VsdHN9XHJcbiAgICAgICAgaGFuZGxlRmllbGRDaGFuZ2U9e2hhbmRsZUZpZWxkQ2hhbmdlfVxyXG4gICAgICAvPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbkF4aW9zQXBwUHJlc2VudC5wcm9wVHlwZXMgPSB7XHJcbiAga2V5d29yZDogUHJvcFR5cGVzLnN0cmluZyxcclxuICB0b3RhbDogUHJvcFR5cGVzLm51bWJlcixcclxuICBzZWFyY2hSZXN1bHRzOiBQcm9wVHlwZXMuYXJyYXksXHJcbiAgaGFuZGxlRmllbGRDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxyXG4gIGhhbmRsZVNlYXJjaFN1Ym1pdDogUHJvcFR5cGVzLmZ1bmMsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBeGlvc0FwcFByZXNlbnQ7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5cclxuY29uc3QgRm9vdGVyUHJlc2VudCA9ICgpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJtdC01IG1iLTUgcHQtNSBwYi01IHBsLTQgYmctZGFyayB0ZXh0LWxpZ2h0XCI+XHJcbiAgICAgIFRpbWUgbm93IDoge25ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9IC1cclxuICAgICAge25ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKCl9XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuRm9vdGVyUHJlc2VudC5wcm9wVHlwZXMgPSB7fTtcclxuZXhwb3J0IGRlZmF1bHQgRm9vdGVyUHJlc2VudDtcclxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XHJcbmltcG9ydCBheGlvc0FwaSBmcm9tIFwiLi4vLi4vYXBpL2F4aW9zQXBpXCI7XHJcbmltcG9ydCBBeGlvc0FwcFByZXNlbnQgZnJvbSBcIi4vQXhpb3NBcHBQcmVzZW50XCI7XHJcbmltcG9ydCBGb290ZXJQcmVzZW50IGZyb20gXCIuLi9mb290ZXIvRm9vdGVyUHJlc2VudFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXhpb3NBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAga2V5d29yZDogXCJyZWFjdCBhcGlcIixcclxuICAgICAgc2VhcmNoUmVzdWx0czogW10sXHJcbiAgICAgIHBhZ2U6IDEsXHJcbiAgICAgIHBlclBhZ2U6IDUsXHJcbiAgICAgIHRvdGFsOiBudWxsLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmhhbmRsZUZpZWxkQ2hhbmdlID0gdGhpcy5oYW5kbGVGaWVsZENoYW5nZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5oYW5kbGVTZWFyY2hTdWJtaXQgPSB0aGlzLmhhbmRsZVNlYXJjaFN1Ym1pdC5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImNvbXBvbmVudERpZE1vdW50XCIsIHRoaXMuc3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJjb21wb25lbnREaWRVcGRhdGVcIiwgdGhpcy5zdGF0ZSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVGaWVsZENoYW5nZSA9IChldmVudCkgPT4ge1xyXG4gICAgaWYgKGV2ZW50LnRhcmdldC5uYW1lID09IFwia2V5d29yZFwiKSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGtleXdvcmQ6IGV2ZW50LnRhcmdldC52YWx1ZSxcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldC5uYW1lID09IFwicGVyUGFnZVwiKSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHBlclBhZ2U6IGV2ZW50LnRhcmdldC52YWx1ZSxcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldC5uYW1lID09IFwibG9hZE1vcmVcIikge1xyXG4gICAgICBjb25zdCBwYWdlTnVtYmVyID0gdGhpcy5zdGF0ZS5wYWdlICsgMTtcclxuICAgICAgdGhpcy5nZXRBcGlSZXN1bHQocGFnZU51bWJlcik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2codGhpcy5zdGF0ZSk7XHJcbiAgfTtcclxuXHJcbiAgaGFuZGxlU2VhcmNoU3VibWl0ID0gKGV2ZW50KSA9PiB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgdGhpcy5nZXRBcGlSZXN1bHQoMSk7XHJcbiAgfTtcclxuXHJcbiAgYXN5bmMgZ2V0QXBpUmVzdWx0KHBhZ2VOdW1iZXIpIHtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zQXBpXHJcbiAgICAgIC5nZXQoXCIvc2VhcmNoLmpzb25cIiwge1xyXG4gICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgcTogdGhpcy5zdGF0ZS5rZXl3b3JkLFxyXG4gICAgICAgICAgcGVyX3BhZ2U6IHRoaXMuc3RhdGUucGVyUGFnZSxcclxuICAgICAgICAgIHBhZ2U6IHBhZ2VOdW1iZXIsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yLCByZXMpO1xyXG4gICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgfSk7XHJcblxyXG4gICAgaWYgKHJlcy5kYXRhKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKHJlcy5kYXRhKTtcclxuICAgICAgaWYgKHBhZ2VOdW1iZXIgPiAxKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICBzZWFyY2hSZXN1bHRzOiBbLi4udGhpcy5zdGF0ZS5zZWFyY2hSZXN1bHRzLCAuLi5yZXMuZGF0YS5yZXN1bHRzXSxcclxuICAgICAgICAgIHRvdGFsOiByZXMuZGF0YS50b3RhbCxcclxuICAgICAgICAgIGxvYWRNb3JlOiBmYWxzZSxcclxuICAgICAgICAgIHBhZ2U6IHBhZ2VOdW1iZXIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICBzZWFyY2hSZXN1bHRzOiByZXMuZGF0YS5yZXN1bHRzLFxyXG4gICAgICAgICAgdG90YWw6IHJlcy5kYXRhLnRvdGFsLFxyXG4gICAgICAgICAgbG9hZE1vcmU6IGZhbHNlLFxyXG4gICAgICAgICAgcGFnZTogMSxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgdGV4dC1kYW5nZXJcIj5cclxuICAgICAgICA8QXhpb3NBcHBQcmVzZW50XHJcbiAgICAgICAgICBrZXl3b3JkPXt0aGlzLnN0YXRlLmtleXdvcmR9XHJcbiAgICAgICAgICB0b3RhbD17dGhpcy5zdGF0ZS50b3RhbH1cclxuICAgICAgICAgIHNlYXJjaFJlc3VsdHM9e3RoaXMuc3RhdGUuc2VhcmNoUmVzdWx0c31cclxuICAgICAgICAgIGhhbmRsZUZpZWxkQ2hhbmdlPXt0aGlzLmhhbmRsZUZpZWxkQ2hhbmdlfVxyXG4gICAgICAgICAgaGFuZGxlU2VhcmNoU3VibWl0PXt0aGlzLmhhbmRsZVNlYXJjaFN1Ym1pdH1cclxuICAgICAgICAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgTmF2TGluaywgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG5jb25zdCBoaWRlTmF2YmFyID0gKGFjdGlvbikgPT4ge1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29sbGFwc2libGVOYXZiYXJcIikuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XHJcbn07XHJcblxyXG5jb25zdCBIZWFkZXJQcmVzZW50ID0gKCkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8bmF2IGNsYXNzTmFtZT1cIm5hdmJhciBuYXZiYXItZXhwYW5kLW1kIGJnLWRhcmsgbmF2YmFyLWRhcmtcIj5cclxuICAgICAgPE5hdkxpbmsgdG89XCIvXCIgY2xhc3NOYW1lPVwibmF2YmFyLWJyYW5kXCI+XHJcbiAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFiIGZhLXJlYWN0IG1yLTFcIj48L2k+XHJcbiAgICAgICAgUmVhY3QgRXhhbXBsZXNcclxuICAgICAgPC9OYXZMaW5rPlxyXG5cclxuICAgICAgPGJ1dHRvblxyXG4gICAgICAgIGNsYXNzTmFtZT1cIm5hdmJhci10b2dnbGVyXCJcclxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJcclxuICAgICAgICBkYXRhLXRhcmdldD1cIiNjb2xsYXBzaWJsZU5hdmJhclwiXHJcbiAgICAgID5cclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuYXZiYXItdG9nZ2xlci1pY29uXCI+PC9zcGFuPlxyXG4gICAgICA8L2J1dHRvbj5cclxuXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlXCIgaWQ9XCJjb2xsYXBzaWJsZU5hdmJhclwiPlxyXG4gICAgICAgIDx1bCBjbGFzc05hbWU9XCJuYXZiYXItbmF2XCI+XHJcbiAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibmF2LWl0ZW1cIj5cclxuICAgICAgICAgICAgPE5hdkxpbmtcclxuICAgICAgICAgICAgICB0bz1cIi9iYXNpY1wiXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmF2LWxpbmtcIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhpZGVOYXZiYXIoXCJcIil9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBCYXNpYyBSZWFjdFxyXG4gICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL1wiIGNsYXNzTmFtZT1cIm5hdi1saW5rXCIgb25DbGljaz17KCkgPT4gaGlkZU5hdmJhcihcIlwiKX0+XHJcbiAgICAgICAgICAgICAgQXhpb3MgQVBJXHJcbiAgICAgICAgICAgIDwvTmF2TGluaz5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibmF2LWl0ZW1cIj5cclxuICAgICAgICAgICAgPE5hdkxpbmtcclxuICAgICAgICAgICAgICB0bz1cIi9yZWR1eFwiXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmF2LWxpbmtcIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhpZGVOYXZiYXIoXCJcIil9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBSZWR1eCBTYWdhXHJcbiAgICAgICAgICAgIDwvTmF2TGluaz5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgPC91bD5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L25hdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGVhZGVyUHJlc2VudDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xyXG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIFN3aXRjaCB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBCYXNpY0FwcCBmcm9tIFwiLi9jb21wb25lbnRzL2Jhc2ljQXBwL0Jhc2ljQXBwXCI7XHJcbmltcG9ydCBBeGlvc0FwcCBmcm9tIFwiLi9jb21wb25lbnRzL2F4aW9zQXBwL0F4aW9zQXBwXCI7XHJcbmltcG9ydCBIZWFkZXJQcmVzZW50IGZyb20gXCIuL2NvbXBvbmVudHMvaGVhZGVyL0hlYWRlclByZXNlbnRcIjtcclxuaW1wb3J0IEZvb3RlclByZXNlbnQgZnJvbSBcIi4vY29tcG9uZW50cy9mb290ZXIvRm9vdGVyUHJlc2VudFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVhY3RBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxSb3V0ZXI+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXItZmx1aWQgdG9wLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgPEhlYWRlclByZXNlbnQgLz5cclxuICAgICAgICAgIDxTd2l0Y2g+XHJcbiAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL2Jhc2ljXCIgY29tcG9uZW50PXtCYXNpY0FwcH0gLz5cclxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvYXhpb3NcIiBjb21wb25lbnQ9e0F4aW9zQXBwfSAvPlxyXG4gICAgICAgICAgICA8Um91dGUgY29tcG9uZW50PXtBeGlvc0FwcH0gLz5cclxuICAgICAgICAgIDwvU3dpdGNoPlxyXG4gICAgICAgICAgPEZvb3RlclByZXNlbnQgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9Sb3V0ZXI+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVhY3QtanMtYmFzaWMtYXBwXCIpKSB7XHJcbiAgUmVhY3RET00ucmVuZGVyKDxSZWFjdEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZWFjdC1qcy1iYXNpYy1hcHBcIikpO1xyXG59XHJcblxyXG4vLyAgdW5jb21tZW50IGJlbG93IGZvciBSZWFjdCB3aXRob3V0IHJvdXRlclxyXG4vLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNpY1JlYWN0QXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuLy8gICByZW5kZXIoKSB7XHJcbi8vICAgICByZXR1cm4gPEJhc2ljQXBwIC8+O1xyXG4vLyAgIH1cclxuLy8gfVxyXG5cclxuLy8gZXhwb3J0IGNsYXNzIEF4aW9zQXBpQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuLy8gICByZW5kZXIoKSB7XHJcbi8vICAgICByZXR1cm4gPEF4aW9zQXBwIC8+O1xyXG4vLyAgIH1cclxuLy8gfVxyXG5cclxuLy8gaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVhY3QtanMtYmFzaWMtYXBwXCIpKSB7XHJcbi8vICAgUmVhY3RET00ucmVuZGVyKFxyXG4vLyAgICAgPEJhc2ljUmVhY3RBcHAgLz4sXHJcbi8vICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlYWN0LWpzLWJhc2ljLWFwcFwiKVxyXG4vLyAgICk7XHJcbi8vIH1cclxuXHJcbi8vIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlYWN0LWpzLWF4aW9zLWFwcFwiKSkge1xyXG4vLyAgIFJlYWN0RE9NLnJlbmRlcihcclxuLy8gICAgIDxBeGlvc0FwaUFwcCAvPixcclxuLy8gICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVhY3QtanMtYXhpb3MtYXBwXCIpXHJcbi8vICAgKTtcclxuLy8gfVxyXG4iXSwic291cmNlUm9vdCI6IiJ9